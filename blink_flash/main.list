
demos/blink_flash/main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 00 20 2d 59 00 00 71 59 00 00 71 59 00 00     .P. -Y..qY..qY..
      10:	71 59 00 00 71 59 00 00 71 59 00 00 00 00 00 00     qY..qY..qY......
	...
      2c:	71 59 00 00 71 59 00 00 00 00 00 00 71 59 00 00     qY..qY......qY..
      3c:	71 59 00 00 71 59 00 00 71 59 00 00 71 59 00 00     qY..qY..qY..qY..
      4c:	71 59 00 00 71 59 00 00 71 59 00 00 71 59 00 00     qY..qY..qY..qY..
      5c:	71 59 00 00 71 59 00 00 71 59 00 00 71 59 00 00     qY..qY..qY..qY..
      6c:	71 59 00 00 71 59 00 00 71 59 00 00 71 59 00 00     qY..qY..qY..qY..
      7c:	71 59 00 00 71 59 00 00 71 59 00 00 71 59 00 00     qY..qY..qY..qY..
      8c:	71 59 00 00 71 59 00 00 71 59 00 00 71 59 00 00     qY..qY..qY..qY..
      9c:	71 59 00 00 71 59 00 00 71 59 00 00 71 59 00 00     qY..qY..qY..qY..
      ac:	71 59 00 00 71 59 00 00 71 59 00 00 71 59 00 00     qY..qY..qY..qY..
      bc:	71 59 00 00 71 59 00 00 71 59 00 00 71 59 00 00     qY..qY..qY..qY..
      cc:	71 59 00 00 71 59 00 00 71 59 00 00 71 59 00 00     qY..qY..qY..qY..
      dc:	71 59 00 00 71 59 00 00 71 59 00 00 71 59 00 00     qY..qY..qY..qY..
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, psp\n\t" 
     10c:	f3ef 8309 	mrs	r3, PSP
     110:	4618      	mov	r0, r3
     112:	4770      	bx	lr
     114:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     116:	4623      	mov	r3, r4
}
     118:	4618      	mov	r0, r3

0000011a <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP 
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11a:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11c:	f383 8809 	msr	PSP, r3
     120:	4770      	bx	lr
                  "BX  lr     \n\t" : : "r" (topOfProcStack) );
}
     122:	bf00      	nop

00000124 <__get_MSP>:
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, msp\n\t" 
     124:	f3ef 8308 	mrs	r3, MSP
     128:	4618      	mov	r0, r3
     12a:	4770      	bx	lr
     12c:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     12e:	4623      	mov	r3, r4
}
     130:	4618      	mov	r0, r3

00000132 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP 
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     132:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     134:	f383 8808 	msr	MSP, r3
     138:	4770      	bx	lr
                  "BX  lr     \n\t" : : "r" (topOfMainStack) );
}
     13a:	bf00      	nop

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	bc80      	pop	{r7}
     156:	4770      	bx	lr

00000158 <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     158:	b480      	push	{r7}
     15a:	b083      	sub	sp, #12
     15c:	af00      	add	r7, sp, #0
     15e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     160:	687b      	ldr	r3, [r7, #4]
     162:	f383 8811 	msr	BASEPRI, r3
}
     166:	bf00      	nop
     168:	370c      	adds	r7, #12
     16a:	46bd      	mov	sp, r7
     16c:	bc80      	pop	{r7}
     16e:	4770      	bx	lr

00000170 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     170:	b480      	push	{r7}
     172:	b083      	sub	sp, #12
     174:	af00      	add	r7, sp, #0
  uint32_t result=0;
     176:	2300      	movs	r3, #0
     178:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17a:	f3ef 8310 	mrs	r3, PRIMASK
     17e:	607b      	str	r3, [r7, #4]
  return(result);
     180:	687b      	ldr	r3, [r7, #4]
}
     182:	4618      	mov	r0, r3
     184:	370c      	adds	r7, #12
     186:	46bd      	mov	sp, r7
     188:	bc80      	pop	{r7}
     18a:	4770      	bx	lr

0000018c <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     18c:	b480      	push	{r7}
     18e:	b083      	sub	sp, #12
     190:	af00      	add	r7, sp, #0
     192:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     194:	687b      	ldr	r3, [r7, #4]
     196:	f383 8810 	msr	PRIMASK, r3
}
     19a:	bf00      	nop
     19c:	370c      	adds	r7, #12
     19e:	46bd      	mov	sp, r7
     1a0:	bc80      	pop	{r7}
     1a2:	4770      	bx	lr

000001a4 <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1a4:	b480      	push	{r7}
     1a6:	b083      	sub	sp, #12
     1a8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1aa:	2300      	movs	r3, #0
     1ac:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1ae:	f3ef 8313 	mrs	r3, FAULTMASK
     1b2:	607b      	str	r3, [r7, #4]
  return(result);
     1b4:	687b      	ldr	r3, [r7, #4]
}
     1b6:	4618      	mov	r0, r3
     1b8:	370c      	adds	r7, #12
     1ba:	46bd      	mov	sp, r7
     1bc:	bc80      	pop	{r7}
     1be:	4770      	bx	lr

000001c0 <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1c0:	b480      	push	{r7}
     1c2:	b083      	sub	sp, #12
     1c4:	af00      	add	r7, sp, #0
     1c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1c8:	687b      	ldr	r3, [r7, #4]
     1ca:	f383 8813 	msr	FAULTMASK, r3
}
     1ce:	bf00      	nop
     1d0:	370c      	adds	r7, #12
     1d2:	46bd      	mov	sp, r7
     1d4:	bc80      	pop	{r7}
     1d6:	4770      	bx	lr

000001d8 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1d8:	b480      	push	{r7}
     1da:	b083      	sub	sp, #12
     1dc:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1de:	2300      	movs	r3, #0
     1e0:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1e2:	f3ef 8314 	mrs	r3, CONTROL
     1e6:	607b      	str	r3, [r7, #4]
  return(result);
     1e8:	687b      	ldr	r3, [r7, #4]
}
     1ea:	4618      	mov	r0, r3
     1ec:	370c      	adds	r7, #12
     1ee:	46bd      	mov	sp, r7
     1f0:	bc80      	pop	{r7}
     1f2:	4770      	bx	lr

000001f4 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     1f4:	b480      	push	{r7}
     1f6:	b083      	sub	sp, #12
     1f8:	af00      	add	r7, sp, #0
     1fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     1fc:	687b      	ldr	r3, [r7, #4]
     1fe:	f383 8814 	msr	CONTROL, r3
}
     202:	bf00      	nop
     204:	370c      	adds	r7, #12
     206:	46bd      	mov	sp, r7
     208:	bc80      	pop	{r7}
     20a:	4770      	bx	lr

0000020c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     20c:	b480      	push	{r7}
     20e:	b085      	sub	sp, #20
     210:	af00      	add	r7, sp, #0
     212:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     214:	2300      	movs	r3, #0
     216:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     218:	687b      	ldr	r3, [r7, #4]
     21a:	ba1b      	rev	r3, r3
     21c:	60fb      	str	r3, [r7, #12]
  return(result);
     21e:	68fb      	ldr	r3, [r7, #12]
}
     220:	4618      	mov	r0, r3
     222:	3714      	adds	r7, #20
     224:	46bd      	mov	sp, r7
     226:	bc80      	pop	{r7}
     228:	4770      	bx	lr

0000022a <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     22a:	b480      	push	{r7}
     22c:	b085      	sub	sp, #20
     22e:	af00      	add	r7, sp, #0
     230:	4603      	mov	r3, r0
     232:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     234:	2300      	movs	r3, #0
     236:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     238:	88fb      	ldrh	r3, [r7, #6]
     23a:	ba5b      	rev16	r3, r3
     23c:	60fb      	str	r3, [r7, #12]
  return(result);
     23e:	68fb      	ldr	r3, [r7, #12]
}
     240:	4618      	mov	r0, r3
     242:	3714      	adds	r7, #20
     244:	46bd      	mov	sp, r7
     246:	bc80      	pop	{r7}
     248:	4770      	bx	lr

0000024a <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     24a:	b480      	push	{r7}
     24c:	b085      	sub	sp, #20
     24e:	af00      	add	r7, sp, #0
     250:	4603      	mov	r3, r0
     252:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     254:	2300      	movs	r3, #0
     256:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     258:	88fb      	ldrh	r3, [r7, #6]
     25a:	badb      	revsh	r3, r3
     25c:	60fb      	str	r3, [r7, #12]
  return(result);
     25e:	68fb      	ldr	r3, [r7, #12]
}
     260:	4618      	mov	r0, r3
     262:	3714      	adds	r7, #20
     264:	46bd      	mov	sp, r7
     266:	bc80      	pop	{r7}
     268:	4770      	bx	lr

0000026a <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     26a:	b480      	push	{r7}
     26c:	b085      	sub	sp, #20
     26e:	af00      	add	r7, sp, #0
     270:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     272:	2300      	movs	r3, #0
     274:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     276:	687b      	ldr	r3, [r7, #4]
     278:	fa93 f3a3 	rbit	r3, r3
     27c:	60fb      	str	r3, [r7, #12]
   return(result);
     27e:	68fb      	ldr	r3, [r7, #12]
}
     280:	4618      	mov	r0, r3
     282:	3714      	adds	r7, #20
     284:	46bd      	mov	sp, r7
     286:	bc80      	pop	{r7}
     288:	4770      	bx	lr

0000028a <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     28a:	b480      	push	{r7}
     28c:	b085      	sub	sp, #20
     28e:	af00      	add	r7, sp, #0
     290:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     292:	2300      	movs	r3, #0
     294:	73fb      	strb	r3, [r7, #15]
  
   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     296:	687b      	ldr	r3, [r7, #4]
     298:	e8d3 3f4f 	ldrexb	r3, [r3]
     29c:	73fb      	strb	r3, [r7, #15]
   return(result);
     29e:	7bfb      	ldrb	r3, [r7, #15]
}
     2a0:	4618      	mov	r0, r3
     2a2:	3714      	adds	r7, #20
     2a4:	46bd      	mov	sp, r7
     2a6:	bc80      	pop	{r7}
     2a8:	4770      	bx	lr

000002aa <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2aa:	b480      	push	{r7}
     2ac:	b085      	sub	sp, #20
     2ae:	af00      	add	r7, sp, #0
     2b0:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2b2:	2300      	movs	r3, #0
     2b4:	81fb      	strh	r3, [r7, #14]
  
   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2b6:	687b      	ldr	r3, [r7, #4]
     2b8:	e8d3 3f5f 	ldrexh	r3, [r3]
     2bc:	81fb      	strh	r3, [r7, #14]
   return(result);
     2be:	89fb      	ldrh	r3, [r7, #14]
}
     2c0:	4618      	mov	r0, r3
     2c2:	3714      	adds	r7, #20
     2c4:	46bd      	mov	sp, r7
     2c6:	bc80      	pop	{r7}
     2c8:	4770      	bx	lr

000002ca <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2ca:	b480      	push	{r7}
     2cc:	b085      	sub	sp, #20
     2ce:	af00      	add	r7, sp, #0
     2d0:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2d2:	2300      	movs	r3, #0
     2d4:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2d6:	687b      	ldr	r3, [r7, #4]
     2d8:	e853 3f00 	ldrex	r3, [r3]
     2dc:	60fb      	str	r3, [r7, #12]
   return(result);
     2de:	68fb      	ldr	r3, [r7, #12]
}
     2e0:	4618      	mov	r0, r3
     2e2:	3714      	adds	r7, #20
     2e4:	46bd      	mov	sp, r7
     2e6:	bc80      	pop	{r7}
     2e8:	4770      	bx	lr

000002ea <__STREXB>:
 * @return        successful / failed
 *
 * Exclusive STR command for 8 bit values
 */
uint32_t __STREXB(uint8_t value, uint8_t *addr)
{
     2ea:	b480      	push	{r7}
     2ec:	b085      	sub	sp, #20
     2ee:	af00      	add	r7, sp, #0
     2f0:	4603      	mov	r3, r0
     2f2:	6039      	str	r1, [r7, #0]
     2f4:	71fb      	strb	r3, [r7, #7]
   uint32_t result=0;
     2f6:	2300      	movs	r3, #0
     2f8:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexb %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     2fa:	683a      	ldr	r2, [r7, #0]
     2fc:	79f9      	ldrb	r1, [r7, #7]
     2fe:	e8c2 1f43 	strexb	r3, r1, [r2]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	bc80      	pop	{r7}
     30e:	4770      	bx	lr

00000310 <__STREXH>:
 * @return        successful / failed
 *
 * Exclusive STR command for 16 bit values
 */
uint32_t __STREXH(uint16_t value, uint16_t *addr)
{
     310:	b480      	push	{r7}
     312:	b085      	sub	sp, #20
     314:	af00      	add	r7, sp, #0
     316:	4603      	mov	r3, r0
     318:	6039      	str	r1, [r7, #0]
     31a:	80fb      	strh	r3, [r7, #6]
   uint32_t result=0;
     31c:	2300      	movs	r3, #0
     31e:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexh %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     320:	683a      	ldr	r2, [r7, #0]
     322:	88f9      	ldrh	r1, [r7, #6]
     324:	e8c2 1f53 	strexh	r3, r1, [r2]
     328:	60fb      	str	r3, [r7, #12]
   return(result);
     32a:	68fb      	ldr	r3, [r7, #12]
}
     32c:	4618      	mov	r0, r3
     32e:	3714      	adds	r7, #20
     330:	46bd      	mov	sp, r7
     332:	bc80      	pop	{r7}
     334:	4770      	bx	lr

00000336 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     336:	b480      	push	{r7}
     338:	b085      	sub	sp, #20
     33a:	af00      	add	r7, sp, #0
     33c:	6078      	str	r0, [r7, #4]
     33e:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     340:	2300      	movs	r3, #0
     342:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     344:	683b      	ldr	r3, [r7, #0]
     346:	687a      	ldr	r2, [r7, #4]
     348:	e843 2300 	strex	r3, r2, [r3]
     34c:	60fb      	str	r3, [r7, #12]
   return(result);
     34e:	68fb      	ldr	r3, [r7, #12]
}
     350:	4618      	mov	r0, r3
     352:	3714      	adds	r7, #20
     354:	46bd      	mov	sp, r7
     356:	bc80      	pop	{r7}
     358:	4770      	bx	lr
	...

0000035c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     35c:	b580      	push	{r7, lr}
     35e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     360:	4b15      	ldr	r3, [pc, #84]	; (3b8 <SystemInit+0x5c>)
     362:	681b      	ldr	r3, [r3, #0]
     364:	4a14      	ldr	r2, [pc, #80]	; (3b8 <SystemInit+0x5c>)
     366:	f043 0301 	orr.w	r3, r3, #1
     36a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     36c:	4b12      	ldr	r3, [pc, #72]	; (3b8 <SystemInit+0x5c>)
     36e:	685a      	ldr	r2, [r3, #4]
     370:	4911      	ldr	r1, [pc, #68]	; (3b8 <SystemInit+0x5c>)
     372:	4b12      	ldr	r3, [pc, #72]	; (3bc <SystemInit+0x60>)
     374:	4013      	ands	r3, r2
     376:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     378:	4b0f      	ldr	r3, [pc, #60]	; (3b8 <SystemInit+0x5c>)
     37a:	681b      	ldr	r3, [r3, #0]
     37c:	4a0e      	ldr	r2, [pc, #56]	; (3b8 <SystemInit+0x5c>)
     37e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
     382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
     386:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     388:	4b0b      	ldr	r3, [pc, #44]	; (3b8 <SystemInit+0x5c>)
     38a:	681b      	ldr	r3, [r3, #0]
     38c:	4a0a      	ldr	r2, [pc, #40]	; (3b8 <SystemInit+0x5c>)
     38e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
     392:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     394:	4b08      	ldr	r3, [pc, #32]	; (3b8 <SystemInit+0x5c>)
     396:	685b      	ldr	r3, [r3, #4]
     398:	4a07      	ldr	r2, [pc, #28]	; (3b8 <SystemInit+0x5c>)
     39a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
     39e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3a0:	4b05      	ldr	r3, [pc, #20]	; (3b8 <SystemInit+0x5c>)
     3a2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3a6:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3a8:	f000 f87e 	bl	4a8 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3ac:	4b04      	ldr	r3, [pc, #16]	; (3c0 <SystemInit+0x64>)
     3ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3b2:	609a      	str	r2, [r3, #8]
#endif 
}
     3b4:	bf00      	nop
     3b6:	bd80      	pop	{r7, pc}
     3b8:	40021000 	.word	0x40021000
     3bc:	f8ff0000 	.word	0xf8ff0000
     3c0:	e000ed00 	.word	0xe000ed00

000003c4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3c4:	b480      	push	{r7}
     3c6:	b085      	sub	sp, #20
     3c8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ca:	2300      	movs	r3, #0
     3cc:	60fb      	str	r3, [r7, #12]
     3ce:	2300      	movs	r3, #0
     3d0:	60bb      	str	r3, [r7, #8]
     3d2:	2300      	movs	r3, #0
     3d4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3d6:	4b2f      	ldr	r3, [pc, #188]	; (494 <SystemCoreClockUpdate+0xd0>)
     3d8:	685b      	ldr	r3, [r3, #4]
     3da:	f003 030c 	and.w	r3, r3, #12
     3de:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
     3e0:	68fb      	ldr	r3, [r7, #12]
     3e2:	2b08      	cmp	r3, #8
     3e4:	d011      	beq.n	40a <SystemCoreClockUpdate+0x46>
     3e6:	68fb      	ldr	r3, [r7, #12]
     3e8:	2b08      	cmp	r3, #8
     3ea:	d83a      	bhi.n	462 <SystemCoreClockUpdate+0x9e>
     3ec:	68fb      	ldr	r3, [r7, #12]
     3ee:	2b00      	cmp	r3, #0
     3f0:	d003      	beq.n	3fa <SystemCoreClockUpdate+0x36>
     3f2:	68fb      	ldr	r3, [r7, #12]
     3f4:	2b04      	cmp	r3, #4
     3f6:	d004      	beq.n	402 <SystemCoreClockUpdate+0x3e>
     3f8:	e033      	b.n	462 <SystemCoreClockUpdate+0x9e>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     3fa:	4b27      	ldr	r3, [pc, #156]	; (498 <SystemCoreClockUpdate+0xd4>)
     3fc:	4a27      	ldr	r2, [pc, #156]	; (49c <SystemCoreClockUpdate+0xd8>)
     3fe:	601a      	str	r2, [r3, #0]
      break;
     400:	e033      	b.n	46a <SystemCoreClockUpdate+0xa6>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     402:	4b25      	ldr	r3, [pc, #148]	; (498 <SystemCoreClockUpdate+0xd4>)
     404:	4a25      	ldr	r2, [pc, #148]	; (49c <SystemCoreClockUpdate+0xd8>)
     406:	601a      	str	r2, [r3, #0]
      break;
     408:	e02f      	b.n	46a <SystemCoreClockUpdate+0xa6>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     40a:	4b22      	ldr	r3, [pc, #136]	; (494 <SystemCoreClockUpdate+0xd0>)
     40c:	685b      	ldr	r3, [r3, #4]
     40e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     412:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     414:	4b1f      	ldr	r3, [pc, #124]	; (494 <SystemCoreClockUpdate+0xd0>)
     416:	685b      	ldr	r3, [r3, #4]
     418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     41c:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
     41e:	68bb      	ldr	r3, [r7, #8]
     420:	0c9b      	lsrs	r3, r3, #18
     422:	3302      	adds	r3, #2
     424:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
     426:	687b      	ldr	r3, [r7, #4]
     428:	2b00      	cmp	r3, #0
     42a:	d106      	bne.n	43a <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     42c:	68bb      	ldr	r3, [r7, #8]
     42e:	4a1c      	ldr	r2, [pc, #112]	; (4a0 <SystemCoreClockUpdate+0xdc>)
     430:	fb02 f303 	mul.w	r3, r2, r3
     434:	4a18      	ldr	r2, [pc, #96]	; (498 <SystemCoreClockUpdate+0xd4>)
     436:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
     438:	e017      	b.n	46a <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     43a:	4b16      	ldr	r3, [pc, #88]	; (494 <SystemCoreClockUpdate+0xd0>)
     43c:	685b      	ldr	r3, [r3, #4]
     43e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     442:	2b00      	cmp	r3, #0
     444:	d006      	beq.n	454 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     446:	68bb      	ldr	r3, [r7, #8]
     448:	4a15      	ldr	r2, [pc, #84]	; (4a0 <SystemCoreClockUpdate+0xdc>)
     44a:	fb02 f303 	mul.w	r3, r2, r3
     44e:	4a12      	ldr	r2, [pc, #72]	; (498 <SystemCoreClockUpdate+0xd4>)
     450:	6013      	str	r3, [r2, #0]
      break;
     452:	e00a      	b.n	46a <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
     454:	68bb      	ldr	r3, [r7, #8]
     456:	4a11      	ldr	r2, [pc, #68]	; (49c <SystemCoreClockUpdate+0xd8>)
     458:	fb02 f303 	mul.w	r3, r2, r3
     45c:	4a0e      	ldr	r2, [pc, #56]	; (498 <SystemCoreClockUpdate+0xd4>)
     45e:	6013      	str	r3, [r2, #0]
      break;
     460:	e003      	b.n	46a <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
     462:	4b0d      	ldr	r3, [pc, #52]	; (498 <SystemCoreClockUpdate+0xd4>)
     464:	4a0d      	ldr	r2, [pc, #52]	; (49c <SystemCoreClockUpdate+0xd8>)
     466:	601a      	str	r2, [r3, #0]
      break;
     468:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     46a:	4b0a      	ldr	r3, [pc, #40]	; (494 <SystemCoreClockUpdate+0xd0>)
     46c:	685b      	ldr	r3, [r3, #4]
     46e:	091b      	lsrs	r3, r3, #4
     470:	f003 030f 	and.w	r3, r3, #15
     474:	4a0b      	ldr	r2, [pc, #44]	; (4a4 <SystemCoreClockUpdate+0xe0>)
     476:	5cd3      	ldrb	r3, [r2, r3]
     478:	b2db      	uxtb	r3, r3
     47a:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
     47c:	4b06      	ldr	r3, [pc, #24]	; (498 <SystemCoreClockUpdate+0xd4>)
     47e:	681a      	ldr	r2, [r3, #0]
     480:	68fb      	ldr	r3, [r7, #12]
     482:	fa22 f303 	lsr.w	r3, r2, r3
     486:	4a04      	ldr	r2, [pc, #16]	; (498 <SystemCoreClockUpdate+0xd4>)
     488:	6013      	str	r3, [r2, #0]
}
     48a:	bf00      	nop
     48c:	3714      	adds	r7, #20
     48e:	46bd      	mov	sp, r7
     490:	bc80      	pop	{r7}
     492:	4770      	bx	lr
     494:	40021000 	.word	0x40021000
     498:	20000000 	.word	0x20000000
     49c:	007a1200 	.word	0x007a1200
     4a0:	003d0900 	.word	0x003d0900
     4a4:	20000004 	.word	0x20000004

000004a8 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     4a8:	b580      	push	{r7, lr}
     4aa:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     4ac:	f000 f802 	bl	4b4 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
     4b0:	bf00      	nop
     4b2:	bd80      	pop	{r7, pc}

000004b4 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     4b4:	b480      	push	{r7}
     4b6:	b083      	sub	sp, #12
     4b8:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     4ba:	2300      	movs	r3, #0
     4bc:	607b      	str	r3, [r7, #4]
     4be:	2300      	movs	r3, #0
     4c0:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     4c2:	4b3a      	ldr	r3, [pc, #232]	; (5ac <SetSysClockTo72+0xf8>)
     4c4:	681b      	ldr	r3, [r3, #0]
     4c6:	4a39      	ldr	r2, [pc, #228]	; (5ac <SetSysClockTo72+0xf8>)
     4c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     4cc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     4ce:	4b37      	ldr	r3, [pc, #220]	; (5ac <SetSysClockTo72+0xf8>)
     4d0:	681b      	ldr	r3, [r3, #0]
     4d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     4d6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
     4d8:	687b      	ldr	r3, [r7, #4]
     4da:	3301      	adds	r3, #1
     4dc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     4de:	683b      	ldr	r3, [r7, #0]
     4e0:	2b00      	cmp	r3, #0
     4e2:	d103      	bne.n	4ec <SetSysClockTo72+0x38>
     4e4:	687b      	ldr	r3, [r7, #4]
     4e6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     4ea:	d1f0      	bne.n	4ce <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     4ec:	4b2f      	ldr	r3, [pc, #188]	; (5ac <SetSysClockTo72+0xf8>)
     4ee:	681b      	ldr	r3, [r3, #0]
     4f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     4f4:	2b00      	cmp	r3, #0
     4f6:	d002      	beq.n	4fe <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
     4f8:	2301      	movs	r3, #1
     4fa:	603b      	str	r3, [r7, #0]
     4fc:	e001      	b.n	502 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     4fe:	2300      	movs	r3, #0
     500:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
     502:	683b      	ldr	r3, [r7, #0]
     504:	2b01      	cmp	r3, #1
     506:	d14b      	bne.n	5a0 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     508:	4b29      	ldr	r3, [pc, #164]	; (5b0 <SetSysClockTo72+0xfc>)
     50a:	681b      	ldr	r3, [r3, #0]
     50c:	4a28      	ldr	r2, [pc, #160]	; (5b0 <SetSysClockTo72+0xfc>)
     50e:	f043 0310 	orr.w	r3, r3, #16
     512:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     514:	4b26      	ldr	r3, [pc, #152]	; (5b0 <SetSysClockTo72+0xfc>)
     516:	681b      	ldr	r3, [r3, #0]
     518:	4a25      	ldr	r2, [pc, #148]	; (5b0 <SetSysClockTo72+0xfc>)
     51a:	f023 0303 	bic.w	r3, r3, #3
     51e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
     520:	4b23      	ldr	r3, [pc, #140]	; (5b0 <SetSysClockTo72+0xfc>)
     522:	681b      	ldr	r3, [r3, #0]
     524:	4a22      	ldr	r2, [pc, #136]	; (5b0 <SetSysClockTo72+0xfc>)
     526:	f043 0302 	orr.w	r3, r3, #2
     52a:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     52c:	4b1f      	ldr	r3, [pc, #124]	; (5ac <SetSysClockTo72+0xf8>)
     52e:	4a1f      	ldr	r2, [pc, #124]	; (5ac <SetSysClockTo72+0xf8>)
     530:	685b      	ldr	r3, [r3, #4]
     532:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     534:	4b1d      	ldr	r3, [pc, #116]	; (5ac <SetSysClockTo72+0xf8>)
     536:	4a1d      	ldr	r2, [pc, #116]	; (5ac <SetSysClockTo72+0xf8>)
     538:	685b      	ldr	r3, [r3, #4]
     53a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     53c:	4b1b      	ldr	r3, [pc, #108]	; (5ac <SetSysClockTo72+0xf8>)
     53e:	685b      	ldr	r3, [r3, #4]
     540:	4a1a      	ldr	r2, [pc, #104]	; (5ac <SetSysClockTo72+0xf8>)
     542:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     546:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     548:	4b18      	ldr	r3, [pc, #96]	; (5ac <SetSysClockTo72+0xf8>)
     54a:	685b      	ldr	r3, [r3, #4]
     54c:	4a17      	ldr	r2, [pc, #92]	; (5ac <SetSysClockTo72+0xf8>)
     54e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     552:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     554:	4b15      	ldr	r3, [pc, #84]	; (5ac <SetSysClockTo72+0xf8>)
     556:	685b      	ldr	r3, [r3, #4]
     558:	4a14      	ldr	r2, [pc, #80]	; (5ac <SetSysClockTo72+0xf8>)
     55a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
     55e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     560:	4b12      	ldr	r3, [pc, #72]	; (5ac <SetSysClockTo72+0xf8>)
     562:	681b      	ldr	r3, [r3, #0]
     564:	4a11      	ldr	r2, [pc, #68]	; (5ac <SetSysClockTo72+0xf8>)
     566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
     56a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     56c:	bf00      	nop
     56e:	4b0f      	ldr	r3, [pc, #60]	; (5ac <SetSysClockTo72+0xf8>)
     570:	681b      	ldr	r3, [r3, #0]
     572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     576:	2b00      	cmp	r3, #0
     578:	d0f9      	beq.n	56e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     57a:	4b0c      	ldr	r3, [pc, #48]	; (5ac <SetSysClockTo72+0xf8>)
     57c:	685b      	ldr	r3, [r3, #4]
     57e:	4a0b      	ldr	r2, [pc, #44]	; (5ac <SetSysClockTo72+0xf8>)
     580:	f023 0303 	bic.w	r3, r3, #3
     584:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
     586:	4b09      	ldr	r3, [pc, #36]	; (5ac <SetSysClockTo72+0xf8>)
     588:	685b      	ldr	r3, [r3, #4]
     58a:	4a08      	ldr	r2, [pc, #32]	; (5ac <SetSysClockTo72+0xf8>)
     58c:	f043 0302 	orr.w	r3, r3, #2
     590:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     592:	bf00      	nop
     594:	4b05      	ldr	r3, [pc, #20]	; (5ac <SetSysClockTo72+0xf8>)
     596:	685b      	ldr	r3, [r3, #4]
     598:	f003 030c 	and.w	r3, r3, #12
     59c:	2b08      	cmp	r3, #8
     59e:	d1f9      	bne.n	594 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
     5a0:	bf00      	nop
     5a2:	370c      	adds	r7, #12
     5a4:	46bd      	mov	sp, r7
     5a6:	bc80      	pop	{r7}
     5a8:	4770      	bx	lr
     5aa:	bf00      	nop
     5ac:	40021000 	.word	0x40021000
     5b0:	40022000 	.word	0x40022000
     5b4:	00005b71 	.word	0x00005b71
     5b8:	20000000 	.word	0x20000000
     5bc:	20000028 	.word	0x20000028
     5c0:	20000028 	.word	0x20000028
     5c4:	20000028 	.word	0x20000028

000005c8 <init_led>:
#include "stm32f10x_exti.h"
#include "stm32f10x_adc.h"
#include "misc.h"

void init_led(void)
{
     5c8:	b580      	push	{r7, lr}
     5ca:	b082      	sub	sp, #8
     5cc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
     5ce:	2101      	movs	r1, #1
     5d0:	2010      	movs	r0, #16
     5d2:	f001 f895 	bl	1700 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
     5d6:	2201      	movs	r2, #1
     5d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     5dc:	4809      	ldr	r0, [pc, #36]	; (604 <init_led+0x3c>)
     5de:	f001 fb5c 	bl	1c9a <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     5e8:	2310      	movs	r3, #16
     5ea:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     5ec:	2303      	movs	r3, #3
     5ee:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
     5f0:	1d3b      	adds	r3, r7, #4
     5f2:	4619      	mov	r1, r3
     5f4:	4803      	ldr	r0, [pc, #12]	; (604 <init_led+0x3c>)
     5f6:	f001 fa1b 	bl	1a30 <GPIO_Init>
}
     5fa:	bf00      	nop
     5fc:	3708      	adds	r7, #8
     5fe:	46bd      	mov	sp, r7
     600:	bd80      	pop	{r7, pc}
     602:	bf00      	nop
     604:	40011000 	.word	0x40011000

00000608 <init_button>:

void init_button(void)
{
     608:	b580      	push	{r7, lr}
     60a:	b082      	sub	sp, #8
     60c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
     60e:	2101      	movs	r1, #1
     610:	2004      	movs	r0, #4
     612:	f001 f875 	bl	1700 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
     616:	2301      	movs	r3, #1
     618:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
     61a:	2304      	movs	r3, #4
     61c:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     61e:	2303      	movs	r3, #3
     620:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
     622:	1d3b      	adds	r3, r7, #4
     624:	4619      	mov	r1, r3
     626:	4803      	ldr	r0, [pc, #12]	; (634 <init_button+0x2c>)
     628:	f001 fa02 	bl	1a30 <GPIO_Init>
}
     62c:	bf00      	nop
     62e:	3708      	adds	r7, #8
     630:	46bd      	mov	sp, r7
     632:	bd80      	pop	{r7, pc}
     634:	40011000 	.word	0x40011000

00000638 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
     638:	b580      	push	{r7, lr}
     63a:	b084      	sub	sp, #16
     63c:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
     63e:	2101      	movs	r1, #1
     640:	2001      	movs	r0, #1
     642:	f001 f85d 	bl	1700 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
     646:	2100      	movs	r1, #0
     648:	2000      	movs	r0, #0
     64a:	f001 fc11 	bl	1e70 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
     64e:	2301      	movs	r3, #1
     650:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
     652:	2300      	movs	r3, #0
     654:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
     656:	2308      	movs	r3, #8
     658:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
     65a:	2301      	movs	r3, #1
     65c:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
     65e:	f107 0308 	add.w	r3, r7, #8
     662:	4618      	mov	r0, r3
     664:	f002 f8da 	bl	281c <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
     668:	2306      	movs	r3, #6
     66a:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
     66c:	230f      	movs	r3, #15
     66e:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
     670:	230f      	movs	r3, #15
     672:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
     674:	2301      	movs	r3, #1
     676:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
     678:	1d3b      	adds	r3, r7, #4
     67a:	4618      	mov	r0, r3
     67c:	f005 f87a 	bl	5774 <NVIC_Init>
}
     680:	bf00      	nop
     682:	3710      	adds	r7, #16
     684:	46bd      	mov	sp, r7
     686:	bd80      	pop	{r7, pc}

00000688 <init_rs232>:

void init_rs232(void)
{
     688:	b580      	push	{r7, lr}
     68a:	b086      	sub	sp, #24
     68c:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
     68e:	2101      	movs	r1, #1
     690:	2005      	movs	r0, #5
     692:	f001 f835 	bl	1700 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
     696:	2101      	movs	r1, #1
     698:	f44f 3000 	mov.w	r0, #131072	; 0x20000
     69c:	f001 f84e 	bl	173c <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
     6a0:	2308      	movs	r3, #8
     6a2:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
     6a4:	2304      	movs	r3, #4
     6a6:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
     6a8:	1d3b      	adds	r3, r7, #4
     6aa:	4619      	mov	r1, r3
     6ac:	4814      	ldr	r0, [pc, #80]	; (700 <init_rs232+0x78>)
     6ae:	f001 f9bf 	bl	1a30 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
     6b2:	2304      	movs	r3, #4
     6b4:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     6b6:	2303      	movs	r3, #3
     6b8:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
     6ba:	2318      	movs	r3, #24
     6bc:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
     6be:	1d3b      	adds	r3, r7, #4
     6c0:	4619      	mov	r1, r3
     6c2:	480f      	ldr	r0, [pc, #60]	; (700 <init_rs232+0x78>)
     6c4:	f001 f9b4 	bl	1a30 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
     6c8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
     6cc:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
     6ce:	2300      	movs	r3, #0
     6d0:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
     6d2:	2300      	movs	r3, #0
     6d4:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
     6d6:	2300      	movs	r3, #0
     6d8:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
     6da:	2300      	movs	r3, #0
     6dc:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
     6de:	230c      	movs	r3, #12
     6e0:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
     6e2:	f107 0308 	add.w	r3, r7, #8
     6e6:	4619      	mov	r1, r3
     6e8:	4806      	ldr	r0, [pc, #24]	; (704 <init_rs232+0x7c>)
     6ea:	f001 fc6b 	bl	1fc4 <USART_Init>
    USART_Cmd(USART2, ENABLE);
     6ee:	2101      	movs	r1, #1
     6f0:	4804      	ldr	r0, [pc, #16]	; (704 <init_rs232+0x7c>)
     6f2:	f001 fd7d 	bl	21f0 <USART_Cmd>
}
     6f6:	bf00      	nop
     6f8:	3718      	adds	r7, #24
     6fa:	46bd      	mov	sp, r7
     6fc:	bd80      	pop	{r7, pc}
     6fe:	bf00      	nop
     700:	40010800 	.word	0x40010800
     704:	40004400 	.word	0x40004400

00000708 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
     708:	b580      	push	{r7, lr}
     70a:	b082      	sub	sp, #8
     70c:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
     70e:	2200      	movs	r2, #0
     710:	f240 7127 	movw	r1, #1831	; 0x727
     714:	480b      	ldr	r0, [pc, #44]	; (744 <enable_rs232_interrupts+0x3c>)
     716:	f001 fd8a 	bl	222e <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
     71a:	2201      	movs	r2, #1
     71c:	f240 5125 	movw	r1, #1317	; 0x525
     720:	4808      	ldr	r0, [pc, #32]	; (744 <enable_rs232_interrupts+0x3c>)
     722:	f001 fd84 	bl	222e <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
     726:	2326      	movs	r3, #38	; 0x26
     728:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
     72a:	2300      	movs	r3, #0
     72c:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
     72e:	2301      	movs	r3, #1
     730:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
     732:	1d3b      	adds	r3, r7, #4
     734:	4618      	mov	r0, r3
     736:	f005 f81d 	bl	5774 <NVIC_Init>
}
     73a:	bf00      	nop
     73c:	3708      	adds	r7, #8
     73e:	46bd      	mov	sp, r7
     740:	bd80      	pop	{r7, pc}
     742:	bf00      	nop
     744:	40004400 	.word	0x40004400

00000748 <enable_rs232>:

void enable_rs232(void)
{
     748:	b580      	push	{r7, lr}
     74a:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
     74c:	2101      	movs	r1, #1
     74e:	4802      	ldr	r0, [pc, #8]	; (758 <enable_rs232+0x10>)
     750:	f001 fd4e 	bl	21f0 <USART_Cmd>
}
     754:	bf00      	nop
     756:	bd80      	pop	{r7, pc}
     758:	40004400 	.word	0x40004400

0000075c <rs232_print_str>:

void rs232_print_str(const char *str)
{
     75c:	b580      	push	{r7, lr}
     75e:	b084      	sub	sp, #16
     760:	af00      	add	r7, sp, #0
     762:	6078      	str	r0, [r7, #4]
    const char *curr_char = str;
     764:	687b      	ldr	r3, [r7, #4]
     766:	60fb      	str	r3, [r7, #12]

    while(*curr_char != '\0') {
     768:	e011      	b.n	78e <rs232_print_str+0x32>
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
     76a:	bf00      	nop
     76c:	2180      	movs	r1, #128	; 0x80
     76e:	480c      	ldr	r0, [pc, #48]	; (7a0 <rs232_print_str+0x44>)
     770:	f001 ff98 	bl	26a4 <USART_GetFlagStatus>
     774:	4603      	mov	r3, r0
     776:	2b00      	cmp	r3, #0
     778:	d0f8      	beq.n	76c <rs232_print_str+0x10>
        USART_SendData(USART2, *curr_char);
     77a:	68fb      	ldr	r3, [r7, #12]
     77c:	781b      	ldrb	r3, [r3, #0]
     77e:	b29b      	uxth	r3, r3
     780:	4619      	mov	r1, r3
     782:	4807      	ldr	r0, [pc, #28]	; (7a0 <rs232_print_str+0x44>)
     784:	f001 fe4d 	bl	2422 <USART_SendData>
        curr_char++;
     788:	68fb      	ldr	r3, [r7, #12]
     78a:	3301      	adds	r3, #1
     78c:	60fb      	str	r3, [r7, #12]
    while(*curr_char != '\0') {
     78e:	68fb      	ldr	r3, [r7, #12]
     790:	781b      	ldrb	r3, [r3, #0]
     792:	2b00      	cmp	r3, #0
     794:	d1e9      	bne.n	76a <rs232_print_str+0xe>
    }
}
     796:	bf00      	nop
     798:	bf00      	nop
     79a:	3710      	adds	r7, #16
     79c:	46bd      	mov	sp, r7
     79e:	bd80      	pop	{r7, pc}
     7a0:	40004400 	.word	0x40004400

000007a4 <hex_to_char>:

/* Functions for sending numbers through the UART */
char hex_to_char(unsigned hex_number)
{
     7a4:	b480      	push	{r7}
     7a6:	b083      	sub	sp, #12
     7a8:	af00      	add	r7, sp, #0
     7aa:	6078      	str	r0, [r7, #4]
    if(hex_number < 0xA) {
     7ac:	687b      	ldr	r3, [r7, #4]
     7ae:	2b09      	cmp	r3, #9
     7b0:	d804      	bhi.n	7bc <hex_to_char+0x18>
        return hex_number + '0';
     7b2:	687b      	ldr	r3, [r7, #4]
     7b4:	b2db      	uxtb	r3, r3
     7b6:	3330      	adds	r3, #48	; 0x30
     7b8:	b2db      	uxtb	r3, r3
     7ba:	e003      	b.n	7c4 <hex_to_char+0x20>
    } else {
        return hex_number - 0xA + 'A';
     7bc:	687b      	ldr	r3, [r7, #4]
     7be:	b2db      	uxtb	r3, r3
     7c0:	3337      	adds	r3, #55	; 0x37
     7c2:	b2db      	uxtb	r3, r3
    }
}
     7c4:	4618      	mov	r0, r3
     7c6:	370c      	adds	r7, #12
     7c8:	46bd      	mov	sp, r7
     7ca:	bc80      	pop	{r7}
     7cc:	4770      	bx	lr

000007ce <send_byte>:

void send_byte(uint8_t b)
{
     7ce:	b580      	push	{r7, lr}
     7d0:	b082      	sub	sp, #8
     7d2:	af00      	add	r7, sp, #0
     7d4:	4603      	mov	r3, r0
     7d6:	71fb      	strb	r3, [r7, #7]
    /* Wait until the RS232 port can receive another byte. */
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
     7d8:	bf00      	nop
     7da:	2180      	movs	r1, #128	; 0x80
     7dc:	480a      	ldr	r0, [pc, #40]	; (808 <send_byte+0x3a>)
     7de:	f001 ff61 	bl	26a4 <USART_GetFlagStatus>
     7e2:	4603      	mov	r3, r0
     7e4:	2b00      	cmp	r3, #0
     7e6:	d0f8      	beq.n	7da <send_byte+0xc>

    /* Toggle the LED just to show that progress is being made. */
    GPIOC->ODR ^= 0x00001000;
     7e8:	4b08      	ldr	r3, [pc, #32]	; (80c <send_byte+0x3e>)
     7ea:	68db      	ldr	r3, [r3, #12]
     7ec:	4a07      	ldr	r2, [pc, #28]	; (80c <send_byte+0x3e>)
     7ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
     7f2:	60d3      	str	r3, [r2, #12]

    /* Send the byte */
    USART_SendData(USART2, b);
     7f4:	79fb      	ldrb	r3, [r7, #7]
     7f6:	b29b      	uxth	r3, r3
     7f8:	4619      	mov	r1, r3
     7fa:	4803      	ldr	r0, [pc, #12]	; (808 <send_byte+0x3a>)
     7fc:	f001 fe11 	bl	2422 <USART_SendData>
}
     800:	bf00      	nop
     802:	3708      	adds	r7, #8
     804:	46bd      	mov	sp, r7
     806:	bd80      	pop	{r7, pc}
     808:	40004400 	.word	0x40004400
     80c:	40011000 	.word	0x40011000

00000810 <send_number>:

void send_number(unsigned long sample, int radix)
{
     810:	b580      	push	{r7, lr}
     812:	b09e      	sub	sp, #120	; 0x78
     814:	af00      	add	r7, sp, #0
     816:	6078      	str	r0, [r7, #4]
     818:	6039      	str	r1, [r7, #0]
    int digit;
    unsigned long  mod;
    char str[100];

    digit = 0;
     81a:	2300      	movs	r3, #0
     81c:	677b      	str	r3, [r7, #116]	; 0x74
    do {
        mod = sample % radix;
     81e:	683a      	ldr	r2, [r7, #0]
     820:	687b      	ldr	r3, [r7, #4]
     822:	fbb3 f1f2 	udiv	r1, r3, r2
     826:	fb01 f202 	mul.w	r2, r1, r2
     82a:	1a9b      	subs	r3, r3, r2
     82c:	673b      	str	r3, [r7, #112]	; 0x70
        str[digit] = hex_to_char(mod);
     82e:	6f38      	ldr	r0, [r7, #112]	; 0x70
     830:	f7ff ffb8 	bl	7a4 <hex_to_char>
     834:	4603      	mov	r3, r0
     836:	4619      	mov	r1, r3
     838:	f107 020c 	add.w	r2, r7, #12
     83c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     83e:	4413      	add	r3, r2
     840:	460a      	mov	r2, r1
     842:	701a      	strb	r2, [r3, #0]
        sample /= radix;
     844:	683b      	ldr	r3, [r7, #0]
     846:	687a      	ldr	r2, [r7, #4]
     848:	fbb2 f3f3 	udiv	r3, r2, r3
     84c:	607b      	str	r3, [r7, #4]
        digit++;
     84e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     850:	3301      	adds	r3, #1
     852:	677b      	str	r3, [r7, #116]	; 0x74
    } while(sample != 0);
     854:	687b      	ldr	r3, [r7, #4]
     856:	2b00      	cmp	r3, #0
     858:	d1e1      	bne.n	81e <send_number+0xe>

    while(digit != 0) {
     85a:	e014      	b.n	886 <send_number+0x76>
        digit--;
     85c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     85e:	3b01      	subs	r3, #1
     860:	677b      	str	r3, [r7, #116]	; 0x74
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
     862:	bf00      	nop
     864:	2180      	movs	r1, #128	; 0x80
     866:	480c      	ldr	r0, [pc, #48]	; (898 <send_number+0x88>)
     868:	f001 ff1c 	bl	26a4 <USART_GetFlagStatus>
     86c:	4603      	mov	r3, r0
     86e:	2b00      	cmp	r3, #0
     870:	d0f8      	beq.n	864 <send_number+0x54>
        USART_SendData(USART2, str[digit]);
     872:	f107 020c 	add.w	r2, r7, #12
     876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     878:	4413      	add	r3, r2
     87a:	781b      	ldrb	r3, [r3, #0]
     87c:	b29b      	uxth	r3, r3
     87e:	4619      	mov	r1, r3
     880:	4805      	ldr	r0, [pc, #20]	; (898 <send_number+0x88>)
     882:	f001 fdce 	bl	2422 <USART_SendData>
    while(digit != 0) {
     886:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     888:	2b00      	cmp	r3, #0
     88a:	d1e7      	bne.n	85c <send_number+0x4c>
    }
}
     88c:	bf00      	nop
     88e:	bf00      	nop
     890:	3778      	adds	r7, #120	; 0x78
     892:	46bd      	mov	sp, r7
     894:	bd80      	pop	{r7, pc}
     896:	bf00      	nop
     898:	40004400 	.word	0x40004400

0000089c <myprintf_init>:
#define LARGE  	64		/* use 'ABCDEF' instead of 'abcdef' */
#define SMALL  	64		/* use 'abcdef' instead of 'ABCDEF' */
#define PBSIZE 128 /* Print Buffer Size  */

void myprintf_init()
{
     89c:	b580      	push	{r7, lr}
     89e:	af00      	add	r7, sp, #0
    init_rs232();
     8a0:	f7ff fef2 	bl	688 <init_rs232>
    enable_rs232_interrupts();
     8a4:	f7ff ff30 	bl	708 <enable_rs232_interrupts>
    enable_rs232();
     8a8:	f7ff ff4e 	bl	748 <enable_rs232>
}
     8ac:	bf00      	nop
     8ae:	bd80      	pop	{r7, pc}

000008b0 <usart_send_bytes>:

void usart_send_bytes(uint8_t data)
{
     8b0:	b580      	push	{r7, lr}
     8b2:	b082      	sub	sp, #8
     8b4:	af00      	add	r7, sp, #0
     8b6:	4603      	mov	r3, r0
     8b8:	71fb      	strb	r3, [r7, #7]
    while(!USART_GetFlagStatus(USART2 ,USART_FLAG_TXE)) {
     8ba:	bf00      	nop
     8bc:	2180      	movs	r1, #128	; 0x80
     8be:	4808      	ldr	r0, [pc, #32]	; (8e0 <usart_send_bytes+0x30>)
     8c0:	f001 fef0 	bl	26a4 <USART_GetFlagStatus>
     8c4:	4603      	mov	r3, r0
     8c6:	2b00      	cmp	r3, #0
     8c8:	d0f8      	beq.n	8bc <usart_send_bytes+0xc>
    }
    USART_SendData( USART2, data);
     8ca:	79fb      	ldrb	r3, [r7, #7]
     8cc:	b29b      	uxth	r3, r3
     8ce:	4619      	mov	r1, r3
     8d0:	4803      	ldr	r0, [pc, #12]	; (8e0 <usart_send_bytes+0x30>)
     8d2:	f001 fda6 	bl	2422 <USART_SendData>
}
     8d6:	bf00      	nop
     8d8:	3708      	adds	r7, #8
     8da:	46bd      	mov	sp, r7
     8dc:	bd80      	pop	{r7, pc}
     8de:	bf00      	nop
     8e0:	40004400 	.word	0x40004400

000008e4 <mystrnlen>:


signed int mystrnlen (const char * s, signed int count)
{
     8e4:	b480      	push	{r7}
     8e6:	b085      	sub	sp, #20
     8e8:	af00      	add	r7, sp, #0
     8ea:	6078      	str	r0, [r7, #4]
     8ec:	6039      	str	r1, [r7, #0]
    const char *sc;

    for (sc = s; count-- && *sc != '\0'; ++sc) {
     8ee:	687b      	ldr	r3, [r7, #4]
     8f0:	60fb      	str	r3, [r7, #12]
     8f2:	e002      	b.n	8fa <mystrnlen+0x16>
     8f4:	68fb      	ldr	r3, [r7, #12]
     8f6:	3301      	adds	r3, #1
     8f8:	60fb      	str	r3, [r7, #12]
     8fa:	683b      	ldr	r3, [r7, #0]
     8fc:	1e5a      	subs	r2, r3, #1
     8fe:	603a      	str	r2, [r7, #0]
     900:	2b00      	cmp	r3, #0
     902:	d003      	beq.n	90c <mystrnlen+0x28>
     904:	68fb      	ldr	r3, [r7, #12]
     906:	781b      	ldrb	r3, [r3, #0]
     908:	2b00      	cmp	r3, #0
     90a:	d1f3      	bne.n	8f4 <mystrnlen+0x10>
        /* nothing */
    }
    return sc - s;
     90c:	68fa      	ldr	r2, [r7, #12]
     90e:	687b      	ldr	r3, [r7, #4]
     910:	1ad3      	subs	r3, r2, r3
}
     912:	4618      	mov	r0, r3
     914:	3714      	adds	r7, #20
     916:	46bd      	mov	sp, r7
     918:	bc80      	pop	{r7}
     91a:	4770      	bx	lr

0000091c <myskip_atoi>:

static int myskip_atoi (const char **s)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
    int i = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]

    while (isdigit(**s) != 0) {
     928:	e00e      	b.n	948 <myskip_atoi+0x2c>
        i = i * 10 + *((*s)++) - '0';
     92a:	68fa      	ldr	r2, [r7, #12]
     92c:	4613      	mov	r3, r2
     92e:	009b      	lsls	r3, r3, #2
     930:	4413      	add	r3, r2
     932:	005b      	lsls	r3, r3, #1
     934:	4618      	mov	r0, r3
     936:	687b      	ldr	r3, [r7, #4]
     938:	681b      	ldr	r3, [r3, #0]
     93a:	1c59      	adds	r1, r3, #1
     93c:	687a      	ldr	r2, [r7, #4]
     93e:	6011      	str	r1, [r2, #0]
     940:	781b      	ldrb	r3, [r3, #0]
     942:	4403      	add	r3, r0
     944:	3b30      	subs	r3, #48	; 0x30
     946:	60fb      	str	r3, [r7, #12]
    while (isdigit(**s) != 0) {
     948:	687b      	ldr	r3, [r7, #4]
     94a:	681b      	ldr	r3, [r3, #0]
     94c:	781b      	ldrb	r3, [r3, #0]
     94e:	3301      	adds	r3, #1
     950:	4a06      	ldr	r2, [pc, #24]	; (96c <myskip_atoi+0x50>)
     952:	4413      	add	r3, r2
     954:	781b      	ldrb	r3, [r3, #0]
     956:	f003 0304 	and.w	r3, r3, #4
     95a:	2b00      	cmp	r3, #0
     95c:	d1e5      	bne.n	92a <myskip_atoi+0xe>
    }
    return i;
     95e:	68fb      	ldr	r3, [r7, #12]
}
     960:	4618      	mov	r0, r3
     962:	3714      	adds	r7, #20
     964:	46bd      	mov	sp, r7
     966:	bc80      	pop	{r7}
     968:	4770      	bx	lr
     96a:	bf00      	nop
     96c:	00005a70 	.word	0x00005a70

00000970 <mynumber>:

static char * mynumber (char * str, long num, int base, int size, int precision ,int type)
{
     970:	b580      	push	{r7, lr}
     972:	b09a      	sub	sp, #104	; 0x68
     974:	af00      	add	r7, sp, #0
     976:	60f8      	str	r0, [r7, #12]
     978:	60b9      	str	r1, [r7, #8]
     97a:	607a      	str	r2, [r7, #4]
     97c:	603b      	str	r3, [r7, #0]
    char c = 0;
     97e:	2300      	movs	r3, #0
     980:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    char sign = 0;
     984:	2300      	movs	r3, #0
     986:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    char tmp[66] = {0};
     98a:	2300      	movs	r3, #0
     98c:	613b      	str	r3, [r7, #16]
     98e:	f107 0314 	add.w	r3, r7, #20
     992:	223e      	movs	r2, #62	; 0x3e
     994:	2100      	movs	r1, #0
     996:	4618      	mov	r0, r3
     998:	f004 ffec 	bl	5974 <memset>
    int  i = 0;
     99c:	2300      	movs	r3, #0
     99e:	663b      	str	r3, [r7, #96]	; 0x60
    const char *digits = "0123456789abcdefghijklmnopqrstuvwxyz";
     9a0:	4b84      	ldr	r3, [pc, #528]	; (bb4 <mynumber+0x244>)
     9a2:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((type & LARGE) != 0) {
     9a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     9a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
     9aa:	2b00      	cmp	r3, #0
     9ac:	d001      	beq.n	9b2 <mynumber+0x42>
        digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
     9ae:	4b82      	ldr	r3, [pc, #520]	; (bb8 <mynumber+0x248>)
     9b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    }
    if ((type & LEFT) != 0) {
     9b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     9b4:	f003 0310 	and.w	r3, r3, #16
     9b8:	2b00      	cmp	r3, #0
     9ba:	d003      	beq.n	9c4 <mynumber+0x54>
        type &= ~ZEROPAD;
     9bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     9be:	f023 0301 	bic.w	r3, r3, #1
     9c2:	677b      	str	r3, [r7, #116]	; 0x74
    }
    if ((base < 2) || (base > 36)) {
     9c4:	687b      	ldr	r3, [r7, #4]
     9c6:	2b01      	cmp	r3, #1
     9c8:	dd02      	ble.n	9d0 <mynumber+0x60>
     9ca:	687b      	ldr	r3, [r7, #4]
     9cc:	2b24      	cmp	r3, #36	; 0x24
     9ce:	dd01      	ble.n	9d4 <mynumber+0x64>
        return 0;
     9d0:	2300      	movs	r3, #0
     9d2:	e0ea      	b.n	baa <mynumber+0x23a>
    }

    c = (type & ZEROPAD) ? '0' : ' ';
     9d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     9d6:	f003 0301 	and.w	r3, r3, #1
     9da:	2b00      	cmp	r3, #0
     9dc:	d001      	beq.n	9e2 <mynumber+0x72>
     9de:	2330      	movs	r3, #48	; 0x30
     9e0:	e000      	b.n	9e4 <mynumber+0x74>
     9e2:	2320      	movs	r3, #32
     9e4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    sign = 0;
     9e8:	2300      	movs	r3, #0
     9ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    if ((type & SIGN) != 0) {
     9ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     9f0:	f003 0302 	and.w	r3, r3, #2
     9f4:	2b00      	cmp	r3, #0
     9f6:	d023      	beq.n	a40 <mynumber+0xd0>
        if (num < 0) {
     9f8:	68bb      	ldr	r3, [r7, #8]
     9fa:	2b00      	cmp	r3, #0
     9fc:	da09      	bge.n	a12 <mynumber+0xa2>
            sign = '-';
     9fe:	232d      	movs	r3, #45	; 0x2d
     a00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            num = -num;
     a04:	68bb      	ldr	r3, [r7, #8]
     a06:	425b      	negs	r3, r3
     a08:	60bb      	str	r3, [r7, #8]
            size--;
     a0a:	683b      	ldr	r3, [r7, #0]
     a0c:	3b01      	subs	r3, #1
     a0e:	603b      	str	r3, [r7, #0]
     a10:	e016      	b.n	a40 <mynumber+0xd0>
        } else if ((type & PLUS) != 0) {
     a12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     a14:	f003 0304 	and.w	r3, r3, #4
     a18:	2b00      	cmp	r3, #0
     a1a:	d006      	beq.n	a2a <mynumber+0xba>
            sign = '+';
     a1c:	232b      	movs	r3, #43	; 0x2b
     a1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            size--;
     a22:	683b      	ldr	r3, [r7, #0]
     a24:	3b01      	subs	r3, #1
     a26:	603b      	str	r3, [r7, #0]
     a28:	e00a      	b.n	a40 <mynumber+0xd0>
        } else if ((type & SPACE) != 0) {
     a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     a2c:	f003 0308 	and.w	r3, r3, #8
     a30:	2b00      	cmp	r3, #0
     a32:	d005      	beq.n	a40 <mynumber+0xd0>
            sign = ' ';
     a34:	2320      	movs	r3, #32
     a36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            size--;
     a3a:	683b      	ldr	r3, [r7, #0]
     a3c:	3b01      	subs	r3, #1
     a3e:	603b      	str	r3, [r7, #0]
        }
    }
    if ((type & SPECIAL) != 0) {
     a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     a42:	f003 0320 	and.w	r3, r3, #32
     a46:	2b00      	cmp	r3, #0
     a48:	d00c      	beq.n	a64 <mynumber+0xf4>
        if (16 == base) {
     a4a:	687b      	ldr	r3, [r7, #4]
     a4c:	2b10      	cmp	r3, #16
     a4e:	d103      	bne.n	a58 <mynumber+0xe8>
            size -= 2;
     a50:	683b      	ldr	r3, [r7, #0]
     a52:	3b02      	subs	r3, #2
     a54:	603b      	str	r3, [r7, #0]
     a56:	e005      	b.n	a64 <mynumber+0xf4>
        } else if (8 == base) {
     a58:	687b      	ldr	r3, [r7, #4]
     a5a:	2b08      	cmp	r3, #8
     a5c:	d102      	bne.n	a64 <mynumber+0xf4>
            size--;
     a5e:	683b      	ldr	r3, [r7, #0]
     a60:	3b01      	subs	r3, #1
     a62:	603b      	str	r3, [r7, #0]
        }
    }
    i = 0;
     a64:	2300      	movs	r3, #0
     a66:	663b      	str	r3, [r7, #96]	; 0x60
    if (0 == num) {
     a68:	68bb      	ldr	r3, [r7, #8]
     a6a:	2b00      	cmp	r3, #0
     a6c:	d121      	bne.n	ab2 <mynumber+0x142>
        tmp[i++] = '0';
     a6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     a70:	1c5a      	adds	r2, r3, #1
     a72:	663a      	str	r2, [r7, #96]	; 0x60
     a74:	3368      	adds	r3, #104	; 0x68
     a76:	443b      	add	r3, r7
     a78:	2230      	movs	r2, #48	; 0x30
     a7a:	f803 2c58 	strb.w	r2, [r3, #-88]
     a7e:	e01b      	b.n	ab8 <mynumber+0x148>
    } else {
        while (num != 0) {
            tmp[i++] = digits[mydo_div(num,base)];
     a80:	68bb      	ldr	r3, [r7, #8]
     a82:	687a      	ldr	r2, [r7, #4]
     a84:	fbb3 f1f2 	udiv	r1, r3, r2
     a88:	fb01 f202 	mul.w	r2, r1, r2
     a8c:	1a9b      	subs	r3, r3, r2
     a8e:	657b      	str	r3, [r7, #84]	; 0x54
     a90:	68ba      	ldr	r2, [r7, #8]
     a92:	687b      	ldr	r3, [r7, #4]
     a94:	fbb2 f3f3 	udiv	r3, r2, r3
     a98:	60bb      	str	r3, [r7, #8]
     a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     a9c:	461a      	mov	r2, r3
     a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     aa0:	441a      	add	r2, r3
     aa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     aa4:	1c59      	adds	r1, r3, #1
     aa6:	6639      	str	r1, [r7, #96]	; 0x60
     aa8:	7812      	ldrb	r2, [r2, #0]
     aaa:	3368      	adds	r3, #104	; 0x68
     aac:	443b      	add	r3, r7
     aae:	f803 2c58 	strb.w	r2, [r3, #-88]
        while (num != 0) {
     ab2:	68bb      	ldr	r3, [r7, #8]
     ab4:	2b00      	cmp	r3, #0
     ab6:	d1e3      	bne.n	a80 <mynumber+0x110>
        }
    }
    if (i > precision) {
     ab8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
     aba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
     abc:	429a      	cmp	r2, r3
     abe:	dd01      	ble.n	ac4 <mynumber+0x154>
        precision = i;
     ac0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     ac2:	673b      	str	r3, [r7, #112]	; 0x70
    }
    size -= precision;
     ac4:	683a      	ldr	r2, [r7, #0]
     ac6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
     ac8:	1ad3      	subs	r3, r2, r3
     aca:	603b      	str	r3, [r7, #0]
    if (0 == (type & (ZEROPAD + LEFT))) {
     acc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     ace:	f003 0311 	and.w	r3, r3, #17
     ad2:	2b00      	cmp	r3, #0
     ad4:	d10a      	bne.n	aec <mynumber+0x17c>
        while (size-- > 0) {
     ad6:	e004      	b.n	ae2 <mynumber+0x172>
            *str++ = ' ';
     ad8:	68fb      	ldr	r3, [r7, #12]
     ada:	1c5a      	adds	r2, r3, #1
     adc:	60fa      	str	r2, [r7, #12]
     ade:	2220      	movs	r2, #32
     ae0:	701a      	strb	r2, [r3, #0]
        while (size-- > 0) {
     ae2:	683b      	ldr	r3, [r7, #0]
     ae4:	1e5a      	subs	r2, r3, #1
     ae6:	603a      	str	r2, [r7, #0]
     ae8:	2b00      	cmp	r3, #0
     aea:	dcf5      	bgt.n	ad8 <mynumber+0x168>
        }
    }
    if (sign != 0) {
     aec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
     af0:	2b00      	cmp	r3, #0
     af2:	d005      	beq.n	b00 <mynumber+0x190>
        *str++ = sign;
     af4:	68fb      	ldr	r3, [r7, #12]
     af6:	1c5a      	adds	r2, r3, #1
     af8:	60fa      	str	r2, [r7, #12]
     afa:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
     afe:	701a      	strb	r2, [r3, #0]
    }
    if ((type & SPECIAL) != 0) {
     b00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     b02:	f003 0320 	and.w	r3, r3, #32
     b06:	2b00      	cmp	r3, #0
     b08:	d017      	beq.n	b3a <mynumber+0x1ca>
        if (8 == base) {
     b0a:	687b      	ldr	r3, [r7, #4]
     b0c:	2b08      	cmp	r3, #8
     b0e:	d105      	bne.n	b1c <mynumber+0x1ac>
            *str++ = '0';
     b10:	68fb      	ldr	r3, [r7, #12]
     b12:	1c5a      	adds	r2, r3, #1
     b14:	60fa      	str	r2, [r7, #12]
     b16:	2230      	movs	r2, #48	; 0x30
     b18:	701a      	strb	r2, [r3, #0]
     b1a:	e00e      	b.n	b3a <mynumber+0x1ca>
        } else if (16 == base) {
     b1c:	687b      	ldr	r3, [r7, #4]
     b1e:	2b10      	cmp	r3, #16
     b20:	d10b      	bne.n	b3a <mynumber+0x1ca>
            *str++ = '0';
     b22:	68fb      	ldr	r3, [r7, #12]
     b24:	1c5a      	adds	r2, r3, #1
     b26:	60fa      	str	r2, [r7, #12]
     b28:	2230      	movs	r2, #48	; 0x30
     b2a:	701a      	strb	r2, [r3, #0]
            *str++ = digits[33];
     b2c:	68fb      	ldr	r3, [r7, #12]
     b2e:	1c5a      	adds	r2, r3, #1
     b30:	60fa      	str	r2, [r7, #12]
     b32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
     b34:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
     b38:	701a      	strb	r2, [r3, #0]
        }
    }
    if (0 == (type & LEFT)) {
     b3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     b3c:	f003 0310 	and.w	r3, r3, #16
     b40:	2b00      	cmp	r3, #0
     b42:	d111      	bne.n	b68 <mynumber+0x1f8>
        while (size-- > 0) {
     b44:	e005      	b.n	b52 <mynumber+0x1e2>
            *str++ = c;
     b46:	68fb      	ldr	r3, [r7, #12]
     b48:	1c5a      	adds	r2, r3, #1
     b4a:	60fa      	str	r2, [r7, #12]
     b4c:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
     b50:	701a      	strb	r2, [r3, #0]
        while (size-- > 0) {
     b52:	683b      	ldr	r3, [r7, #0]
     b54:	1e5a      	subs	r2, r3, #1
     b56:	603a      	str	r2, [r7, #0]
     b58:	2b00      	cmp	r3, #0
     b5a:	dcf4      	bgt.n	b46 <mynumber+0x1d6>
        }
    }
    while (i < precision--) {
     b5c:	e004      	b.n	b68 <mynumber+0x1f8>
        *str++ = '0';
     b5e:	68fb      	ldr	r3, [r7, #12]
     b60:	1c5a      	adds	r2, r3, #1
     b62:	60fa      	str	r2, [r7, #12]
     b64:	2230      	movs	r2, #48	; 0x30
     b66:	701a      	strb	r2, [r3, #0]
    while (i < precision--) {
     b68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
     b6a:	1e5a      	subs	r2, r3, #1
     b6c:	673a      	str	r2, [r7, #112]	; 0x70
     b6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
     b70:	429a      	cmp	r2, r3
     b72:	dbf4      	blt.n	b5e <mynumber+0x1ee>
    }
    while (i-- > 0) {
     b74:	e008      	b.n	b88 <mynumber+0x218>
        *str++ = tmp[i];
     b76:	68fb      	ldr	r3, [r7, #12]
     b78:	1c5a      	adds	r2, r3, #1
     b7a:	60fa      	str	r2, [r7, #12]
     b7c:	f107 0110 	add.w	r1, r7, #16
     b80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
     b82:	440a      	add	r2, r1
     b84:	7812      	ldrb	r2, [r2, #0]
     b86:	701a      	strb	r2, [r3, #0]
    while (i-- > 0) {
     b88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     b8a:	1e5a      	subs	r2, r3, #1
     b8c:	663a      	str	r2, [r7, #96]	; 0x60
     b8e:	2b00      	cmp	r3, #0
     b90:	dcf1      	bgt.n	b76 <mynumber+0x206>
    }
    while (size-- > 0) {
     b92:	e004      	b.n	b9e <mynumber+0x22e>
        *str++ = ' ';
     b94:	68fb      	ldr	r3, [r7, #12]
     b96:	1c5a      	adds	r2, r3, #1
     b98:	60fa      	str	r2, [r7, #12]
     b9a:	2220      	movs	r2, #32
     b9c:	701a      	strb	r2, [r3, #0]
    while (size-- > 0) {
     b9e:	683b      	ldr	r3, [r7, #0]
     ba0:	1e5a      	subs	r2, r3, #1
     ba2:	603a      	str	r2, [r7, #0]
     ba4:	2b00      	cmp	r3, #0
     ba6:	dcf5      	bgt.n	b94 <mynumber+0x224>
    }

    return str;
     ba8:	68fb      	ldr	r3, [r7, #12]
}
     baa:	4618      	mov	r0, r3
     bac:	3768      	adds	r7, #104	; 0x68
     bae:	46bd      	mov	sp, r7
     bb0:	bd80      	pop	{r7, pc}
     bb2:	bf00      	nop
     bb4:	00005a18 	.word	0x00005a18
     bb8:	00005a40 	.word	0x00005a40

00000bbc <myvsprintf>:
 *
 * If you're not already dealing with a va_list consider using sprintf().
 */

int myvsprintf (char *buf, const char *fmt, va_list args)
{
     bbc:	b580      	push	{r7, lr}
     bbe:	b092      	sub	sp, #72	; 0x48
     bc0:	af02      	add	r7, sp, #8
     bc2:	60f8      	str	r0, [r7, #12]
     bc4:	60b9      	str	r1, [r7, #8]
     bc6:	607a      	str	r2, [r7, #4]
    int qualifier;		//'h', 'l', or 'q' for integer fields
    char * str;
    const char *s;
    unsigned long num;

    for (str = buf; *fmt; ++fmt) {
     bc8:	68fb      	ldr	r3, [r7, #12]
     bca:	627b      	str	r3, [r7, #36]	; 0x24
     bcc:	e272      	b.n	10b4 <myvsprintf+0x4f8>
        if (*fmt != '%') {
     bce:	68bb      	ldr	r3, [r7, #8]
     bd0:	781b      	ldrb	r3, [r3, #0]
     bd2:	2b25      	cmp	r3, #37	; 0x25
     bd4:	d006      	beq.n	be4 <myvsprintf+0x28>
            *str++ = *fmt;
     bd6:	68ba      	ldr	r2, [r7, #8]
     bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     bda:	1c59      	adds	r1, r3, #1
     bdc:	6279      	str	r1, [r7, #36]	; 0x24
     bde:	7812      	ldrb	r2, [r2, #0]
     be0:	701a      	strb	r2, [r3, #0]
            continue;
     be2:	e264      	b.n	10ae <myvsprintf+0x4f2>
        }

        flags = 0;     //process flags
     be4:	2300      	movs	r3, #0
     be6:	63bb      	str	r3, [r7, #56]	; 0x38

repeat:
        ++fmt;		   //this also skips first '%'
     be8:	68bb      	ldr	r3, [r7, #8]
     bea:	3301      	adds	r3, #1
     bec:	60bb      	str	r3, [r7, #8]
        switch (*fmt) {
     bee:	68bb      	ldr	r3, [r7, #8]
     bf0:	781b      	ldrb	r3, [r3, #0]
     bf2:	3b20      	subs	r3, #32
     bf4:	2b10      	cmp	r3, #16
     bf6:	d83e      	bhi.n	c76 <myvsprintf+0xba>
     bf8:	a201      	add	r2, pc, #4	; (adr r2, c00 <myvsprintf+0x44>)
     bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     bfe:	bf00      	nop
     c00:	00000c59 	.word	0x00000c59
     c04:	00000c77 	.word	0x00000c77
     c08:	00000c77 	.word	0x00000c77
     c0c:	00000c63 	.word	0x00000c63
     c10:	00000c77 	.word	0x00000c77
     c14:	00000c77 	.word	0x00000c77
     c18:	00000c77 	.word	0x00000c77
     c1c:	00000c77 	.word	0x00000c77
     c20:	00000c77 	.word	0x00000c77
     c24:	00000c77 	.word	0x00000c77
     c28:	00000c77 	.word	0x00000c77
     c2c:	00000c4f 	.word	0x00000c4f
     c30:	00000c77 	.word	0x00000c77
     c34:	00000c45 	.word	0x00000c45
     c38:	00000c77 	.word	0x00000c77
     c3c:	00000c77 	.word	0x00000c77
     c40:	00000c6d 	.word	0x00000c6d
        case '-':
            flags |= LEFT;
     c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     c46:	f043 0310 	orr.w	r3, r3, #16
     c4a:	63bb      	str	r3, [r7, #56]	; 0x38
            goto repeat;
     c4c:	e7cc      	b.n	be8 <myvsprintf+0x2c>
        case '+':
            flags |= PLUS;
     c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     c50:	f043 0304 	orr.w	r3, r3, #4
     c54:	63bb      	str	r3, [r7, #56]	; 0x38
            goto repeat;
     c56:	e7c7      	b.n	be8 <myvsprintf+0x2c>
        case ' ':
            flags |= SPACE;
     c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     c5a:	f043 0308 	orr.w	r3, r3, #8
     c5e:	63bb      	str	r3, [r7, #56]	; 0x38
            goto repeat;
     c60:	e7c2      	b.n	be8 <myvsprintf+0x2c>
        case '#':
            flags |= SPECIAL;
     c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     c64:	f043 0320 	orr.w	r3, r3, #32
     c68:	63bb      	str	r3, [r7, #56]	; 0x38
            goto repeat;
     c6a:	e7bd      	b.n	be8 <myvsprintf+0x2c>
        case '0':
            flags |= ZEROPAD;
     c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     c6e:	f043 0301 	orr.w	r3, r3, #1
     c72:	63bb      	str	r3, [r7, #56]	; 0x38
            goto repeat;
     c74:	e7b8      	b.n	be8 <myvsprintf+0x2c>
        }

        field_width = -1;  //get field width
     c76:	f04f 33ff 	mov.w	r3, #4294967295
     c7a:	633b      	str	r3, [r7, #48]	; 0x30
        if (isdigit(*fmt) != 0) {
     c7c:	68bb      	ldr	r3, [r7, #8]
     c7e:	781b      	ldrb	r3, [r3, #0]
     c80:	3301      	adds	r3, #1
     c82:	4ab1      	ldr	r2, [pc, #708]	; (f48 <myvsprintf+0x38c>)
     c84:	4413      	add	r3, r2
     c86:	781b      	ldrb	r3, [r3, #0]
     c88:	f003 0304 	and.w	r3, r3, #4
     c8c:	2b00      	cmp	r3, #0
     c8e:	d006      	beq.n	c9e <myvsprintf+0xe2>

            field_width = myskip_atoi(&fmt);
     c90:	f107 0308 	add.w	r3, r7, #8
     c94:	4618      	mov	r0, r3
     c96:	f7ff fe41 	bl	91c <myskip_atoi>
     c9a:	6338      	str	r0, [r7, #48]	; 0x30
     c9c:	e015      	b.n	cca <myvsprintf+0x10e>
        } else if ('*' == *fmt) {
     c9e:	68bb      	ldr	r3, [r7, #8]
     ca0:	781b      	ldrb	r3, [r3, #0]
     ca2:	2b2a      	cmp	r3, #42	; 0x2a
     ca4:	d111      	bne.n	cca <myvsprintf+0x10e>
            ++fmt;
     ca6:	68bb      	ldr	r3, [r7, #8]
     ca8:	3301      	adds	r3, #1
     caa:	60bb      	str	r3, [r7, #8]
            field_width = va_arg(args, int); //it's the next argument
     cac:	687b      	ldr	r3, [r7, #4]
     cae:	1d1a      	adds	r2, r3, #4
     cb0:	607a      	str	r2, [r7, #4]
     cb2:	681b      	ldr	r3, [r3, #0]
     cb4:	633b      	str	r3, [r7, #48]	; 0x30
            if (field_width < 0) {
     cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     cb8:	2b00      	cmp	r3, #0
     cba:	da06      	bge.n	cca <myvsprintf+0x10e>
                field_width = -field_width;
     cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     cbe:	425b      	negs	r3, r3
     cc0:	633b      	str	r3, [r7, #48]	; 0x30
                flags |= LEFT;
     cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     cc4:	f043 0310 	orr.w	r3, r3, #16
     cc8:	63bb      	str	r3, [r7, #56]	; 0x38
            }
        }

        precision = -1;      //get the precision
     cca:	f04f 33ff 	mov.w	r3, #4294967295
     cce:	62fb      	str	r3, [r7, #44]	; 0x2c
        if ('.' == *fmt) {
     cd0:	68bb      	ldr	r3, [r7, #8]
     cd2:	781b      	ldrb	r3, [r3, #0]
     cd4:	2b2e      	cmp	r3, #46	; 0x2e
     cd6:	d124      	bne.n	d22 <myvsprintf+0x166>
            ++fmt;
     cd8:	68bb      	ldr	r3, [r7, #8]
     cda:	3301      	adds	r3, #1
     cdc:	60bb      	str	r3, [r7, #8]
            if (isdigit(*fmt)) {
     cde:	68bb      	ldr	r3, [r7, #8]
     ce0:	781b      	ldrb	r3, [r3, #0]
     ce2:	3301      	adds	r3, #1
     ce4:	4a98      	ldr	r2, [pc, #608]	; (f48 <myvsprintf+0x38c>)
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	f003 0304 	and.w	r3, r3, #4
     cee:	2b00      	cmp	r3, #0
     cf0:	d006      	beq.n	d00 <myvsprintf+0x144>
                precision = myskip_atoi(&fmt);
     cf2:	f107 0308 	add.w	r3, r7, #8
     cf6:	4618      	mov	r0, r3
     cf8:	f7ff fe10 	bl	91c <myskip_atoi>
     cfc:	62f8      	str	r0, [r7, #44]	; 0x2c
     cfe:	e00b      	b.n	d18 <myvsprintf+0x15c>
            } else if ('*' == *fmt) {
     d00:	68bb      	ldr	r3, [r7, #8]
     d02:	781b      	ldrb	r3, [r3, #0]
     d04:	2b2a      	cmp	r3, #42	; 0x2a
     d06:	d107      	bne.n	d18 <myvsprintf+0x15c>
                ++fmt;
     d08:	68bb      	ldr	r3, [r7, #8]
     d0a:	3301      	adds	r3, #1
     d0c:	60bb      	str	r3, [r7, #8]
                precision = va_arg(args, int); //it's the next argument
     d0e:	687b      	ldr	r3, [r7, #4]
     d10:	1d1a      	adds	r2, r3, #4
     d12:	607a      	str	r2, [r7, #4]
     d14:	681b      	ldr	r3, [r3, #0]
     d16:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            if (precision < 0) {
     d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d1a:	2b00      	cmp	r3, #0
     d1c:	da01      	bge.n	d22 <myvsprintf+0x166>
                precision = 0;
     d1e:	2300      	movs	r3, #0
     d20:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }

        qualifier = -1;         //get the conversion qualifier
     d22:	f04f 33ff 	mov.w	r3, #4294967295
     d26:	62bb      	str	r3, [r7, #40]	; 0x28
        if (('h' == *fmt) || ('l' == *fmt) || ('q' == *fmt)) {
     d28:	68bb      	ldr	r3, [r7, #8]
     d2a:	781b      	ldrb	r3, [r3, #0]
     d2c:	2b68      	cmp	r3, #104	; 0x68
     d2e:	d007      	beq.n	d40 <myvsprintf+0x184>
     d30:	68bb      	ldr	r3, [r7, #8]
     d32:	781b      	ldrb	r3, [r3, #0]
     d34:	2b6c      	cmp	r3, #108	; 0x6c
     d36:	d003      	beq.n	d40 <myvsprintf+0x184>
     d38:	68bb      	ldr	r3, [r7, #8]
     d3a:	781b      	ldrb	r3, [r3, #0]
     d3c:	2b71      	cmp	r3, #113	; 0x71
     d3e:	d105      	bne.n	d4c <myvsprintf+0x190>
            qualifier = *fmt;
     d40:	68bb      	ldr	r3, [r7, #8]
     d42:	781b      	ldrb	r3, [r3, #0]
     d44:	62bb      	str	r3, [r7, #40]	; 0x28
            ++fmt;
     d46:	68bb      	ldr	r3, [r7, #8]
     d48:	3301      	adds	r3, #1
     d4a:	60bb      	str	r3, [r7, #8]
        }

        base = 10;          //default base
     d4c:	230a      	movs	r3, #10
     d4e:	637b      	str	r3, [r7, #52]	; 0x34
        switch (*fmt) {
     d50:	68bb      	ldr	r3, [r7, #8]
     d52:	781b      	ldrb	r3, [r3, #0]
     d54:	3b25      	subs	r3, #37	; 0x25
     d56:	2b53      	cmp	r3, #83	; 0x53
     d58:	f200 815e 	bhi.w	1018 <myvsprintf+0x45c>
     d5c:	a201      	add	r2, pc, #4	; (adr r2, d64 <myvsprintf+0x1a8>)
     d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     d62:	bf00      	nop
     d64:	00000fef 	.word	0x00000fef
     d68:	00001019 	.word	0x00001019
     d6c:	00001019 	.word	0x00001019
     d70:	00001019 	.word	0x00001019
     d74:	00001019 	.word	0x00001019
     d78:	00001019 	.word	0x00001019
     d7c:	00001019 	.word	0x00001019
     d80:	00001019 	.word	0x00001019
     d84:	00001019 	.word	0x00001019
     d88:	00001019 	.word	0x00001019
     d8c:	00001019 	.word	0x00001019
     d90:	00001019 	.word	0x00001019
     d94:	00001019 	.word	0x00001019
     d98:	00001019 	.word	0x00001019
     d9c:	00001019 	.word	0x00001019
     da0:	00001019 	.word	0x00001019
     da4:	00001019 	.word	0x00001019
     da8:	00001019 	.word	0x00001019
     dac:	00001019 	.word	0x00001019
     db0:	00001019 	.word	0x00001019
     db4:	00001019 	.word	0x00001019
     db8:	00001019 	.word	0x00001019
     dbc:	00001019 	.word	0x00001019
     dc0:	00001019 	.word	0x00001019
     dc4:	00001019 	.word	0x00001019
     dc8:	00001019 	.word	0x00001019
     dcc:	00001019 	.word	0x00001019
     dd0:	00001019 	.word	0x00001019
     dd4:	00001019 	.word	0x00001019
     dd8:	00001019 	.word	0x00001019
     ddc:	00001019 	.word	0x00001019
     de0:	00001019 	.word	0x00001019
     de4:	00001019 	.word	0x00001019
     de8:	00001019 	.word	0x00001019
     dec:	00001019 	.word	0x00001019
     df0:	00001019 	.word	0x00001019
     df4:	00001019 	.word	0x00001019
     df8:	00001019 	.word	0x00001019
     dfc:	00001019 	.word	0x00001019
     e00:	00001019 	.word	0x00001019
     e04:	00001019 	.word	0x00001019
     e08:	00001019 	.word	0x00001019
     e0c:	00001019 	.word	0x00001019
     e10:	00001019 	.word	0x00001019
     e14:	00001019 	.word	0x00001019
     e18:	00001019 	.word	0x00001019
     e1c:	00001019 	.word	0x00001019
     e20:	00001019 	.word	0x00001019
     e24:	00001019 	.word	0x00001019
     e28:	00001019 	.word	0x00001019
     e2c:	00001019 	.word	0x00001019
     e30:	00001001 	.word	0x00001001
     e34:	00001019 	.word	0x00001019
     e38:	00001019 	.word	0x00001019
     e3c:	00001019 	.word	0x00001019
     e40:	00001019 	.word	0x00001019
     e44:	00001019 	.word	0x00001019
     e48:	00001019 	.word	0x00001019
     e4c:	00001019 	.word	0x00001019
     e50:	00001019 	.word	0x00001019
     e54:	00001019 	.word	0x00001019
     e58:	00001019 	.word	0x00001019
     e5c:	00000eb5 	.word	0x00000eb5
     e60:	0000100f 	.word	0x0000100f
     e64:	00001019 	.word	0x00001019
     e68:	00001019 	.word	0x00001019
     e6c:	00001019 	.word	0x00001019
     e70:	00001019 	.word	0x00001019
     e74:	0000100f 	.word	0x0000100f
     e78:	00001019 	.word	0x00001019
     e7c:	00001019 	.word	0x00001019
     e80:	00001019 	.word	0x00001019
     e84:	00001019 	.word	0x00001019
     e88:	00000fbd 	.word	0x00000fbd
     e8c:	00000ffb 	.word	0x00000ffb
     e90:	00000f89 	.word	0x00000f89
     e94:	00001019 	.word	0x00001019
     e98:	00001019 	.word	0x00001019
     e9c:	00000f03 	.word	0x00000f03
     ea0:	00001019 	.word	0x00001019
     ea4:	00001041 	.word	0x00001041
     ea8:	00001019 	.word	0x00001019
     eac:	00001019 	.word	0x00001019
     eb0:	00001009 	.word	0x00001009
        case 'c': {
            if (0 == (flags & LEFT)) {
     eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     eb6:	f003 0310 	and.w	r3, r3, #16
     eba:	2b00      	cmp	r3, #0
     ebc:	d10b      	bne.n	ed6 <myvsprintf+0x31a>
                while (--field_width > 0) {
     ebe:	e004      	b.n	eca <myvsprintf+0x30e>
                    *str++ = ' ';
     ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ec2:	1c5a      	adds	r2, r3, #1
     ec4:	627a      	str	r2, [r7, #36]	; 0x24
     ec6:	2220      	movs	r2, #32
     ec8:	701a      	strb	r2, [r3, #0]
                while (--field_width > 0) {
     eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ecc:	3b01      	subs	r3, #1
     ece:	633b      	str	r3, [r7, #48]	; 0x30
     ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ed2:	2b00      	cmp	r3, #0
     ed4:	dcf4      	bgt.n	ec0 <myvsprintf+0x304>
                }
            }
            *str++ = (unsigned char) va_arg(args, int);
     ed6:	687b      	ldr	r3, [r7, #4]
     ed8:	1d1a      	adds	r2, r3, #4
     eda:	607a      	str	r2, [r7, #4]
     edc:	6819      	ldr	r1, [r3, #0]
     ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ee0:	1c5a      	adds	r2, r3, #1
     ee2:	627a      	str	r2, [r7, #36]	; 0x24
     ee4:	b2ca      	uxtb	r2, r1
     ee6:	701a      	strb	r2, [r3, #0]
            while (--field_width > 0) {
     ee8:	e004      	b.n	ef4 <myvsprintf+0x338>
                *str++ = ' ';
     eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     eec:	1c5a      	adds	r2, r3, #1
     eee:	627a      	str	r2, [r7, #36]	; 0x24
     ef0:	2220      	movs	r2, #32
     ef2:	701a      	strb	r2, [r3, #0]
            while (--field_width > 0) {
     ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ef6:	3b01      	subs	r3, #1
     ef8:	633b      	str	r3, [r7, #48]	; 0x30
     efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     efc:	2b00      	cmp	r3, #0
     efe:	dcf4      	bgt.n	eea <myvsprintf+0x32e>
            }
            continue;
     f00:	e0d5      	b.n	10ae <myvsprintf+0x4f2>
        }
        case 's': {
            s = va_arg(args, char *);
     f02:	687b      	ldr	r3, [r7, #4]
     f04:	1d1a      	adds	r2, r3, #4
     f06:	607a      	str	r2, [r7, #4]
     f08:	681b      	ldr	r3, [r3, #0]
     f0a:	623b      	str	r3, [r7, #32]
            if (!s) {
     f0c:	6a3b      	ldr	r3, [r7, #32]
     f0e:	2b00      	cmp	r3, #0
     f10:	d101      	bne.n	f16 <myvsprintf+0x35a>
                s = "<NULL>";
     f12:	4b0e      	ldr	r3, [pc, #56]	; (f4c <myvsprintf+0x390>)
     f14:	623b      	str	r3, [r7, #32]
            }
            len = mystrnlen(s, precision);
     f16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
     f18:	6a38      	ldr	r0, [r7, #32]
     f1a:	f7ff fce3 	bl	8e4 <mystrnlen>
     f1e:	61b8      	str	r0, [r7, #24]
            if (0 == (flags & LEFT)) {
     f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f22:	f003 0310 	and.w	r3, r3, #16
     f26:	2b00      	cmp	r3, #0
     f28:	d10b      	bne.n	f42 <myvsprintf+0x386>
                while (len < field_width--) {
     f2a:	e004      	b.n	f36 <myvsprintf+0x37a>
                    *str++ = ' ';
     f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f2e:	1c5a      	adds	r2, r3, #1
     f30:	627a      	str	r2, [r7, #36]	; 0x24
     f32:	2220      	movs	r2, #32
     f34:	701a      	strb	r2, [r3, #0]
                while (len < field_width--) {
     f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f38:	1e5a      	subs	r2, r3, #1
     f3a:	633a      	str	r2, [r7, #48]	; 0x30
     f3c:	69ba      	ldr	r2, [r7, #24]
     f3e:	429a      	cmp	r2, r3
     f40:	dbf4      	blt.n	f2c <myvsprintf+0x370>
                }
            }
            for (i = 0; i < len; ++i) {
     f42:	2300      	movs	r3, #0
     f44:	63fb      	str	r3, [r7, #60]	; 0x3c
     f46:	e00e      	b.n	f66 <myvsprintf+0x3aa>
     f48:	00005a70 	.word	0x00005a70
     f4c:	00005a68 	.word	0x00005a68
                *str++ = *s++;
     f50:	6a3a      	ldr	r2, [r7, #32]
     f52:	1c53      	adds	r3, r2, #1
     f54:	623b      	str	r3, [r7, #32]
     f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f58:	1c59      	adds	r1, r3, #1
     f5a:	6279      	str	r1, [r7, #36]	; 0x24
     f5c:	7812      	ldrb	r2, [r2, #0]
     f5e:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < len; ++i) {
     f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f62:	3301      	adds	r3, #1
     f64:	63fb      	str	r3, [r7, #60]	; 0x3c
     f66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f68:	69bb      	ldr	r3, [r7, #24]
     f6a:	429a      	cmp	r2, r3
     f6c:	dbf0      	blt.n	f50 <myvsprintf+0x394>
            }
            while (len < field_width--) {
     f6e:	e004      	b.n	f7a <myvsprintf+0x3be>
                *str++ = ' ';
     f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f72:	1c5a      	adds	r2, r3, #1
     f74:	627a      	str	r2, [r7, #36]	; 0x24
     f76:	2220      	movs	r2, #32
     f78:	701a      	strb	r2, [r3, #0]
            while (len < field_width--) {
     f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f7c:	1e5a      	subs	r2, r3, #1
     f7e:	633a      	str	r2, [r7, #48]	; 0x30
     f80:	69ba      	ldr	r2, [r7, #24]
     f82:	429a      	cmp	r2, r3
     f84:	dbf4      	blt.n	f70 <myvsprintf+0x3b4>
            }
            continue;
     f86:	e092      	b.n	10ae <myvsprintf+0x4f2>
        }
        case 'p': {
            if (-1 == field_width) {
     f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
     f8e:	d105      	bne.n	f9c <myvsprintf+0x3e0>
                field_width = 2 * sizeof(void *);
     f90:	2308      	movs	r3, #8
     f92:	633b      	str	r3, [r7, #48]	; 0x30
                flags |= ZEROPAD;
     f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f96:	f043 0301 	orr.w	r3, r3, #1
     f9a:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            str = mynumber(str, (unsigned long)va_arg(args, void *), 16, field_width, precision, flags);
     f9c:	687b      	ldr	r3, [r7, #4]
     f9e:	1d1a      	adds	r2, r3, #4
     fa0:	607a      	str	r2, [r7, #4]
     fa2:	681b      	ldr	r3, [r3, #0]
     fa4:	4619      	mov	r1, r3
     fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fa8:	9301      	str	r3, [sp, #4]
     faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     fac:	9300      	str	r3, [sp, #0]
     fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     fb0:	2210      	movs	r2, #16
     fb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
     fb4:	f7ff fcdc 	bl	970 <mynumber>
     fb8:	6278      	str	r0, [r7, #36]	; 0x24
            continue;
     fba:	e078      	b.n	10ae <myvsprintf+0x4f2>
        }
        case 'n': {
            if ('l' == qualifier) {
     fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
     fbe:	2b6c      	cmp	r3, #108	; 0x6c
     fc0:	d10a      	bne.n	fd8 <myvsprintf+0x41c>
                long * ip = va_arg(args, long *);
     fc2:	687b      	ldr	r3, [r7, #4]
     fc4:	1d1a      	adds	r2, r3, #4
     fc6:	607a      	str	r2, [r7, #4]
     fc8:	681b      	ldr	r3, [r3, #0]
     fca:	613b      	str	r3, [r7, #16]
                *ip = (str - buf);
     fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     fce:	68fb      	ldr	r3, [r7, #12]
     fd0:	1ad2      	subs	r2, r2, r3
     fd2:	693b      	ldr	r3, [r7, #16]
     fd4:	601a      	str	r2, [r3, #0]
            } else {
                int * ip = va_arg(args, int *);
                *ip = (str - buf);
            }
            continue;
     fd6:	e06a      	b.n	10ae <myvsprintf+0x4f2>
                int * ip = va_arg(args, int *);
     fd8:	687b      	ldr	r3, [r7, #4]
     fda:	1d1a      	adds	r2, r3, #4
     fdc:	607a      	str	r2, [r7, #4]
     fde:	681b      	ldr	r3, [r3, #0]
     fe0:	617b      	str	r3, [r7, #20]
                *ip = (str - buf);
     fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     fe4:	68fb      	ldr	r3, [r7, #12]
     fe6:	1ad2      	subs	r2, r2, r3
     fe8:	697b      	ldr	r3, [r7, #20]
     fea:	601a      	str	r2, [r3, #0]
            continue;
     fec:	e05f      	b.n	10ae <myvsprintf+0x4f2>
        }
        case '%': {
            *str++ = '%';
     fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ff0:	1c5a      	adds	r2, r3, #1
     ff2:	627a      	str	r2, [r7, #36]	; 0x24
     ff4:	2225      	movs	r2, #37	; 0x25
     ff6:	701a      	strb	r2, [r3, #0]
            continue;
     ff8:	e059      	b.n	10ae <myvsprintf+0x4f2>
        }

        case 'o': { //integer number formats - set up the flags and "break"
            base = 8;
     ffa:	2308      	movs	r3, #8
     ffc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
     ffe:	e020      	b.n	1042 <myvsprintf+0x486>
        }

        case 'X': {
            flags |= LARGE;
    1000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1006:	63bb      	str	r3, [r7, #56]	; 0x38
        }
        case 'x': {
            base = 16;
    1008:	2310      	movs	r3, #16
    100a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
    100c:	e019      	b.n	1042 <myvsprintf+0x486>
        }
        case 'd':
        case 'i': {
            flags |= SIGN;
    100e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1010:	f043 0302 	orr.w	r3, r3, #2
    1014:	63bb      	str	r3, [r7, #56]	; 0x38
        }
        case 'u': {
            break;
    1016:	e013      	b.n	1040 <myvsprintf+0x484>
        }
        default: {
            *str++ = '%';
    1018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    101a:	1c5a      	adds	r2, r3, #1
    101c:	627a      	str	r2, [r7, #36]	; 0x24
    101e:	2225      	movs	r2, #37	; 0x25
    1020:	701a      	strb	r2, [r3, #0]
            if (0 == *fmt) {
    1022:	68bb      	ldr	r3, [r7, #8]
    1024:	781b      	ldrb	r3, [r3, #0]
    1026:	2b00      	cmp	r3, #0
    1028:	d106      	bne.n	1038 <myvsprintf+0x47c>
                *str++ = *fmt;
    102a:	68ba      	ldr	r2, [r7, #8]
    102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    102e:	1c59      	adds	r1, r3, #1
    1030:	6279      	str	r1, [r7, #36]	; 0x24
    1032:	7812      	ldrb	r2, [r2, #0]
    1034:	701a      	strb	r2, [r3, #0]
            } else {
                --fmt;
            }
            continue;
    1036:	e03a      	b.n	10ae <myvsprintf+0x4f2>
                --fmt;
    1038:	68bb      	ldr	r3, [r7, #8]
    103a:	3b01      	subs	r3, #1
    103c:	60bb      	str	r3, [r7, #8]
            continue;
    103e:	e036      	b.n	10ae <myvsprintf+0x4f2>
            break;
    1040:	bf00      	nop
        }
        }

        if ('l' == qualifier) {
    1042:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1044:	2b6c      	cmp	r3, #108	; 0x6c
    1046:	d105      	bne.n	1054 <myvsprintf+0x498>
            num = va_arg(args, unsigned long);
    1048:	687b      	ldr	r3, [r7, #4]
    104a:	1d1a      	adds	r2, r3, #4
    104c:	607a      	str	r2, [r7, #4]
    104e:	681b      	ldr	r3, [r3, #0]
    1050:	61fb      	str	r3, [r7, #28]
    1052:	e021      	b.n	1098 <myvsprintf+0x4dc>
        } else if ('h' == qualifier) {
    1054:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1056:	2b68      	cmp	r3, #104	; 0x68
    1058:	d10e      	bne.n	1078 <myvsprintf+0x4bc>
            num = (unsigned short) va_arg(args, int);
    105a:	687b      	ldr	r3, [r7, #4]
    105c:	1d1a      	adds	r2, r3, #4
    105e:	607a      	str	r2, [r7, #4]
    1060:	681b      	ldr	r3, [r3, #0]
    1062:	b29b      	uxth	r3, r3
    1064:	61fb      	str	r3, [r7, #28]
            if (0 == (flags & SIGN)) {
    1066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1068:	f003 0302 	and.w	r3, r3, #2
    106c:	2b00      	cmp	r3, #0
    106e:	d113      	bne.n	1098 <myvsprintf+0x4dc>
                num = (short) num;
    1070:	69fb      	ldr	r3, [r7, #28]
    1072:	b21b      	sxth	r3, r3
    1074:	61fb      	str	r3, [r7, #28]
    1076:	e00f      	b.n	1098 <myvsprintf+0x4dc>
            }
        } else if (0 == (flags & SIGN)) {
    1078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    107a:	f003 0302 	and.w	r3, r3, #2
    107e:	2b00      	cmp	r3, #0
    1080:	d105      	bne.n	108e <myvsprintf+0x4d2>
            num = va_arg(args, int);
    1082:	687b      	ldr	r3, [r7, #4]
    1084:	1d1a      	adds	r2, r3, #4
    1086:	607a      	str	r2, [r7, #4]
    1088:	681b      	ldr	r3, [r3, #0]
    108a:	61fb      	str	r3, [r7, #28]
    108c:	e004      	b.n	1098 <myvsprintf+0x4dc>
        } else {
            num = va_arg(args, unsigned int);
    108e:	687b      	ldr	r3, [r7, #4]
    1090:	1d1a      	adds	r2, r3, #4
    1092:	607a      	str	r2, [r7, #4]
    1094:	681b      	ldr	r3, [r3, #0]
    1096:	61fb      	str	r3, [r7, #28]
        }

        str = mynumber(str, num, base, field_width, precision, flags);
    1098:	69f9      	ldr	r1, [r7, #28]
    109a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    109c:	9301      	str	r3, [sp, #4]
    109e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    10a0:	9300      	str	r3, [sp, #0]
    10a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    10a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    10a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
    10a8:	f7ff fc62 	bl	970 <mynumber>
    10ac:	6278      	str	r0, [r7, #36]	; 0x24
    for (str = buf; *fmt; ++fmt) {
    10ae:	68bb      	ldr	r3, [r7, #8]
    10b0:	3301      	adds	r3, #1
    10b2:	60bb      	str	r3, [r7, #8]
    10b4:	68bb      	ldr	r3, [r7, #8]
    10b6:	781b      	ldrb	r3, [r3, #0]
    10b8:	2b00      	cmp	r3, #0
    10ba:	f47f ad88 	bne.w	bce <myvsprintf+0x12>

    }
    *str = '\0';
    10be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10c0:	2200      	movs	r2, #0
    10c2:	701a      	strb	r2, [r3, #0]

    return str-buf;
    10c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    10c6:	68fb      	ldr	r3, [r7, #12]
    10c8:	1ad3      	subs	r3, r2, r3
}
    10ca:	4618      	mov	r0, r3
    10cc:	3740      	adds	r7, #64	; 0x40
    10ce:	46bd      	mov	sp, r7
    10d0:	bd80      	pop	{r7, pc}

000010d2 <myputc>:

void myputc (const char c)
{
    10d2:	b580      	push	{r7, lr}
    10d4:	b082      	sub	sp, #8
    10d6:	af00      	add	r7, sp, #0
    10d8:	4603      	mov	r3, r0
    10da:	71fb      	strb	r3, [r7, #7]
    if (c == '\n')
    10dc:	79fb      	ldrb	r3, [r7, #7]
    10de:	2b0a      	cmp	r3, #10
    10e0:	d102      	bne.n	10e8 <myputc+0x16>
        usart_send_bytes('\r');
    10e2:	200d      	movs	r0, #13
    10e4:	f7ff fbe4 	bl	8b0 <usart_send_bytes>
    usart_send_bytes(c);
    10e8:	79fb      	ldrb	r3, [r7, #7]
    10ea:	4618      	mov	r0, r3
    10ec:	f7ff fbe0 	bl	8b0 <usart_send_bytes>
}
    10f0:	bf00      	nop
    10f2:	3708      	adds	r7, #8
    10f4:	46bd      	mov	sp, r7
    10f6:	bd80      	pop	{r7, pc}

000010f8 <myputs>:

void myputs (const unsigned char *s)
{
    10f8:	b580      	push	{r7, lr}
    10fa:	b082      	sub	sp, #8
    10fc:	af00      	add	r7, sp, #0
    10fe:	6078      	str	r0, [r7, #4]
    while (*s) {
    1100:	e006      	b.n	1110 <myputs+0x18>
        myputc (*s++);
    1102:	687b      	ldr	r3, [r7, #4]
    1104:	1c5a      	adds	r2, r3, #1
    1106:	607a      	str	r2, [r7, #4]
    1108:	781b      	ldrb	r3, [r3, #0]
    110a:	4618      	mov	r0, r3
    110c:	f7ff ffe1 	bl	10d2 <myputc>
    while (*s) {
    1110:	687b      	ldr	r3, [r7, #4]
    1112:	781b      	ldrb	r3, [r3, #0]
    1114:	2b00      	cmp	r3, #0
    1116:	d1f4      	bne.n	1102 <myputs+0xa>
    }
}
    1118:	bf00      	nop
    111a:	bf00      	nop
    111c:	3708      	adds	r7, #8
    111e:	46bd      	mov	sp, r7
    1120:	bd80      	pop	{r7, pc}

00001122 <myprintf>:

void myprintf (const char *fmt,...)
{
    1122:	b40f      	push	{r0, r1, r2, r3}
    1124:	b580      	push	{r7, lr}
    1126:	b0a2      	sub	sp, #136	; 0x88
    1128:	af00      	add	r7, sp, #0
    va_list args;
    char printbuffer[PBSIZE];

    va_start(args, fmt);
    112a:	f107 0394 	add.w	r3, r7, #148	; 0x94
    112e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    myvsprintf(printbuffer, fmt, args);
    1132:	1d3b      	adds	r3, r7, #4
    1134:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    1138:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
    113c:	4618      	mov	r0, r3
    113e:	f7ff fd3d 	bl	bbc <myvsprintf>
    va_end(args);

    myputs((const unsigned char *)printbuffer);  // Print the string
    1142:	1d3b      	adds	r3, r7, #4
    1144:	4618      	mov	r0, r3
    1146:	f7ff ffd7 	bl	10f8 <myputs>
}
    114a:	bf00      	nop
    114c:	3788      	adds	r7, #136	; 0x88
    114e:	46bd      	mov	sp, r7
    1150:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    1154:	b004      	add	sp, #16
    1156:	4770      	bx	lr

00001158 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
    1158:	b480      	push	{r7}
    115a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
    115c:	4b13      	ldr	r3, [pc, #76]	; (11ac <RCC_DeInit+0x54>)
    115e:	681b      	ldr	r3, [r3, #0]
    1160:	4a12      	ldr	r2, [pc, #72]	; (11ac <RCC_DeInit+0x54>)
    1162:	f043 0301 	orr.w	r3, r3, #1
    1166:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
    1168:	4b10      	ldr	r3, [pc, #64]	; (11ac <RCC_DeInit+0x54>)
    116a:	685a      	ldr	r2, [r3, #4]
    116c:	490f      	ldr	r1, [pc, #60]	; (11ac <RCC_DeInit+0x54>)
    116e:	4b10      	ldr	r3, [pc, #64]	; (11b0 <RCC_DeInit+0x58>)
    1170:	4013      	ands	r3, r2
    1172:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
    1174:	4b0d      	ldr	r3, [pc, #52]	; (11ac <RCC_DeInit+0x54>)
    1176:	681b      	ldr	r3, [r3, #0]
    1178:	4a0c      	ldr	r2, [pc, #48]	; (11ac <RCC_DeInit+0x54>)
    117a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
    117e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    1182:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
    1184:	4b09      	ldr	r3, [pc, #36]	; (11ac <RCC_DeInit+0x54>)
    1186:	681b      	ldr	r3, [r3, #0]
    1188:	4a08      	ldr	r2, [pc, #32]	; (11ac <RCC_DeInit+0x54>)
    118a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    118e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
    1190:	4b06      	ldr	r3, [pc, #24]	; (11ac <RCC_DeInit+0x54>)
    1192:	685b      	ldr	r3, [r3, #4]
    1194:	4a05      	ldr	r2, [pc, #20]	; (11ac <RCC_DeInit+0x54>)
    1196:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
    119a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
    119c:	4b03      	ldr	r3, [pc, #12]	; (11ac <RCC_DeInit+0x54>)
    119e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
    11a2:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
    11a4:	bf00      	nop
    11a6:	46bd      	mov	sp, r7
    11a8:	bc80      	pop	{r7}
    11aa:	4770      	bx	lr
    11ac:	40021000 	.word	0x40021000
    11b0:	f8ff0000 	.word	0xf8ff0000

000011b4 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
    11b4:	b480      	push	{r7}
    11b6:	b083      	sub	sp, #12
    11b8:	af00      	add	r7, sp, #0
    11ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
    11bc:	4b13      	ldr	r3, [pc, #76]	; (120c <RCC_HSEConfig+0x58>)
    11be:	681b      	ldr	r3, [r3, #0]
    11c0:	4a12      	ldr	r2, [pc, #72]	; (120c <RCC_HSEConfig+0x58>)
    11c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    11c6:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
    11c8:	4b10      	ldr	r3, [pc, #64]	; (120c <RCC_HSEConfig+0x58>)
    11ca:	681b      	ldr	r3, [r3, #0]
    11cc:	4a0f      	ldr	r2, [pc, #60]	; (120c <RCC_HSEConfig+0x58>)
    11ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    11d2:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
    11d4:	687b      	ldr	r3, [r7, #4]
    11d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    11da:	d004      	beq.n	11e6 <RCC_HSEConfig+0x32>
    11dc:	687b      	ldr	r3, [r7, #4]
    11de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    11e2:	d007      	beq.n	11f4 <RCC_HSEConfig+0x40>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
    11e4:	e00d      	b.n	1202 <RCC_HSEConfig+0x4e>
      RCC->CR |= CR_HSEON_Set;
    11e6:	4b09      	ldr	r3, [pc, #36]	; (120c <RCC_HSEConfig+0x58>)
    11e8:	681b      	ldr	r3, [r3, #0]
    11ea:	4a08      	ldr	r2, [pc, #32]	; (120c <RCC_HSEConfig+0x58>)
    11ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    11f0:	6013      	str	r3, [r2, #0]
      break;
    11f2:	e006      	b.n	1202 <RCC_HSEConfig+0x4e>
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
    11f4:	4b05      	ldr	r3, [pc, #20]	; (120c <RCC_HSEConfig+0x58>)
    11f6:	681b      	ldr	r3, [r3, #0]
    11f8:	4a04      	ldr	r2, [pc, #16]	; (120c <RCC_HSEConfig+0x58>)
    11fa:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
    11fe:	6013      	str	r3, [r2, #0]
      break;
    1200:	bf00      	nop
  }
}
    1202:	bf00      	nop
    1204:	370c      	adds	r7, #12
    1206:	46bd      	mov	sp, r7
    1208:	bc80      	pop	{r7}
    120a:	4770      	bx	lr
    120c:	40021000 	.word	0x40021000

00001210 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
    1210:	b580      	push	{r7, lr}
    1212:	b082      	sub	sp, #8
    1214:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
    1216:	2300      	movs	r3, #0
    1218:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
    121a:	2300      	movs	r3, #0
    121c:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
    121e:	2300      	movs	r3, #0
    1220:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    1222:	2031      	movs	r0, #49	; 0x31
    1224:	f000 fb14 	bl	1850 <RCC_GetFlagStatus>
    1228:	4603      	mov	r3, r0
    122a:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
    122c:	683b      	ldr	r3, [r7, #0]
    122e:	3301      	adds	r3, #1
    1230:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
    1232:	683b      	ldr	r3, [r7, #0]
    1234:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    1238:	d002      	beq.n	1240 <RCC_WaitForHSEStartUp+0x30>
    123a:	79bb      	ldrb	r3, [r7, #6]
    123c:	2b00      	cmp	r3, #0
    123e:	d0f0      	beq.n	1222 <RCC_WaitForHSEStartUp+0x12>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
    1240:	2031      	movs	r0, #49	; 0x31
    1242:	f000 fb05 	bl	1850 <RCC_GetFlagStatus>
    1246:	4603      	mov	r3, r0
    1248:	2b00      	cmp	r3, #0
    124a:	d002      	beq.n	1252 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
    124c:	2301      	movs	r3, #1
    124e:	71fb      	strb	r3, [r7, #7]
    1250:	e001      	b.n	1256 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
    1252:	2300      	movs	r3, #0
    1254:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
    1256:	79fb      	ldrb	r3, [r7, #7]
}
    1258:	4618      	mov	r0, r3
    125a:	3708      	adds	r7, #8
    125c:	46bd      	mov	sp, r7
    125e:	bd80      	pop	{r7, pc}

00001260 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
    1260:	b480      	push	{r7}
    1262:	b085      	sub	sp, #20
    1264:	af00      	add	r7, sp, #0
    1266:	4603      	mov	r3, r0
    1268:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
    126a:	2300      	movs	r3, #0
    126c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
    126e:	4b0a      	ldr	r3, [pc, #40]	; (1298 <RCC_AdjustHSICalibrationValue+0x38>)
    1270:	681b      	ldr	r3, [r3, #0]
    1272:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
    1274:	68fb      	ldr	r3, [r7, #12]
    1276:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
    127a:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
    127c:	79fb      	ldrb	r3, [r7, #7]
    127e:	00db      	lsls	r3, r3, #3
    1280:	68fa      	ldr	r2, [r7, #12]
    1282:	4313      	orrs	r3, r2
    1284:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
    1286:	4a04      	ldr	r2, [pc, #16]	; (1298 <RCC_AdjustHSICalibrationValue+0x38>)
    1288:	68fb      	ldr	r3, [r7, #12]
    128a:	6013      	str	r3, [r2, #0]
}
    128c:	bf00      	nop
    128e:	3714      	adds	r7, #20
    1290:	46bd      	mov	sp, r7
    1292:	bc80      	pop	{r7}
    1294:	4770      	bx	lr
    1296:	bf00      	nop
    1298:	40021000 	.word	0x40021000

0000129c <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
    129c:	b480      	push	{r7}
    129e:	b083      	sub	sp, #12
    12a0:	af00      	add	r7, sp, #0
    12a2:	4603      	mov	r3, r0
    12a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
    12a6:	4a04      	ldr	r2, [pc, #16]	; (12b8 <RCC_HSICmd+0x1c>)
    12a8:	79fb      	ldrb	r3, [r7, #7]
    12aa:	6013      	str	r3, [r2, #0]
}
    12ac:	bf00      	nop
    12ae:	370c      	adds	r7, #12
    12b0:	46bd      	mov	sp, r7
    12b2:	bc80      	pop	{r7}
    12b4:	4770      	bx	lr
    12b6:	bf00      	nop
    12b8:	42420000 	.word	0x42420000

000012bc <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
    12bc:	b480      	push	{r7}
    12be:	b085      	sub	sp, #20
    12c0:	af00      	add	r7, sp, #0
    12c2:	6078      	str	r0, [r7, #4]
    12c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    12c6:	2300      	movs	r3, #0
    12c8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
    12ca:	4b0a      	ldr	r3, [pc, #40]	; (12f4 <RCC_PLLConfig+0x38>)
    12cc:	685b      	ldr	r3, [r3, #4]
    12ce:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
    12d0:	68fb      	ldr	r3, [r7, #12]
    12d2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
    12d6:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
    12d8:	687a      	ldr	r2, [r7, #4]
    12da:	683b      	ldr	r3, [r7, #0]
    12dc:	4313      	orrs	r3, r2
    12de:	68fa      	ldr	r2, [r7, #12]
    12e0:	4313      	orrs	r3, r2
    12e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    12e4:	4a03      	ldr	r2, [pc, #12]	; (12f4 <RCC_PLLConfig+0x38>)
    12e6:	68fb      	ldr	r3, [r7, #12]
    12e8:	6053      	str	r3, [r2, #4]
}
    12ea:	bf00      	nop
    12ec:	3714      	adds	r7, #20
    12ee:	46bd      	mov	sp, r7
    12f0:	bc80      	pop	{r7}
    12f2:	4770      	bx	lr
    12f4:	40021000 	.word	0x40021000

000012f8 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
    12f8:	b480      	push	{r7}
    12fa:	b083      	sub	sp, #12
    12fc:	af00      	add	r7, sp, #0
    12fe:	4603      	mov	r3, r0
    1300:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
    1302:	4a04      	ldr	r2, [pc, #16]	; (1314 <RCC_PLLCmd+0x1c>)
    1304:	79fb      	ldrb	r3, [r7, #7]
    1306:	6013      	str	r3, [r2, #0]
}
    1308:	bf00      	nop
    130a:	370c      	adds	r7, #12
    130c:	46bd      	mov	sp, r7
    130e:	bc80      	pop	{r7}
    1310:	4770      	bx	lr
    1312:	bf00      	nop
    1314:	42420060 	.word	0x42420060

00001318 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
    1318:	b480      	push	{r7}
    131a:	b085      	sub	sp, #20
    131c:	af00      	add	r7, sp, #0
    131e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1320:	2300      	movs	r3, #0
    1322:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
    1324:	4b09      	ldr	r3, [pc, #36]	; (134c <RCC_SYSCLKConfig+0x34>)
    1326:	685b      	ldr	r3, [r3, #4]
    1328:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
    132a:	68fb      	ldr	r3, [r7, #12]
    132c:	f023 0303 	bic.w	r3, r3, #3
    1330:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
    1332:	68fa      	ldr	r2, [r7, #12]
    1334:	687b      	ldr	r3, [r7, #4]
    1336:	4313      	orrs	r3, r2
    1338:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    133a:	4a04      	ldr	r2, [pc, #16]	; (134c <RCC_SYSCLKConfig+0x34>)
    133c:	68fb      	ldr	r3, [r7, #12]
    133e:	6053      	str	r3, [r2, #4]
}
    1340:	bf00      	nop
    1342:	3714      	adds	r7, #20
    1344:	46bd      	mov	sp, r7
    1346:	bc80      	pop	{r7}
    1348:	4770      	bx	lr
    134a:	bf00      	nop
    134c:	40021000 	.word	0x40021000

00001350 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
    1350:	b480      	push	{r7}
    1352:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
    1354:	4b04      	ldr	r3, [pc, #16]	; (1368 <RCC_GetSYSCLKSource+0x18>)
    1356:	685b      	ldr	r3, [r3, #4]
    1358:	b2db      	uxtb	r3, r3
    135a:	f003 030c 	and.w	r3, r3, #12
    135e:	b2db      	uxtb	r3, r3
}
    1360:	4618      	mov	r0, r3
    1362:	46bd      	mov	sp, r7
    1364:	bc80      	pop	{r7}
    1366:	4770      	bx	lr
    1368:	40021000 	.word	0x40021000

0000136c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
    136c:	b480      	push	{r7}
    136e:	b085      	sub	sp, #20
    1370:	af00      	add	r7, sp, #0
    1372:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1374:	2300      	movs	r3, #0
    1376:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
    1378:	4b09      	ldr	r3, [pc, #36]	; (13a0 <RCC_HCLKConfig+0x34>)
    137a:	685b      	ldr	r3, [r3, #4]
    137c:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
    137e:	68fb      	ldr	r3, [r7, #12]
    1380:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1384:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
    1386:	68fa      	ldr	r2, [r7, #12]
    1388:	687b      	ldr	r3, [r7, #4]
    138a:	4313      	orrs	r3, r2
    138c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    138e:	4a04      	ldr	r2, [pc, #16]	; (13a0 <RCC_HCLKConfig+0x34>)
    1390:	68fb      	ldr	r3, [r7, #12]
    1392:	6053      	str	r3, [r2, #4]
}
    1394:	bf00      	nop
    1396:	3714      	adds	r7, #20
    1398:	46bd      	mov	sp, r7
    139a:	bc80      	pop	{r7}
    139c:	4770      	bx	lr
    139e:	bf00      	nop
    13a0:	40021000 	.word	0x40021000

000013a4 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
    13a4:	b480      	push	{r7}
    13a6:	b085      	sub	sp, #20
    13a8:	af00      	add	r7, sp, #0
    13aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    13ac:	2300      	movs	r3, #0
    13ae:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
    13b0:	4b09      	ldr	r3, [pc, #36]	; (13d8 <RCC_PCLK1Config+0x34>)
    13b2:	685b      	ldr	r3, [r3, #4]
    13b4:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
    13b6:	68fb      	ldr	r3, [r7, #12]
    13b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    13bc:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
    13be:	68fa      	ldr	r2, [r7, #12]
    13c0:	687b      	ldr	r3, [r7, #4]
    13c2:	4313      	orrs	r3, r2
    13c4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    13c6:	4a04      	ldr	r2, [pc, #16]	; (13d8 <RCC_PCLK1Config+0x34>)
    13c8:	68fb      	ldr	r3, [r7, #12]
    13ca:	6053      	str	r3, [r2, #4]
}
    13cc:	bf00      	nop
    13ce:	3714      	adds	r7, #20
    13d0:	46bd      	mov	sp, r7
    13d2:	bc80      	pop	{r7}
    13d4:	4770      	bx	lr
    13d6:	bf00      	nop
    13d8:	40021000 	.word	0x40021000

000013dc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
    13dc:	b480      	push	{r7}
    13de:	b085      	sub	sp, #20
    13e0:	af00      	add	r7, sp, #0
    13e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    13e4:	2300      	movs	r3, #0
    13e6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
    13e8:	4b09      	ldr	r3, [pc, #36]	; (1410 <RCC_PCLK2Config+0x34>)
    13ea:	685b      	ldr	r3, [r3, #4]
    13ec:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
    13ee:	68fb      	ldr	r3, [r7, #12]
    13f0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
    13f4:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
    13f6:	687b      	ldr	r3, [r7, #4]
    13f8:	00db      	lsls	r3, r3, #3
    13fa:	68fa      	ldr	r2, [r7, #12]
    13fc:	4313      	orrs	r3, r2
    13fe:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1400:	4a03      	ldr	r2, [pc, #12]	; (1410 <RCC_PCLK2Config+0x34>)
    1402:	68fb      	ldr	r3, [r7, #12]
    1404:	6053      	str	r3, [r2, #4]
}
    1406:	bf00      	nop
    1408:	3714      	adds	r7, #20
    140a:	46bd      	mov	sp, r7
    140c:	bc80      	pop	{r7}
    140e:	4770      	bx	lr
    1410:	40021000 	.word	0x40021000

00001414 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
    1414:	b480      	push	{r7}
    1416:	b083      	sub	sp, #12
    1418:	af00      	add	r7, sp, #0
    141a:	4603      	mov	r3, r0
    141c:	460a      	mov	r2, r1
    141e:	71fb      	strb	r3, [r7, #7]
    1420:	4613      	mov	r3, r2
    1422:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1424:	79bb      	ldrb	r3, [r7, #6]
    1426:	2b00      	cmp	r3, #0
    1428:	d008      	beq.n	143c <RCC_ITConfig+0x28>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
    142a:	4b0c      	ldr	r3, [pc, #48]	; (145c <RCC_ITConfig+0x48>)
    142c:	781b      	ldrb	r3, [r3, #0]
    142e:	b2da      	uxtb	r2, r3
    1430:	490a      	ldr	r1, [pc, #40]	; (145c <RCC_ITConfig+0x48>)
    1432:	79fb      	ldrb	r3, [r7, #7]
    1434:	4313      	orrs	r3, r2
    1436:	b2db      	uxtb	r3, r3
    1438:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
    143a:	e009      	b.n	1450 <RCC_ITConfig+0x3c>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
    143c:	4b07      	ldr	r3, [pc, #28]	; (145c <RCC_ITConfig+0x48>)
    143e:	781b      	ldrb	r3, [r3, #0]
    1440:	b2da      	uxtb	r2, r3
    1442:	79fb      	ldrb	r3, [r7, #7]
    1444:	43db      	mvns	r3, r3
    1446:	b2db      	uxtb	r3, r3
    1448:	4904      	ldr	r1, [pc, #16]	; (145c <RCC_ITConfig+0x48>)
    144a:	4013      	ands	r3, r2
    144c:	b2db      	uxtb	r3, r3
    144e:	700b      	strb	r3, [r1, #0]
}
    1450:	bf00      	nop
    1452:	370c      	adds	r7, #12
    1454:	46bd      	mov	sp, r7
    1456:	bc80      	pop	{r7}
    1458:	4770      	bx	lr
    145a:	bf00      	nop
    145c:	40021009 	.word	0x40021009

00001460 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
    1460:	b480      	push	{r7}
    1462:	b083      	sub	sp, #12
    1464:	af00      	add	r7, sp, #0
    1466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
    1468:	4a03      	ldr	r2, [pc, #12]	; (1478 <RCC_USBCLKConfig+0x18>)
    146a:	687b      	ldr	r3, [r7, #4]
    146c:	6013      	str	r3, [r2, #0]
}
    146e:	bf00      	nop
    1470:	370c      	adds	r7, #12
    1472:	46bd      	mov	sp, r7
    1474:	bc80      	pop	{r7}
    1476:	4770      	bx	lr
    1478:	424200d8 	.word	0x424200d8

0000147c <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
    147c:	b480      	push	{r7}
    147e:	b085      	sub	sp, #20
    1480:	af00      	add	r7, sp, #0
    1482:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1484:	2300      	movs	r3, #0
    1486:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
    1488:	4b09      	ldr	r3, [pc, #36]	; (14b0 <RCC_ADCCLKConfig+0x34>)
    148a:	685b      	ldr	r3, [r3, #4]
    148c:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
    148e:	68fb      	ldr	r3, [r7, #12]
    1490:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    1494:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
    1496:	68fa      	ldr	r2, [r7, #12]
    1498:	687b      	ldr	r3, [r7, #4]
    149a:	4313      	orrs	r3, r2
    149c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    149e:	4a04      	ldr	r2, [pc, #16]	; (14b0 <RCC_ADCCLKConfig+0x34>)
    14a0:	68fb      	ldr	r3, [r7, #12]
    14a2:	6053      	str	r3, [r2, #4]
}
    14a4:	bf00      	nop
    14a6:	3714      	adds	r7, #20
    14a8:	46bd      	mov	sp, r7
    14aa:	bc80      	pop	{r7}
    14ac:	4770      	bx	lr
    14ae:	bf00      	nop
    14b0:	40021000 	.word	0x40021000

000014b4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
    14b4:	b480      	push	{r7}
    14b6:	b083      	sub	sp, #12
    14b8:	af00      	add	r7, sp, #0
    14ba:	4603      	mov	r3, r0
    14bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
    14be:	4b0c      	ldr	r3, [pc, #48]	; (14f0 <RCC_LSEConfig+0x3c>)
    14c0:	2200      	movs	r2, #0
    14c2:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
    14c4:	4b0a      	ldr	r3, [pc, #40]	; (14f0 <RCC_LSEConfig+0x3c>)
    14c6:	2200      	movs	r2, #0
    14c8:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
    14ca:	79fb      	ldrb	r3, [r7, #7]
    14cc:	2b01      	cmp	r3, #1
    14ce:	d002      	beq.n	14d6 <RCC_LSEConfig+0x22>
    14d0:	2b04      	cmp	r3, #4
    14d2:	d004      	beq.n	14de <RCC_LSEConfig+0x2a>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;            
      
    default:
      break;      
    14d4:	e007      	b.n	14e6 <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
    14d6:	4b06      	ldr	r3, [pc, #24]	; (14f0 <RCC_LSEConfig+0x3c>)
    14d8:	2201      	movs	r2, #1
    14da:	701a      	strb	r2, [r3, #0]
      break;
    14dc:	e003      	b.n	14e6 <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
    14de:	4b04      	ldr	r3, [pc, #16]	; (14f0 <RCC_LSEConfig+0x3c>)
    14e0:	2205      	movs	r2, #5
    14e2:	701a      	strb	r2, [r3, #0]
      break;            
    14e4:	bf00      	nop
  }
}
    14e6:	bf00      	nop
    14e8:	370c      	adds	r7, #12
    14ea:	46bd      	mov	sp, r7
    14ec:	bc80      	pop	{r7}
    14ee:	4770      	bx	lr
    14f0:	40021020 	.word	0x40021020

000014f4 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
    14f4:	b480      	push	{r7}
    14f6:	b083      	sub	sp, #12
    14f8:	af00      	add	r7, sp, #0
    14fa:	4603      	mov	r3, r0
    14fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
    14fe:	4a04      	ldr	r2, [pc, #16]	; (1510 <RCC_LSICmd+0x1c>)
    1500:	79fb      	ldrb	r3, [r7, #7]
    1502:	6013      	str	r3, [r2, #0]
}
    1504:	bf00      	nop
    1506:	370c      	adds	r7, #12
    1508:	46bd      	mov	sp, r7
    150a:	bc80      	pop	{r7}
    150c:	4770      	bx	lr
    150e:	bf00      	nop
    1510:	42420480 	.word	0x42420480

00001514 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
    1514:	b480      	push	{r7}
    1516:	b083      	sub	sp, #12
    1518:	af00      	add	r7, sp, #0
    151a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
    151c:	4b05      	ldr	r3, [pc, #20]	; (1534 <RCC_RTCCLKConfig+0x20>)
    151e:	6a1a      	ldr	r2, [r3, #32]
    1520:	4904      	ldr	r1, [pc, #16]	; (1534 <RCC_RTCCLKConfig+0x20>)
    1522:	687b      	ldr	r3, [r7, #4]
    1524:	4313      	orrs	r3, r2
    1526:	620b      	str	r3, [r1, #32]
}
    1528:	bf00      	nop
    152a:	370c      	adds	r7, #12
    152c:	46bd      	mov	sp, r7
    152e:	bc80      	pop	{r7}
    1530:	4770      	bx	lr
    1532:	bf00      	nop
    1534:	40021000 	.word	0x40021000

00001538 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
    1538:	b480      	push	{r7}
    153a:	b083      	sub	sp, #12
    153c:	af00      	add	r7, sp, #0
    153e:	4603      	mov	r3, r0
    1540:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
    1542:	4a04      	ldr	r2, [pc, #16]	; (1554 <RCC_RTCCLKCmd+0x1c>)
    1544:	79fb      	ldrb	r3, [r7, #7]
    1546:	6013      	str	r3, [r2, #0]
}
    1548:	bf00      	nop
    154a:	370c      	adds	r7, #12
    154c:	46bd      	mov	sp, r7
    154e:	bc80      	pop	{r7}
    1550:	4770      	bx	lr
    1552:	bf00      	nop
    1554:	4242043c 	.word	0x4242043c

00001558 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
    1558:	b480      	push	{r7}
    155a:	b087      	sub	sp, #28
    155c:	af00      	add	r7, sp, #0
    155e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
    1560:	2300      	movs	r3, #0
    1562:	617b      	str	r3, [r7, #20]
    1564:	2300      	movs	r3, #0
    1566:	613b      	str	r3, [r7, #16]
    1568:	2300      	movs	r3, #0
    156a:	60fb      	str	r3, [r7, #12]
    156c:	2300      	movs	r3, #0
    156e:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
    1570:	4b4f      	ldr	r3, [pc, #316]	; (16b0 <RCC_GetClocksFreq+0x158>)
    1572:	685b      	ldr	r3, [r3, #4]
    1574:	f003 030c 	and.w	r3, r3, #12
    1578:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
    157a:	697b      	ldr	r3, [r7, #20]
    157c:	2b08      	cmp	r3, #8
    157e:	d011      	beq.n	15a4 <RCC_GetClocksFreq+0x4c>
    1580:	697b      	ldr	r3, [r7, #20]
    1582:	2b08      	cmp	r3, #8
    1584:	d83a      	bhi.n	15fc <RCC_GetClocksFreq+0xa4>
    1586:	697b      	ldr	r3, [r7, #20]
    1588:	2b00      	cmp	r3, #0
    158a:	d003      	beq.n	1594 <RCC_GetClocksFreq+0x3c>
    158c:	697b      	ldr	r3, [r7, #20]
    158e:	2b04      	cmp	r3, #4
    1590:	d004      	beq.n	159c <RCC_GetClocksFreq+0x44>
    1592:	e033      	b.n	15fc <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
    1594:	687b      	ldr	r3, [r7, #4]
    1596:	4a47      	ldr	r2, [pc, #284]	; (16b4 <RCC_GetClocksFreq+0x15c>)
    1598:	601a      	str	r2, [r3, #0]
      break;
    159a:	e033      	b.n	1604 <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
    159c:	687b      	ldr	r3, [r7, #4]
    159e:	4a45      	ldr	r2, [pc, #276]	; (16b4 <RCC_GetClocksFreq+0x15c>)
    15a0:	601a      	str	r2, [r3, #0]
      break;
    15a2:	e02f      	b.n	1604 <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
    15a4:	4b42      	ldr	r3, [pc, #264]	; (16b0 <RCC_GetClocksFreq+0x158>)
    15a6:	685b      	ldr	r3, [r3, #4]
    15a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    15ac:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
    15ae:	4b40      	ldr	r3, [pc, #256]	; (16b0 <RCC_GetClocksFreq+0x158>)
    15b0:	685b      	ldr	r3, [r3, #4]
    15b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    15b6:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
    15b8:	693b      	ldr	r3, [r7, #16]
    15ba:	0c9b      	lsrs	r3, r3, #18
    15bc:	3302      	adds	r3, #2
    15be:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
    15c0:	68fb      	ldr	r3, [r7, #12]
    15c2:	2b00      	cmp	r3, #0
    15c4:	d106      	bne.n	15d4 <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
    15c6:	693b      	ldr	r3, [r7, #16]
    15c8:	4a3b      	ldr	r2, [pc, #236]	; (16b8 <RCC_GetClocksFreq+0x160>)
    15ca:	fb03 f202 	mul.w	r2, r3, r2
    15ce:	687b      	ldr	r3, [r7, #4]
    15d0:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
    15d2:	e017      	b.n	1604 <RCC_GetClocksFreq+0xac>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
    15d4:	4b36      	ldr	r3, [pc, #216]	; (16b0 <RCC_GetClocksFreq+0x158>)
    15d6:	685b      	ldr	r3, [r3, #4]
    15d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    15dc:	2b00      	cmp	r3, #0
    15de:	d006      	beq.n	15ee <RCC_GetClocksFreq+0x96>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
    15e0:	693b      	ldr	r3, [r7, #16]
    15e2:	4a35      	ldr	r2, [pc, #212]	; (16b8 <RCC_GetClocksFreq+0x160>)
    15e4:	fb03 f202 	mul.w	r2, r3, r2
    15e8:	687b      	ldr	r3, [r7, #4]
    15ea:	601a      	str	r2, [r3, #0]
      break;
    15ec:	e00a      	b.n	1604 <RCC_GetClocksFreq+0xac>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
    15ee:	693b      	ldr	r3, [r7, #16]
    15f0:	4a30      	ldr	r2, [pc, #192]	; (16b4 <RCC_GetClocksFreq+0x15c>)
    15f2:	fb03 f202 	mul.w	r2, r3, r2
    15f6:	687b      	ldr	r3, [r7, #4]
    15f8:	601a      	str	r2, [r3, #0]
      break;
    15fa:	e003      	b.n	1604 <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
    15fc:	687b      	ldr	r3, [r7, #4]
    15fe:	4a2d      	ldr	r2, [pc, #180]	; (16b4 <RCC_GetClocksFreq+0x15c>)
    1600:	601a      	str	r2, [r3, #0]
      break;
    1602:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
    1604:	4b2a      	ldr	r3, [pc, #168]	; (16b0 <RCC_GetClocksFreq+0x158>)
    1606:	685b      	ldr	r3, [r3, #4]
    1608:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    160c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
    160e:	697b      	ldr	r3, [r7, #20]
    1610:	091b      	lsrs	r3, r3, #4
    1612:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
    1614:	4a29      	ldr	r2, [pc, #164]	; (16bc <RCC_GetClocksFreq+0x164>)
    1616:	697b      	ldr	r3, [r7, #20]
    1618:	4413      	add	r3, r2
    161a:	781b      	ldrb	r3, [r3, #0]
    161c:	b2db      	uxtb	r3, r3
    161e:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
    1620:	687b      	ldr	r3, [r7, #4]
    1622:	681a      	ldr	r2, [r3, #0]
    1624:	68bb      	ldr	r3, [r7, #8]
    1626:	40da      	lsrs	r2, r3
    1628:	687b      	ldr	r3, [r7, #4]
    162a:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
    162c:	4b20      	ldr	r3, [pc, #128]	; (16b0 <RCC_GetClocksFreq+0x158>)
    162e:	685b      	ldr	r3, [r3, #4]
    1630:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    1634:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
    1636:	697b      	ldr	r3, [r7, #20]
    1638:	0a1b      	lsrs	r3, r3, #8
    163a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
    163c:	4a1f      	ldr	r2, [pc, #124]	; (16bc <RCC_GetClocksFreq+0x164>)
    163e:	697b      	ldr	r3, [r7, #20]
    1640:	4413      	add	r3, r2
    1642:	781b      	ldrb	r3, [r3, #0]
    1644:	b2db      	uxtb	r3, r3
    1646:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    1648:	687b      	ldr	r3, [r7, #4]
    164a:	685a      	ldr	r2, [r3, #4]
    164c:	68bb      	ldr	r3, [r7, #8]
    164e:	40da      	lsrs	r2, r3
    1650:	687b      	ldr	r3, [r7, #4]
    1652:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
    1654:	4b16      	ldr	r3, [pc, #88]	; (16b0 <RCC_GetClocksFreq+0x158>)
    1656:	685b      	ldr	r3, [r3, #4]
    1658:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
    165c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
    165e:	697b      	ldr	r3, [r7, #20]
    1660:	0adb      	lsrs	r3, r3, #11
    1662:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
    1664:	4a15      	ldr	r2, [pc, #84]	; (16bc <RCC_GetClocksFreq+0x164>)
    1666:	697b      	ldr	r3, [r7, #20]
    1668:	4413      	add	r3, r2
    166a:	781b      	ldrb	r3, [r3, #0]
    166c:	b2db      	uxtb	r3, r3
    166e:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    1670:	687b      	ldr	r3, [r7, #4]
    1672:	685a      	ldr	r2, [r3, #4]
    1674:	68bb      	ldr	r3, [r7, #8]
    1676:	40da      	lsrs	r2, r3
    1678:	687b      	ldr	r3, [r7, #4]
    167a:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
    167c:	4b0c      	ldr	r3, [pc, #48]	; (16b0 <RCC_GetClocksFreq+0x158>)
    167e:	685b      	ldr	r3, [r3, #4]
    1680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    1684:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
    1686:	697b      	ldr	r3, [r7, #20]
    1688:	0b9b      	lsrs	r3, r3, #14
    168a:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
    168c:	4a0c      	ldr	r2, [pc, #48]	; (16c0 <RCC_GetClocksFreq+0x168>)
    168e:	697b      	ldr	r3, [r7, #20]
    1690:	4413      	add	r3, r2
    1692:	781b      	ldrb	r3, [r3, #0]
    1694:	b2db      	uxtb	r3, r3
    1696:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
    1698:	687b      	ldr	r3, [r7, #4]
    169a:	68da      	ldr	r2, [r3, #12]
    169c:	68bb      	ldr	r3, [r7, #8]
    169e:	fbb2 f2f3 	udiv	r2, r2, r3
    16a2:	687b      	ldr	r3, [r7, #4]
    16a4:	611a      	str	r2, [r3, #16]
}
    16a6:	bf00      	nop
    16a8:	371c      	adds	r7, #28
    16aa:	46bd      	mov	sp, r7
    16ac:	bc80      	pop	{r7}
    16ae:	4770      	bx	lr
    16b0:	40021000 	.word	0x40021000
    16b4:	007a1200 	.word	0x007a1200
    16b8:	003d0900 	.word	0x003d0900
    16bc:	20000014 	.word	0x20000014
    16c0:	20000024 	.word	0x20000024

000016c4 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
    16c4:	b480      	push	{r7}
    16c6:	b083      	sub	sp, #12
    16c8:	af00      	add	r7, sp, #0
    16ca:	6078      	str	r0, [r7, #4]
    16cc:	460b      	mov	r3, r1
    16ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    16d0:	78fb      	ldrb	r3, [r7, #3]
    16d2:	2b00      	cmp	r3, #0
    16d4:	d006      	beq.n	16e4 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
    16d6:	4b09      	ldr	r3, [pc, #36]	; (16fc <RCC_AHBPeriphClockCmd+0x38>)
    16d8:	695a      	ldr	r2, [r3, #20]
    16da:	4908      	ldr	r1, [pc, #32]	; (16fc <RCC_AHBPeriphClockCmd+0x38>)
    16dc:	687b      	ldr	r3, [r7, #4]
    16de:	4313      	orrs	r3, r2
    16e0:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
    16e2:	e006      	b.n	16f2 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
    16e4:	4b05      	ldr	r3, [pc, #20]	; (16fc <RCC_AHBPeriphClockCmd+0x38>)
    16e6:	695a      	ldr	r2, [r3, #20]
    16e8:	687b      	ldr	r3, [r7, #4]
    16ea:	43db      	mvns	r3, r3
    16ec:	4903      	ldr	r1, [pc, #12]	; (16fc <RCC_AHBPeriphClockCmd+0x38>)
    16ee:	4013      	ands	r3, r2
    16f0:	614b      	str	r3, [r1, #20]
}
    16f2:	bf00      	nop
    16f4:	370c      	adds	r7, #12
    16f6:	46bd      	mov	sp, r7
    16f8:	bc80      	pop	{r7}
    16fa:	4770      	bx	lr
    16fc:	40021000 	.word	0x40021000

00001700 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    1700:	b480      	push	{r7}
    1702:	b083      	sub	sp, #12
    1704:	af00      	add	r7, sp, #0
    1706:	6078      	str	r0, [r7, #4]
    1708:	460b      	mov	r3, r1
    170a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    170c:	78fb      	ldrb	r3, [r7, #3]
    170e:	2b00      	cmp	r3, #0
    1710:	d006      	beq.n	1720 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
    1712:	4b09      	ldr	r3, [pc, #36]	; (1738 <RCC_APB2PeriphClockCmd+0x38>)
    1714:	699a      	ldr	r2, [r3, #24]
    1716:	4908      	ldr	r1, [pc, #32]	; (1738 <RCC_APB2PeriphClockCmd+0x38>)
    1718:	687b      	ldr	r3, [r7, #4]
    171a:	4313      	orrs	r3, r2
    171c:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
    171e:	e006      	b.n	172e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
    1720:	4b05      	ldr	r3, [pc, #20]	; (1738 <RCC_APB2PeriphClockCmd+0x38>)
    1722:	699a      	ldr	r2, [r3, #24]
    1724:	687b      	ldr	r3, [r7, #4]
    1726:	43db      	mvns	r3, r3
    1728:	4903      	ldr	r1, [pc, #12]	; (1738 <RCC_APB2PeriphClockCmd+0x38>)
    172a:	4013      	ands	r3, r2
    172c:	618b      	str	r3, [r1, #24]
}
    172e:	bf00      	nop
    1730:	370c      	adds	r7, #12
    1732:	46bd      	mov	sp, r7
    1734:	bc80      	pop	{r7}
    1736:	4770      	bx	lr
    1738:	40021000 	.word	0x40021000

0000173c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    173c:	b480      	push	{r7}
    173e:	b083      	sub	sp, #12
    1740:	af00      	add	r7, sp, #0
    1742:	6078      	str	r0, [r7, #4]
    1744:	460b      	mov	r3, r1
    1746:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1748:	78fb      	ldrb	r3, [r7, #3]
    174a:	2b00      	cmp	r3, #0
    174c:	d006      	beq.n	175c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
    174e:	4b09      	ldr	r3, [pc, #36]	; (1774 <RCC_APB1PeriphClockCmd+0x38>)
    1750:	69da      	ldr	r2, [r3, #28]
    1752:	4908      	ldr	r1, [pc, #32]	; (1774 <RCC_APB1PeriphClockCmd+0x38>)
    1754:	687b      	ldr	r3, [r7, #4]
    1756:	4313      	orrs	r3, r2
    1758:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
    175a:	e006      	b.n	176a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
    175c:	4b05      	ldr	r3, [pc, #20]	; (1774 <RCC_APB1PeriphClockCmd+0x38>)
    175e:	69da      	ldr	r2, [r3, #28]
    1760:	687b      	ldr	r3, [r7, #4]
    1762:	43db      	mvns	r3, r3
    1764:	4903      	ldr	r1, [pc, #12]	; (1774 <RCC_APB1PeriphClockCmd+0x38>)
    1766:	4013      	ands	r3, r2
    1768:	61cb      	str	r3, [r1, #28]
}
    176a:	bf00      	nop
    176c:	370c      	adds	r7, #12
    176e:	46bd      	mov	sp, r7
    1770:	bc80      	pop	{r7}
    1772:	4770      	bx	lr
    1774:	40021000 	.word	0x40021000

00001778 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    1778:	b480      	push	{r7}
    177a:	b083      	sub	sp, #12
    177c:	af00      	add	r7, sp, #0
    177e:	6078      	str	r0, [r7, #4]
    1780:	460b      	mov	r3, r1
    1782:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1784:	78fb      	ldrb	r3, [r7, #3]
    1786:	2b00      	cmp	r3, #0
    1788:	d006      	beq.n	1798 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
    178a:	4b09      	ldr	r3, [pc, #36]	; (17b0 <RCC_APB2PeriphResetCmd+0x38>)
    178c:	68da      	ldr	r2, [r3, #12]
    178e:	4908      	ldr	r1, [pc, #32]	; (17b0 <RCC_APB2PeriphResetCmd+0x38>)
    1790:	687b      	ldr	r3, [r7, #4]
    1792:	4313      	orrs	r3, r2
    1794:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
    1796:	e006      	b.n	17a6 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
    1798:	4b05      	ldr	r3, [pc, #20]	; (17b0 <RCC_APB2PeriphResetCmd+0x38>)
    179a:	68da      	ldr	r2, [r3, #12]
    179c:	687b      	ldr	r3, [r7, #4]
    179e:	43db      	mvns	r3, r3
    17a0:	4903      	ldr	r1, [pc, #12]	; (17b0 <RCC_APB2PeriphResetCmd+0x38>)
    17a2:	4013      	ands	r3, r2
    17a4:	60cb      	str	r3, [r1, #12]
}
    17a6:	bf00      	nop
    17a8:	370c      	adds	r7, #12
    17aa:	46bd      	mov	sp, r7
    17ac:	bc80      	pop	{r7}
    17ae:	4770      	bx	lr
    17b0:	40021000 	.word	0x40021000

000017b4 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    17b4:	b480      	push	{r7}
    17b6:	b083      	sub	sp, #12
    17b8:	af00      	add	r7, sp, #0
    17ba:	6078      	str	r0, [r7, #4]
    17bc:	460b      	mov	r3, r1
    17be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    17c0:	78fb      	ldrb	r3, [r7, #3]
    17c2:	2b00      	cmp	r3, #0
    17c4:	d006      	beq.n	17d4 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
    17c6:	4b09      	ldr	r3, [pc, #36]	; (17ec <RCC_APB1PeriphResetCmd+0x38>)
    17c8:	691a      	ldr	r2, [r3, #16]
    17ca:	4908      	ldr	r1, [pc, #32]	; (17ec <RCC_APB1PeriphResetCmd+0x38>)
    17cc:	687b      	ldr	r3, [r7, #4]
    17ce:	4313      	orrs	r3, r2
    17d0:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
    17d2:	e006      	b.n	17e2 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
    17d4:	4b05      	ldr	r3, [pc, #20]	; (17ec <RCC_APB1PeriphResetCmd+0x38>)
    17d6:	691a      	ldr	r2, [r3, #16]
    17d8:	687b      	ldr	r3, [r7, #4]
    17da:	43db      	mvns	r3, r3
    17dc:	4903      	ldr	r1, [pc, #12]	; (17ec <RCC_APB1PeriphResetCmd+0x38>)
    17de:	4013      	ands	r3, r2
    17e0:	610b      	str	r3, [r1, #16]
}
    17e2:	bf00      	nop
    17e4:	370c      	adds	r7, #12
    17e6:	46bd      	mov	sp, r7
    17e8:	bc80      	pop	{r7}
    17ea:	4770      	bx	lr
    17ec:	40021000 	.word	0x40021000

000017f0 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
    17f0:	b480      	push	{r7}
    17f2:	b083      	sub	sp, #12
    17f4:	af00      	add	r7, sp, #0
    17f6:	4603      	mov	r3, r0
    17f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
    17fa:	4a04      	ldr	r2, [pc, #16]	; (180c <RCC_BackupResetCmd+0x1c>)
    17fc:	79fb      	ldrb	r3, [r7, #7]
    17fe:	6013      	str	r3, [r2, #0]
}
    1800:	bf00      	nop
    1802:	370c      	adds	r7, #12
    1804:	46bd      	mov	sp, r7
    1806:	bc80      	pop	{r7}
    1808:	4770      	bx	lr
    180a:	bf00      	nop
    180c:	42420440 	.word	0x42420440

00001810 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
    1810:	b480      	push	{r7}
    1812:	b083      	sub	sp, #12
    1814:	af00      	add	r7, sp, #0
    1816:	4603      	mov	r3, r0
    1818:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
    181a:	4a04      	ldr	r2, [pc, #16]	; (182c <RCC_ClockSecuritySystemCmd+0x1c>)
    181c:	79fb      	ldrb	r3, [r7, #7]
    181e:	6013      	str	r3, [r2, #0]
}
    1820:	bf00      	nop
    1822:	370c      	adds	r7, #12
    1824:	46bd      	mov	sp, r7
    1826:	bc80      	pop	{r7}
    1828:	4770      	bx	lr
    182a:	bf00      	nop
    182c:	4242004c 	.word	0x4242004c

00001830 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
    1830:	b480      	push	{r7}
    1832:	b083      	sub	sp, #12
    1834:	af00      	add	r7, sp, #0
    1836:	4603      	mov	r3, r0
    1838:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
    183a:	4a04      	ldr	r2, [pc, #16]	; (184c <RCC_MCOConfig+0x1c>)
    183c:	79fb      	ldrb	r3, [r7, #7]
    183e:	7013      	strb	r3, [r2, #0]
}
    1840:	bf00      	nop
    1842:	370c      	adds	r7, #12
    1844:	46bd      	mov	sp, r7
    1846:	bc80      	pop	{r7}
    1848:	4770      	bx	lr
    184a:	bf00      	nop
    184c:	40021007 	.word	0x40021007

00001850 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
    1850:	b480      	push	{r7}
    1852:	b087      	sub	sp, #28
    1854:	af00      	add	r7, sp, #0
    1856:	4603      	mov	r3, r0
    1858:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
    185a:	2300      	movs	r3, #0
    185c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
    185e:	2300      	movs	r3, #0
    1860:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
    1862:	2300      	movs	r3, #0
    1864:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
    1866:	79fb      	ldrb	r3, [r7, #7]
    1868:	095b      	lsrs	r3, r3, #5
    186a:	b2db      	uxtb	r3, r3
    186c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
    186e:	68fb      	ldr	r3, [r7, #12]
    1870:	2b01      	cmp	r3, #1
    1872:	d103      	bne.n	187c <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
    1874:	4b12      	ldr	r3, [pc, #72]	; (18c0 <RCC_GetFlagStatus+0x70>)
    1876:	681b      	ldr	r3, [r3, #0]
    1878:	617b      	str	r3, [r7, #20]
    187a:	e009      	b.n	1890 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
    187c:	68fb      	ldr	r3, [r7, #12]
    187e:	2b02      	cmp	r3, #2
    1880:	d103      	bne.n	188a <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
    1882:	4b0f      	ldr	r3, [pc, #60]	; (18c0 <RCC_GetFlagStatus+0x70>)
    1884:	6a1b      	ldr	r3, [r3, #32]
    1886:	617b      	str	r3, [r7, #20]
    1888:	e002      	b.n	1890 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
    188a:	4b0d      	ldr	r3, [pc, #52]	; (18c0 <RCC_GetFlagStatus+0x70>)
    188c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    188e:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
    1890:	79fb      	ldrb	r3, [r7, #7]
    1892:	f003 031f 	and.w	r3, r3, #31
    1896:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
    1898:	697a      	ldr	r2, [r7, #20]
    189a:	68fb      	ldr	r3, [r7, #12]
    189c:	fa22 f303 	lsr.w	r3, r2, r3
    18a0:	f003 0301 	and.w	r3, r3, #1
    18a4:	2b00      	cmp	r3, #0
    18a6:	d002      	beq.n	18ae <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
    18a8:	2301      	movs	r3, #1
    18aa:	74fb      	strb	r3, [r7, #19]
    18ac:	e001      	b.n	18b2 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
    18ae:	2300      	movs	r3, #0
    18b0:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
    18b2:	7cfb      	ldrb	r3, [r7, #19]
}
    18b4:	4618      	mov	r0, r3
    18b6:	371c      	adds	r7, #28
    18b8:	46bd      	mov	sp, r7
    18ba:	bc80      	pop	{r7}
    18bc:	4770      	bx	lr
    18be:	bf00      	nop
    18c0:	40021000 	.word	0x40021000

000018c4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
    18c4:	b480      	push	{r7}
    18c6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
    18c8:	4b04      	ldr	r3, [pc, #16]	; (18dc <RCC_ClearFlag+0x18>)
    18ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    18cc:	4a03      	ldr	r2, [pc, #12]	; (18dc <RCC_ClearFlag+0x18>)
    18ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    18d2:	6253      	str	r3, [r2, #36]	; 0x24
}
    18d4:	bf00      	nop
    18d6:	46bd      	mov	sp, r7
    18d8:	bc80      	pop	{r7}
    18da:	4770      	bx	lr
    18dc:	40021000 	.word	0x40021000

000018e0 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *   
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    18e0:	b480      	push	{r7}
    18e2:	b085      	sub	sp, #20
    18e4:	af00      	add	r7, sp, #0
    18e6:	4603      	mov	r3, r0
    18e8:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    18ea:	2300      	movs	r3, #0
    18ec:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    18ee:	4b08      	ldr	r3, [pc, #32]	; (1910 <RCC_GetITStatus+0x30>)
    18f0:	689a      	ldr	r2, [r3, #8]
    18f2:	79fb      	ldrb	r3, [r7, #7]
    18f4:	4013      	ands	r3, r2
    18f6:	2b00      	cmp	r3, #0
    18f8:	d002      	beq.n	1900 <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
    18fa:	2301      	movs	r3, #1
    18fc:	73fb      	strb	r3, [r7, #15]
    18fe:	e001      	b.n	1904 <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
    1900:	2300      	movs	r3, #0
    1902:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1904:	7bfb      	ldrb	r3, [r7, #15]
}
    1906:	4618      	mov	r0, r3
    1908:	3714      	adds	r7, #20
    190a:	46bd      	mov	sp, r7
    190c:	bc80      	pop	{r7}
    190e:	4770      	bx	lr
    1910:	40021000 	.word	0x40021000

00001914 <RCC_ClearITPendingBit>:
  *   
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1914:	b480      	push	{r7}
    1916:	b083      	sub	sp, #12
    1918:	af00      	add	r7, sp, #0
    191a:	4603      	mov	r3, r0
    191c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    191e:	4a04      	ldr	r2, [pc, #16]	; (1930 <RCC_ClearITPendingBit+0x1c>)
    1920:	79fb      	ldrb	r3, [r7, #7]
    1922:	7013      	strb	r3, [r2, #0]
}
    1924:	bf00      	nop
    1926:	370c      	adds	r7, #12
    1928:	46bd      	mov	sp, r7
    192a:	bc80      	pop	{r7}
    192c:	4770      	bx	lr
    192e:	bf00      	nop
    1930:	4002100a 	.word	0x4002100a

00001934 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1934:	b580      	push	{r7, lr}
    1936:	b082      	sub	sp, #8
    1938:	af00      	add	r7, sp, #0
    193a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
    193c:	687b      	ldr	r3, [r7, #4]
    193e:	4a2f      	ldr	r2, [pc, #188]	; (19fc <GPIO_DeInit+0xc8>)
    1940:	4293      	cmp	r3, r2
    1942:	d108      	bne.n	1956 <GPIO_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1944:	2101      	movs	r1, #1
    1946:	2004      	movs	r0, #4
    1948:	f7ff ff16 	bl	1778 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    194c:	2100      	movs	r1, #0
    194e:	2004      	movs	r0, #4
    1950:	f7ff ff12 	bl	1778 <RCC_APB2PeriphResetCmd>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
    1954:	e04e      	b.n	19f4 <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOB)
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	4a29      	ldr	r2, [pc, #164]	; (1a00 <GPIO_DeInit+0xcc>)
    195a:	4293      	cmp	r3, r2
    195c:	d108      	bne.n	1970 <GPIO_DeInit+0x3c>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    195e:	2101      	movs	r1, #1
    1960:	2008      	movs	r0, #8
    1962:	f7ff ff09 	bl	1778 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    1966:	2100      	movs	r1, #0
    1968:	2008      	movs	r0, #8
    196a:	f7ff ff05 	bl	1778 <RCC_APB2PeriphResetCmd>
}
    196e:	e041      	b.n	19f4 <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOC)
    1970:	687b      	ldr	r3, [r7, #4]
    1972:	4a24      	ldr	r2, [pc, #144]	; (1a04 <GPIO_DeInit+0xd0>)
    1974:	4293      	cmp	r3, r2
    1976:	d108      	bne.n	198a <GPIO_DeInit+0x56>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    1978:	2101      	movs	r1, #1
    197a:	2010      	movs	r0, #16
    197c:	f7ff fefc 	bl	1778 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    1980:	2100      	movs	r1, #0
    1982:	2010      	movs	r0, #16
    1984:	f7ff fef8 	bl	1778 <RCC_APB2PeriphResetCmd>
}
    1988:	e034      	b.n	19f4 <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOD)
    198a:	687b      	ldr	r3, [r7, #4]
    198c:	4a1e      	ldr	r2, [pc, #120]	; (1a08 <GPIO_DeInit+0xd4>)
    198e:	4293      	cmp	r3, r2
    1990:	d108      	bne.n	19a4 <GPIO_DeInit+0x70>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    1992:	2101      	movs	r1, #1
    1994:	2020      	movs	r0, #32
    1996:	f7ff feef 	bl	1778 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    199a:	2100      	movs	r1, #0
    199c:	2020      	movs	r0, #32
    199e:	f7ff feeb 	bl	1778 <RCC_APB2PeriphResetCmd>
}
    19a2:	e027      	b.n	19f4 <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOE)
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	4a19      	ldr	r2, [pc, #100]	; (1a0c <GPIO_DeInit+0xd8>)
    19a8:	4293      	cmp	r3, r2
    19aa:	d108      	bne.n	19be <GPIO_DeInit+0x8a>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    19ac:	2101      	movs	r1, #1
    19ae:	2040      	movs	r0, #64	; 0x40
    19b0:	f7ff fee2 	bl	1778 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    19b4:	2100      	movs	r1, #0
    19b6:	2040      	movs	r0, #64	; 0x40
    19b8:	f7ff fede 	bl	1778 <RCC_APB2PeriphResetCmd>
}
    19bc:	e01a      	b.n	19f4 <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOF)
    19be:	687b      	ldr	r3, [r7, #4]
    19c0:	4a13      	ldr	r2, [pc, #76]	; (1a10 <GPIO_DeInit+0xdc>)
    19c2:	4293      	cmp	r3, r2
    19c4:	d108      	bne.n	19d8 <GPIO_DeInit+0xa4>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    19c6:	2101      	movs	r1, #1
    19c8:	2080      	movs	r0, #128	; 0x80
    19ca:	f7ff fed5 	bl	1778 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    19ce:	2100      	movs	r1, #0
    19d0:	2080      	movs	r0, #128	; 0x80
    19d2:	f7ff fed1 	bl	1778 <RCC_APB2PeriphResetCmd>
}
    19d6:	e00d      	b.n	19f4 <GPIO_DeInit+0xc0>
    if (GPIOx == GPIOG)
    19d8:	687b      	ldr	r3, [r7, #4]
    19da:	4a0e      	ldr	r2, [pc, #56]	; (1a14 <GPIO_DeInit+0xe0>)
    19dc:	4293      	cmp	r3, r2
    19de:	d109      	bne.n	19f4 <GPIO_DeInit+0xc0>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    19e0:	2101      	movs	r1, #1
    19e2:	f44f 7080 	mov.w	r0, #256	; 0x100
    19e6:	f7ff fec7 	bl	1778 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    19ea:	2100      	movs	r1, #0
    19ec:	f44f 7080 	mov.w	r0, #256	; 0x100
    19f0:	f7ff fec2 	bl	1778 <RCC_APB2PeriphResetCmd>
}
    19f4:	bf00      	nop
    19f6:	3708      	adds	r7, #8
    19f8:	46bd      	mov	sp, r7
    19fa:	bd80      	pop	{r7, pc}
    19fc:	40010800 	.word	0x40010800
    1a00:	40010c00 	.word	0x40010c00
    1a04:	40011000 	.word	0x40011000
    1a08:	40011400 	.word	0x40011400
    1a0c:	40011800 	.word	0x40011800
    1a10:	40011c00 	.word	0x40011c00
    1a14:	40012000 	.word	0x40012000

00001a18 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1a18:	b580      	push	{r7, lr}
    1a1a:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1a1c:	2101      	movs	r1, #1
    1a1e:	2001      	movs	r0, #1
    1a20:	f7ff feaa 	bl	1778 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    1a24:	2100      	movs	r1, #0
    1a26:	2001      	movs	r0, #1
    1a28:	f7ff fea6 	bl	1778 <RCC_APB2PeriphResetCmd>
}
    1a2c:	bf00      	nop
    1a2e:	bd80      	pop	{r7, pc}

00001a30 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1a30:	b480      	push	{r7}
    1a32:	b089      	sub	sp, #36	; 0x24
    1a34:	af00      	add	r7, sp, #0
    1a36:	6078      	str	r0, [r7, #4]
    1a38:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1a3a:	2300      	movs	r3, #0
    1a3c:	61fb      	str	r3, [r7, #28]
    1a3e:	2300      	movs	r3, #0
    1a40:	613b      	str	r3, [r7, #16]
    1a42:	2300      	movs	r3, #0
    1a44:	61bb      	str	r3, [r7, #24]
    1a46:	2300      	movs	r3, #0
    1a48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1a4a:	2300      	movs	r3, #0
    1a4c:	617b      	str	r3, [r7, #20]
    1a4e:	2300      	movs	r3, #0
    1a50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    1a52:	683b      	ldr	r3, [r7, #0]
    1a54:	78db      	ldrb	r3, [r3, #3]
    1a56:	f003 030f 	and.w	r3, r3, #15
    1a5a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1a5c:	683b      	ldr	r3, [r7, #0]
    1a5e:	78db      	ldrb	r3, [r3, #3]
    1a60:	f003 0310 	and.w	r3, r3, #16
    1a64:	2b00      	cmp	r3, #0
    1a66:	d005      	beq.n	1a74 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    1a68:	683b      	ldr	r3, [r7, #0]
    1a6a:	789b      	ldrb	r3, [r3, #2]
    1a6c:	461a      	mov	r2, r3
    1a6e:	69fb      	ldr	r3, [r7, #28]
    1a70:	4313      	orrs	r3, r2
    1a72:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    1a74:	683b      	ldr	r3, [r7, #0]
    1a76:	881b      	ldrh	r3, [r3, #0]
    1a78:	b2db      	uxtb	r3, r3
    1a7a:	2b00      	cmp	r3, #0
    1a7c:	d044      	beq.n	1b08 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
    1a7e:	687b      	ldr	r3, [r7, #4]
    1a80:	681b      	ldr	r3, [r3, #0]
    1a82:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1a84:	2300      	movs	r3, #0
    1a86:	61bb      	str	r3, [r7, #24]
    1a88:	e038      	b.n	1afc <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
    1a8a:	2201      	movs	r2, #1
    1a8c:	69bb      	ldr	r3, [r7, #24]
    1a8e:	fa02 f303 	lsl.w	r3, r2, r3
    1a92:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    1a94:	683b      	ldr	r3, [r7, #0]
    1a96:	881b      	ldrh	r3, [r3, #0]
    1a98:	461a      	mov	r2, r3
    1a9a:	68fb      	ldr	r3, [r7, #12]
    1a9c:	4013      	ands	r3, r2
    1a9e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    1aa0:	693a      	ldr	r2, [r7, #16]
    1aa2:	68fb      	ldr	r3, [r7, #12]
    1aa4:	429a      	cmp	r2, r3
    1aa6:	d126      	bne.n	1af6 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
    1aa8:	69bb      	ldr	r3, [r7, #24]
    1aaa:	009b      	lsls	r3, r3, #2
    1aac:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1aae:	220f      	movs	r2, #15
    1ab0:	68fb      	ldr	r3, [r7, #12]
    1ab2:	fa02 f303 	lsl.w	r3, r2, r3
    1ab6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1ab8:	68bb      	ldr	r3, [r7, #8]
    1aba:	43db      	mvns	r3, r3
    1abc:	697a      	ldr	r2, [r7, #20]
    1abe:	4013      	ands	r3, r2
    1ac0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    1ac2:	69fa      	ldr	r2, [r7, #28]
    1ac4:	68fb      	ldr	r3, [r7, #12]
    1ac6:	fa02 f303 	lsl.w	r3, r2, r3
    1aca:	697a      	ldr	r2, [r7, #20]
    1acc:	4313      	orrs	r3, r2
    1ace:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1ad0:	683b      	ldr	r3, [r7, #0]
    1ad2:	78db      	ldrb	r3, [r3, #3]
    1ad4:	2b28      	cmp	r3, #40	; 0x28
    1ad6:	d105      	bne.n	1ae4 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    1ad8:	2201      	movs	r2, #1
    1ada:	69bb      	ldr	r3, [r7, #24]
    1adc:	409a      	lsls	r2, r3
    1ade:	687b      	ldr	r3, [r7, #4]
    1ae0:	615a      	str	r2, [r3, #20]
    1ae2:	e008      	b.n	1af6 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    1ae4:	683b      	ldr	r3, [r7, #0]
    1ae6:	78db      	ldrb	r3, [r3, #3]
    1ae8:	2b48      	cmp	r3, #72	; 0x48
    1aea:	d104      	bne.n	1af6 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1aec:	2201      	movs	r2, #1
    1aee:	69bb      	ldr	r3, [r7, #24]
    1af0:	409a      	lsls	r2, r3
    1af2:	687b      	ldr	r3, [r7, #4]
    1af4:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1af6:	69bb      	ldr	r3, [r7, #24]
    1af8:	3301      	adds	r3, #1
    1afa:	61bb      	str	r3, [r7, #24]
    1afc:	69bb      	ldr	r3, [r7, #24]
    1afe:	2b07      	cmp	r3, #7
    1b00:	d9c3      	bls.n	1a8a <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1b02:	687b      	ldr	r3, [r7, #4]
    1b04:	697a      	ldr	r2, [r7, #20]
    1b06:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    1b08:	683b      	ldr	r3, [r7, #0]
    1b0a:	881b      	ldrh	r3, [r3, #0]
    1b0c:	2bff      	cmp	r3, #255	; 0xff
    1b0e:	d946      	bls.n	1b9e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
    1b10:	687b      	ldr	r3, [r7, #4]
    1b12:	685b      	ldr	r3, [r3, #4]
    1b14:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1b16:	2300      	movs	r3, #0
    1b18:	61bb      	str	r3, [r7, #24]
    1b1a:	e03a      	b.n	1b92 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1b1c:	69bb      	ldr	r3, [r7, #24]
    1b1e:	3308      	adds	r3, #8
    1b20:	2201      	movs	r2, #1
    1b22:	fa02 f303 	lsl.w	r3, r2, r3
    1b26:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    1b28:	683b      	ldr	r3, [r7, #0]
    1b2a:	881b      	ldrh	r3, [r3, #0]
    1b2c:	461a      	mov	r2, r3
    1b2e:	68fb      	ldr	r3, [r7, #12]
    1b30:	4013      	ands	r3, r2
    1b32:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    1b34:	693a      	ldr	r2, [r7, #16]
    1b36:	68fb      	ldr	r3, [r7, #12]
    1b38:	429a      	cmp	r2, r3
    1b3a:	d127      	bne.n	1b8c <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
    1b3c:	69bb      	ldr	r3, [r7, #24]
    1b3e:	009b      	lsls	r3, r3, #2
    1b40:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1b42:	220f      	movs	r2, #15
    1b44:	68fb      	ldr	r3, [r7, #12]
    1b46:	fa02 f303 	lsl.w	r3, r2, r3
    1b4a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1b4c:	68bb      	ldr	r3, [r7, #8]
    1b4e:	43db      	mvns	r3, r3
    1b50:	697a      	ldr	r2, [r7, #20]
    1b52:	4013      	ands	r3, r2
    1b54:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    1b56:	69fa      	ldr	r2, [r7, #28]
    1b58:	68fb      	ldr	r3, [r7, #12]
    1b5a:	fa02 f303 	lsl.w	r3, r2, r3
    1b5e:	697a      	ldr	r2, [r7, #20]
    1b60:	4313      	orrs	r3, r2
    1b62:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1b64:	683b      	ldr	r3, [r7, #0]
    1b66:	78db      	ldrb	r3, [r3, #3]
    1b68:	2b28      	cmp	r3, #40	; 0x28
    1b6a:	d105      	bne.n	1b78 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    1b6c:	69bb      	ldr	r3, [r7, #24]
    1b6e:	3308      	adds	r3, #8
    1b70:	2201      	movs	r2, #1
    1b72:	409a      	lsls	r2, r3
    1b74:	687b      	ldr	r3, [r7, #4]
    1b76:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    1b78:	683b      	ldr	r3, [r7, #0]
    1b7a:	78db      	ldrb	r3, [r3, #3]
    1b7c:	2b48      	cmp	r3, #72	; 0x48
    1b7e:	d105      	bne.n	1b8c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    1b80:	69bb      	ldr	r3, [r7, #24]
    1b82:	3308      	adds	r3, #8
    1b84:	2201      	movs	r2, #1
    1b86:	409a      	lsls	r2, r3
    1b88:	687b      	ldr	r3, [r7, #4]
    1b8a:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1b8c:	69bb      	ldr	r3, [r7, #24]
    1b8e:	3301      	adds	r3, #1
    1b90:	61bb      	str	r3, [r7, #24]
    1b92:	69bb      	ldr	r3, [r7, #24]
    1b94:	2b07      	cmp	r3, #7
    1b96:	d9c1      	bls.n	1b1c <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	697a      	ldr	r2, [r7, #20]
    1b9c:	605a      	str	r2, [r3, #4]
  }
}
    1b9e:	bf00      	nop
    1ba0:	3724      	adds	r7, #36	; 0x24
    1ba2:	46bd      	mov	sp, r7
    1ba4:	bc80      	pop	{r7}
    1ba6:	4770      	bx	lr

00001ba8 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    1ba8:	b480      	push	{r7}
    1baa:	b083      	sub	sp, #12
    1bac:	af00      	add	r7, sp, #0
    1bae:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    1bb0:	687b      	ldr	r3, [r7, #4]
    1bb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1bb6:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    1bb8:	687b      	ldr	r3, [r7, #4]
    1bba:	2202      	movs	r2, #2
    1bbc:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    1bbe:	687b      	ldr	r3, [r7, #4]
    1bc0:	2204      	movs	r2, #4
    1bc2:	70da      	strb	r2, [r3, #3]
}
    1bc4:	bf00      	nop
    1bc6:	370c      	adds	r7, #12
    1bc8:	46bd      	mov	sp, r7
    1bca:	bc80      	pop	{r7}
    1bcc:	4770      	bx	lr

00001bce <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1bce:	b480      	push	{r7}
    1bd0:	b085      	sub	sp, #20
    1bd2:	af00      	add	r7, sp, #0
    1bd4:	6078      	str	r0, [r7, #4]
    1bd6:	460b      	mov	r3, r1
    1bd8:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1bda:	2300      	movs	r3, #0
    1bdc:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1bde:	687b      	ldr	r3, [r7, #4]
    1be0:	689a      	ldr	r2, [r3, #8]
    1be2:	887b      	ldrh	r3, [r7, #2]
    1be4:	4013      	ands	r3, r2
    1be6:	2b00      	cmp	r3, #0
    1be8:	d002      	beq.n	1bf0 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1bea:	2301      	movs	r3, #1
    1bec:	73fb      	strb	r3, [r7, #15]
    1bee:	e001      	b.n	1bf4 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    1bf0:	2300      	movs	r3, #0
    1bf2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1bf4:	7bfb      	ldrb	r3, [r7, #15]
}
    1bf6:	4618      	mov	r0, r3
    1bf8:	3714      	adds	r7, #20
    1bfa:	46bd      	mov	sp, r7
    1bfc:	bc80      	pop	{r7}
    1bfe:	4770      	bx	lr

00001c00 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    1c00:	b480      	push	{r7}
    1c02:	b083      	sub	sp, #12
    1c04:	af00      	add	r7, sp, #0
    1c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
    1c08:	687b      	ldr	r3, [r7, #4]
    1c0a:	689b      	ldr	r3, [r3, #8]
    1c0c:	b29b      	uxth	r3, r3
}
    1c0e:	4618      	mov	r0, r3
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	bc80      	pop	{r7}
    1c16:	4770      	bx	lr

00001c18 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1c18:	b480      	push	{r7}
    1c1a:	b085      	sub	sp, #20
    1c1c:	af00      	add	r7, sp, #0
    1c1e:	6078      	str	r0, [r7, #4]
    1c20:	460b      	mov	r3, r1
    1c22:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1c24:	2300      	movs	r3, #0
    1c26:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	68da      	ldr	r2, [r3, #12]
    1c2c:	887b      	ldrh	r3, [r7, #2]
    1c2e:	4013      	ands	r3, r2
    1c30:	2b00      	cmp	r3, #0
    1c32:	d002      	beq.n	1c3a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1c34:	2301      	movs	r3, #1
    1c36:	73fb      	strb	r3, [r7, #15]
    1c38:	e001      	b.n	1c3e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    1c3a:	2300      	movs	r3, #0
    1c3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1c3e:	7bfb      	ldrb	r3, [r7, #15]
}
    1c40:	4618      	mov	r0, r3
    1c42:	3714      	adds	r7, #20
    1c44:	46bd      	mov	sp, r7
    1c46:	bc80      	pop	{r7}
    1c48:	4770      	bx	lr

00001c4a <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    1c4a:	b480      	push	{r7}
    1c4c:	b083      	sub	sp, #12
    1c4e:	af00      	add	r7, sp, #0
    1c50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
    1c52:	687b      	ldr	r3, [r7, #4]
    1c54:	68db      	ldr	r3, [r3, #12]
    1c56:	b29b      	uxth	r3, r3
}
    1c58:	4618      	mov	r0, r3
    1c5a:	370c      	adds	r7, #12
    1c5c:	46bd      	mov	sp, r7
    1c5e:	bc80      	pop	{r7}
    1c60:	4770      	bx	lr

00001c62 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1c62:	b480      	push	{r7}
    1c64:	b083      	sub	sp, #12
    1c66:	af00      	add	r7, sp, #0
    1c68:	6078      	str	r0, [r7, #4]
    1c6a:	460b      	mov	r3, r1
    1c6c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
    1c6e:	887a      	ldrh	r2, [r7, #2]
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	611a      	str	r2, [r3, #16]
}
    1c74:	bf00      	nop
    1c76:	370c      	adds	r7, #12
    1c78:	46bd      	mov	sp, r7
    1c7a:	bc80      	pop	{r7}
    1c7c:	4770      	bx	lr

00001c7e <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1c7e:	b480      	push	{r7}
    1c80:	b083      	sub	sp, #12
    1c82:	af00      	add	r7, sp, #0
    1c84:	6078      	str	r0, [r7, #4]
    1c86:	460b      	mov	r3, r1
    1c88:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
    1c8a:	887a      	ldrh	r2, [r7, #2]
    1c8c:	687b      	ldr	r3, [r7, #4]
    1c8e:	615a      	str	r2, [r3, #20]
}
    1c90:	bf00      	nop
    1c92:	370c      	adds	r7, #12
    1c94:	46bd      	mov	sp, r7
    1c96:	bc80      	pop	{r7}
    1c98:	4770      	bx	lr

00001c9a <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    1c9a:	b480      	push	{r7}
    1c9c:	b083      	sub	sp, #12
    1c9e:	af00      	add	r7, sp, #0
    1ca0:	6078      	str	r0, [r7, #4]
    1ca2:	460b      	mov	r3, r1
    1ca4:	807b      	strh	r3, [r7, #2]
    1ca6:	4613      	mov	r3, r2
    1ca8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
    1caa:	787b      	ldrb	r3, [r7, #1]
    1cac:	2b00      	cmp	r3, #0
    1cae:	d003      	beq.n	1cb8 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    1cb0:	887a      	ldrh	r2, [r7, #2]
    1cb2:	687b      	ldr	r3, [r7, #4]
    1cb4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
    1cb6:	e002      	b.n	1cbe <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
    1cb8:	887a      	ldrh	r2, [r7, #2]
    1cba:	687b      	ldr	r3, [r7, #4]
    1cbc:	615a      	str	r2, [r3, #20]
}
    1cbe:	bf00      	nop
    1cc0:	370c      	adds	r7, #12
    1cc2:	46bd      	mov	sp, r7
    1cc4:	bc80      	pop	{r7}
    1cc6:	4770      	bx	lr

00001cc8 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1cc8:	b480      	push	{r7}
    1cca:	b083      	sub	sp, #12
    1ccc:	af00      	add	r7, sp, #0
    1cce:	6078      	str	r0, [r7, #4]
    1cd0:	460b      	mov	r3, r1
    1cd2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
    1cd4:	887a      	ldrh	r2, [r7, #2]
    1cd6:	687b      	ldr	r3, [r7, #4]
    1cd8:	60da      	str	r2, [r3, #12]
}
    1cda:	bf00      	nop
    1cdc:	370c      	adds	r7, #12
    1cde:	46bd      	mov	sp, r7
    1ce0:	bc80      	pop	{r7}
    1ce2:	4770      	bx	lr

00001ce4 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1ce4:	b480      	push	{r7}
    1ce6:	b085      	sub	sp, #20
    1ce8:	af00      	add	r7, sp, #0
    1cea:	6078      	str	r0, [r7, #4]
    1cec:	460b      	mov	r3, r1
    1cee:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1cf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1cf4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
    1cf6:	887b      	ldrh	r3, [r7, #2]
    1cf8:	68fa      	ldr	r2, [r7, #12]
    1cfa:	4313      	orrs	r3, r2
    1cfc:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1cfe:	687b      	ldr	r3, [r7, #4]
    1d00:	68fa      	ldr	r2, [r7, #12]
    1d02:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    1d04:	887a      	ldrh	r2, [r7, #2]
    1d06:	687b      	ldr	r3, [r7, #4]
    1d08:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1d0a:	687b      	ldr	r3, [r7, #4]
    1d0c:	68fa      	ldr	r2, [r7, #12]
    1d0e:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1d10:	687b      	ldr	r3, [r7, #4]
    1d12:	699b      	ldr	r3, [r3, #24]
    1d14:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1d16:	687b      	ldr	r3, [r7, #4]
    1d18:	699b      	ldr	r3, [r3, #24]
    1d1a:	60fb      	str	r3, [r7, #12]
}
    1d1c:	bf00      	nop
    1d1e:	3714      	adds	r7, #20
    1d20:	46bd      	mov	sp, r7
    1d22:	bc80      	pop	{r7}
    1d24:	4770      	bx	lr

00001d26 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1d26:	b480      	push	{r7}
    1d28:	b085      	sub	sp, #20
    1d2a:	af00      	add	r7, sp, #0
    1d2c:	4603      	mov	r3, r0
    1d2e:	460a      	mov	r2, r1
    1d30:	71fb      	strb	r3, [r7, #7]
    1d32:	4613      	mov	r3, r2
    1d34:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    1d36:	2300      	movs	r3, #0
    1d38:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
    1d3a:	4b0c      	ldr	r3, [pc, #48]	; (1d6c <GPIO_EventOutputConfig+0x46>)
    1d3c:	681b      	ldr	r3, [r3, #0]
    1d3e:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    1d40:	68fa      	ldr	r2, [r7, #12]
    1d42:	f64f 7380 	movw	r3, #65408	; 0xff80
    1d46:	4013      	ands	r3, r2
    1d48:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1d4a:	79fb      	ldrb	r3, [r7, #7]
    1d4c:	011b      	lsls	r3, r3, #4
    1d4e:	68fa      	ldr	r2, [r7, #12]
    1d50:	4313      	orrs	r3, r2
    1d52:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    1d54:	79bb      	ldrb	r3, [r7, #6]
    1d56:	68fa      	ldr	r2, [r7, #12]
    1d58:	4313      	orrs	r3, r2
    1d5a:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    1d5c:	4a03      	ldr	r2, [pc, #12]	; (1d6c <GPIO_EventOutputConfig+0x46>)
    1d5e:	68fb      	ldr	r3, [r7, #12]
    1d60:	6013      	str	r3, [r2, #0]
}
    1d62:	bf00      	nop
    1d64:	3714      	adds	r7, #20
    1d66:	46bd      	mov	sp, r7
    1d68:	bc80      	pop	{r7}
    1d6a:	4770      	bx	lr
    1d6c:	40010000 	.word	0x40010000

00001d70 <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    1d70:	b480      	push	{r7}
    1d72:	b083      	sub	sp, #12
    1d74:	af00      	add	r7, sp, #0
    1d76:	4603      	mov	r3, r0
    1d78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    1d7a:	4a04      	ldr	r2, [pc, #16]	; (1d8c <GPIO_EventOutputCmd+0x1c>)
    1d7c:	79fb      	ldrb	r3, [r7, #7]
    1d7e:	6013      	str	r3, [r2, #0]
}
    1d80:	bf00      	nop
    1d82:	370c      	adds	r7, #12
    1d84:	46bd      	mov	sp, r7
    1d86:	bc80      	pop	{r7}
    1d88:	4770      	bx	lr
    1d8a:	bf00      	nop
    1d8c:	4220001c 	.word	0x4220001c

00001d90 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    1d90:	b480      	push	{r7}
    1d92:	b087      	sub	sp, #28
    1d94:	af00      	add	r7, sp, #0
    1d96:	6078      	str	r0, [r7, #4]
    1d98:	460b      	mov	r3, r1
    1d9a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    1d9c:	2300      	movs	r3, #0
    1d9e:	613b      	str	r3, [r7, #16]
    1da0:	2300      	movs	r3, #0
    1da2:	60fb      	str	r3, [r7, #12]
    1da4:	2300      	movs	r3, #0
    1da6:	617b      	str	r3, [r7, #20]
    1da8:	2300      	movs	r3, #0
    1daa:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
    1dac:	687b      	ldr	r3, [r7, #4]
    1dae:	2b00      	cmp	r3, #0
    1db0:	da03      	bge.n	1dba <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
    1db2:	4b2e      	ldr	r3, [pc, #184]	; (1e6c <GPIO_PinRemapConfig+0xdc>)
    1db4:	69db      	ldr	r3, [r3, #28]
    1db6:	617b      	str	r3, [r7, #20]
    1db8:	e002      	b.n	1dc0 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    1dba:	4b2c      	ldr	r3, [pc, #176]	; (1e6c <GPIO_PinRemapConfig+0xdc>)
    1dbc:	685b      	ldr	r3, [r3, #4]
    1dbe:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1dc0:	687b      	ldr	r3, [r7, #4]
    1dc2:	0c1b      	lsrs	r3, r3, #16
    1dc4:	f003 030f 	and.w	r3, r3, #15
    1dc8:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    1dca:	687b      	ldr	r3, [r7, #4]
    1dcc:	b29b      	uxth	r3, r3
    1dce:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1dd0:	687b      	ldr	r3, [r7, #4]
    1dd2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    1dd6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    1dda:	d10a      	bne.n	1df2 <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1ddc:	697b      	ldr	r3, [r7, #20]
    1dde:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1de2:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1de4:	4b21      	ldr	r3, [pc, #132]	; (1e6c <GPIO_PinRemapConfig+0xdc>)
    1de6:	685b      	ldr	r3, [r3, #4]
    1de8:	4a20      	ldr	r2, [pc, #128]	; (1e6c <GPIO_PinRemapConfig+0xdc>)
    1dea:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1dee:	6053      	str	r3, [r2, #4]
    1df0:	e021      	b.n	1e36 <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    1df2:	687b      	ldr	r3, [r7, #4]
    1df4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1df8:	2b00      	cmp	r3, #0
    1dfa:	d00e      	beq.n	1e1a <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1dfc:	2203      	movs	r2, #3
    1dfe:	68bb      	ldr	r3, [r7, #8]
    1e00:	fa02 f303 	lsl.w	r3, r2, r3
    1e04:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1e06:	68fb      	ldr	r3, [r7, #12]
    1e08:	43db      	mvns	r3, r3
    1e0a:	697a      	ldr	r2, [r7, #20]
    1e0c:	4013      	ands	r3, r2
    1e0e:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    1e10:	697b      	ldr	r3, [r7, #20]
    1e12:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1e16:	617b      	str	r3, [r7, #20]
    1e18:	e00d      	b.n	1e36 <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1e1a:	687b      	ldr	r3, [r7, #4]
    1e1c:	0d5b      	lsrs	r3, r3, #21
    1e1e:	011b      	lsls	r3, r3, #4
    1e20:	693a      	ldr	r2, [r7, #16]
    1e22:	fa02 f303 	lsl.w	r3, r2, r3
    1e26:	43db      	mvns	r3, r3
    1e28:	697a      	ldr	r2, [r7, #20]
    1e2a:	4013      	ands	r3, r2
    1e2c:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    1e2e:	697b      	ldr	r3, [r7, #20]
    1e30:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1e34:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1e36:	78fb      	ldrb	r3, [r7, #3]
    1e38:	2b00      	cmp	r3, #0
    1e3a:	d008      	beq.n	1e4e <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	0d5b      	lsrs	r3, r3, #21
    1e40:	011b      	lsls	r3, r3, #4
    1e42:	693a      	ldr	r2, [r7, #16]
    1e44:	fa02 f303 	lsl.w	r3, r2, r3
    1e48:	697a      	ldr	r2, [r7, #20]
    1e4a:	4313      	orrs	r3, r2
    1e4c:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    1e4e:	687b      	ldr	r3, [r7, #4]
    1e50:	2b00      	cmp	r3, #0
    1e52:	da03      	bge.n	1e5c <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
    1e54:	4a05      	ldr	r2, [pc, #20]	; (1e6c <GPIO_PinRemapConfig+0xdc>)
    1e56:	697b      	ldr	r3, [r7, #20]
    1e58:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
    1e5a:	e002      	b.n	1e62 <GPIO_PinRemapConfig+0xd2>
    AFIO->MAPR = tmpreg;
    1e5c:	4a03      	ldr	r2, [pc, #12]	; (1e6c <GPIO_PinRemapConfig+0xdc>)
    1e5e:	697b      	ldr	r3, [r7, #20]
    1e60:	6053      	str	r3, [r2, #4]
}
    1e62:	bf00      	nop
    1e64:	371c      	adds	r7, #28
    1e66:	46bd      	mov	sp, r7
    1e68:	bc80      	pop	{r7}
    1e6a:	4770      	bx	lr
    1e6c:	40010000 	.word	0x40010000

00001e70 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1e70:	b480      	push	{r7}
    1e72:	b085      	sub	sp, #20
    1e74:	af00      	add	r7, sp, #0
    1e76:	4603      	mov	r3, r0
    1e78:	460a      	mov	r2, r1
    1e7a:	71fb      	strb	r3, [r7, #7]
    1e7c:	4613      	mov	r3, r2
    1e7e:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    1e80:	2300      	movs	r3, #0
    1e82:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    1e84:	79bb      	ldrb	r3, [r7, #6]
    1e86:	f003 0303 	and.w	r3, r3, #3
    1e8a:	009b      	lsls	r3, r3, #2
    1e8c:	220f      	movs	r2, #15
    1e8e:	fa02 f303 	lsl.w	r3, r2, r3
    1e92:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    1e94:	4a15      	ldr	r2, [pc, #84]	; (1eec <GPIO_EXTILineConfig+0x7c>)
    1e96:	79bb      	ldrb	r3, [r7, #6]
    1e98:	089b      	lsrs	r3, r3, #2
    1e9a:	b2db      	uxtb	r3, r3
    1e9c:	3302      	adds	r3, #2
    1e9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1ea2:	68fb      	ldr	r3, [r7, #12]
    1ea4:	43db      	mvns	r3, r3
    1ea6:	4811      	ldr	r0, [pc, #68]	; (1eec <GPIO_EXTILineConfig+0x7c>)
    1ea8:	79b9      	ldrb	r1, [r7, #6]
    1eaa:	0889      	lsrs	r1, r1, #2
    1eac:	b2c9      	uxtb	r1, r1
    1eae:	401a      	ands	r2, r3
    1eb0:	1c8b      	adds	r3, r1, #2
    1eb2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    1eb6:	4a0d      	ldr	r2, [pc, #52]	; (1eec <GPIO_EXTILineConfig+0x7c>)
    1eb8:	79bb      	ldrb	r3, [r7, #6]
    1eba:	089b      	lsrs	r3, r3, #2
    1ebc:	b2db      	uxtb	r3, r3
    1ebe:	3302      	adds	r3, #2
    1ec0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1ec4:	79f9      	ldrb	r1, [r7, #7]
    1ec6:	79bb      	ldrb	r3, [r7, #6]
    1ec8:	f003 0303 	and.w	r3, r3, #3
    1ecc:	009b      	lsls	r3, r3, #2
    1ece:	fa01 f303 	lsl.w	r3, r1, r3
    1ed2:	4806      	ldr	r0, [pc, #24]	; (1eec <GPIO_EXTILineConfig+0x7c>)
    1ed4:	79b9      	ldrb	r1, [r7, #6]
    1ed6:	0889      	lsrs	r1, r1, #2
    1ed8:	b2c9      	uxtb	r1, r1
    1eda:	431a      	orrs	r2, r3
    1edc:	1c8b      	adds	r3, r1, #2
    1ede:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    1ee2:	bf00      	nop
    1ee4:	3714      	adds	r7, #20
    1ee6:	46bd      	mov	sp, r7
    1ee8:	bc80      	pop	{r7}
    1eea:	4770      	bx	lr
    1eec:	40010000 	.word	0x40010000

00001ef0 <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode    
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
    1ef0:	b480      	push	{r7}
    1ef2:	b083      	sub	sp, #12
    1ef4:	af00      	add	r7, sp, #0
    1ef6:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
    1ef8:	4a03      	ldr	r2, [pc, #12]	; (1f08 <GPIO_ETH_MediaInterfaceConfig+0x18>)
    1efa:	687b      	ldr	r3, [r7, #4]
    1efc:	6013      	str	r3, [r2, #0]
}
    1efe:	bf00      	nop
    1f00:	370c      	adds	r7, #12
    1f02:	46bd      	mov	sp, r7
    1f04:	bc80      	pop	{r7}
    1f06:	4770      	bx	lr
    1f08:	422000dc 	.word	0x422000dc

00001f0c <USART_DeInit>:
  *   This parameter can be one of the following values: 
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1f0c:	b580      	push	{r7, lr}
    1f0e:	b082      	sub	sp, #8
    1f10:	af00      	add	r7, sp, #0
    1f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1f14:	687b      	ldr	r3, [r7, #4]
    1f16:	4a26      	ldr	r2, [pc, #152]	; (1fb0 <USART_DeInit+0xa4>)
    1f18:	4293      	cmp	r3, r2
    1f1a:	d10a      	bne.n	1f32 <USART_DeInit+0x26>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    1f1c:	2101      	movs	r1, #1
    1f1e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1f22:	f7ff fc29 	bl	1778 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1f26:	2100      	movs	r1, #0
    1f28:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1f2c:	f7ff fc24 	bl	1778 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
    1f30:	e03a      	b.n	1fa8 <USART_DeInit+0x9c>
  else if (USARTx == USART2)
    1f32:	687b      	ldr	r3, [r7, #4]
    1f34:	4a1f      	ldr	r2, [pc, #124]	; (1fb4 <USART_DeInit+0xa8>)
    1f36:	4293      	cmp	r3, r2
    1f38:	d10a      	bne.n	1f50 <USART_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    1f3a:	2101      	movs	r1, #1
    1f3c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    1f40:	f7ff fc38 	bl	17b4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    1f44:	2100      	movs	r1, #0
    1f46:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    1f4a:	f7ff fc33 	bl	17b4 <RCC_APB1PeriphResetCmd>
}
    1f4e:	e02b      	b.n	1fa8 <USART_DeInit+0x9c>
  else if (USARTx == USART3)
    1f50:	687b      	ldr	r3, [r7, #4]
    1f52:	4a19      	ldr	r2, [pc, #100]	; (1fb8 <USART_DeInit+0xac>)
    1f54:	4293      	cmp	r3, r2
    1f56:	d10a      	bne.n	1f6e <USART_DeInit+0x62>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    1f58:	2101      	movs	r1, #1
    1f5a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    1f5e:	f7ff fc29 	bl	17b4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    1f62:	2100      	movs	r1, #0
    1f64:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    1f68:	f7ff fc24 	bl	17b4 <RCC_APB1PeriphResetCmd>
}
    1f6c:	e01c      	b.n	1fa8 <USART_DeInit+0x9c>
  else if (USARTx == UART4)
    1f6e:	687b      	ldr	r3, [r7, #4]
    1f70:	4a12      	ldr	r2, [pc, #72]	; (1fbc <USART_DeInit+0xb0>)
    1f72:	4293      	cmp	r3, r2
    1f74:	d10a      	bne.n	1f8c <USART_DeInit+0x80>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    1f76:	2101      	movs	r1, #1
    1f78:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1f7c:	f7ff fc1a 	bl	17b4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1f80:	2100      	movs	r1, #0
    1f82:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1f86:	f7ff fc15 	bl	17b4 <RCC_APB1PeriphResetCmd>
}
    1f8a:	e00d      	b.n	1fa8 <USART_DeInit+0x9c>
    if (USARTx == UART5)
    1f8c:	687b      	ldr	r3, [r7, #4]
    1f8e:	4a0c      	ldr	r2, [pc, #48]	; (1fc0 <USART_DeInit+0xb4>)
    1f90:	4293      	cmp	r3, r2
    1f92:	d109      	bne.n	1fa8 <USART_DeInit+0x9c>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    1f94:	2101      	movs	r1, #1
    1f96:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1f9a:	f7ff fc0b 	bl	17b4 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1f9e:	2100      	movs	r1, #0
    1fa0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1fa4:	f7ff fc06 	bl	17b4 <RCC_APB1PeriphResetCmd>
}
    1fa8:	bf00      	nop
    1faa:	3708      	adds	r7, #8
    1fac:	46bd      	mov	sp, r7
    1fae:	bd80      	pop	{r7, pc}
    1fb0:	40013800 	.word	0x40013800
    1fb4:	40004400 	.word	0x40004400
    1fb8:	40004800 	.word	0x40004800
    1fbc:	40004c00 	.word	0x40004c00
    1fc0:	40005000 	.word	0x40005000

00001fc4 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1fc4:	b580      	push	{r7, lr}
    1fc6:	b08c      	sub	sp, #48	; 0x30
    1fc8:	af00      	add	r7, sp, #0
    1fca:	6078      	str	r0, [r7, #4]
    1fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1fce:	2300      	movs	r3, #0
    1fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    1fd2:	2300      	movs	r3, #0
    1fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    1fd6:	2300      	movs	r3, #0
    1fd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    1fda:	2300      	movs	r3, #0
    1fdc:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1fde:	2300      	movs	r3, #0
    1fe0:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1fe2:	687b      	ldr	r3, [r7, #4]
    1fe4:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1fe6:	687b      	ldr	r3, [r7, #4]
    1fe8:	8a1b      	ldrh	r3, [r3, #16]
    1fea:	b29b      	uxth	r3, r3
    1fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1ff0:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1ff4:	4013      	ands	r3, r2
    1ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    1ff8:	683b      	ldr	r3, [r7, #0]
    1ffa:	88db      	ldrh	r3, [r3, #6]
    1ffc:	461a      	mov	r2, r3
    1ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2000:	4313      	orrs	r3, r2
    2002:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    2004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2006:	b29a      	uxth	r2, r3
    2008:	687b      	ldr	r3, [r7, #4]
    200a:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    200c:	687b      	ldr	r3, [r7, #4]
    200e:	899b      	ldrh	r3, [r3, #12]
    2010:	b29b      	uxth	r3, r3
    2012:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    2014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2016:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    201a:	4013      	ands	r3, r2
    201c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    201e:	683b      	ldr	r3, [r7, #0]
    2020:	889a      	ldrh	r2, [r3, #4]
    2022:	683b      	ldr	r3, [r7, #0]
    2024:	891b      	ldrh	r3, [r3, #8]
    2026:	4313      	orrs	r3, r2
    2028:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    202a:	683b      	ldr	r3, [r7, #0]
    202c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    202e:	4313      	orrs	r3, r2
    2030:	b29b      	uxth	r3, r3
    2032:	461a      	mov	r2, r3
    2034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2036:	4313      	orrs	r3, r2
    2038:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    203a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    203c:	b29a      	uxth	r2, r3
    203e:	687b      	ldr	r3, [r7, #4]
    2040:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
    2042:	687b      	ldr	r3, [r7, #4]
    2044:	8a9b      	ldrh	r3, [r3, #20]
    2046:	b29b      	uxth	r3, r3
    2048:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    204a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    204c:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    2050:	4013      	ands	r3, r2
    2052:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    2054:	683b      	ldr	r3, [r7, #0]
    2056:	899b      	ldrh	r3, [r3, #12]
    2058:	461a      	mov	r2, r3
    205a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    205c:	4313      	orrs	r3, r2
    205e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    2060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2062:	b29a      	uxth	r2, r3
    2064:	687b      	ldr	r3, [r7, #4]
    2066:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    2068:	f107 0308 	add.w	r3, r7, #8
    206c:	4618      	mov	r0, r3
    206e:	f7ff fa73 	bl	1558 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    2072:	69fb      	ldr	r3, [r7, #28]
    2074:	4a2e      	ldr	r2, [pc, #184]	; (2130 <USART_Init+0x16c>)
    2076:	4293      	cmp	r3, r2
    2078:	d102      	bne.n	2080 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    207a:	697b      	ldr	r3, [r7, #20]
    207c:	62bb      	str	r3, [r7, #40]	; 0x28
    207e:	e001      	b.n	2084 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    2080:	693b      	ldr	r3, [r7, #16]
    2082:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    2084:	687b      	ldr	r3, [r7, #4]
    2086:	899b      	ldrh	r3, [r3, #12]
    2088:	b29b      	uxth	r3, r3
    208a:	b21b      	sxth	r3, r3
    208c:	2b00      	cmp	r3, #0
    208e:	da0c      	bge.n	20aa <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
    2090:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2092:	4613      	mov	r3, r2
    2094:	009b      	lsls	r3, r3, #2
    2096:	4413      	add	r3, r2
    2098:	009a      	lsls	r2, r3, #2
    209a:	441a      	add	r2, r3
    209c:	683b      	ldr	r3, [r7, #0]
    209e:	681b      	ldr	r3, [r3, #0]
    20a0:	005b      	lsls	r3, r3, #1
    20a2:	fbb2 f3f3 	udiv	r3, r2, r3
    20a6:	627b      	str	r3, [r7, #36]	; 0x24
    20a8:	e00b      	b.n	20c2 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
    20aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    20ac:	4613      	mov	r3, r2
    20ae:	009b      	lsls	r3, r3, #2
    20b0:	4413      	add	r3, r2
    20b2:	009a      	lsls	r2, r3, #2
    20b4:	441a      	add	r2, r3
    20b6:	683b      	ldr	r3, [r7, #0]
    20b8:	681b      	ldr	r3, [r3, #0]
    20ba:	009b      	lsls	r3, r3, #2
    20bc:	fbb2 f3f3 	udiv	r3, r2, r3
    20c0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    20c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    20c4:	4a1b      	ldr	r2, [pc, #108]	; (2134 <USART_Init+0x170>)
    20c6:	fba2 2303 	umull	r2, r3, r2, r3
    20ca:	095b      	lsrs	r3, r3, #5
    20cc:	011b      	lsls	r3, r3, #4
    20ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    20d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    20d2:	091b      	lsrs	r3, r3, #4
    20d4:	2264      	movs	r2, #100	; 0x64
    20d6:	fb02 f303 	mul.w	r3, r2, r3
    20da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    20dc:	1ad3      	subs	r3, r2, r3
    20de:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    20e0:	687b      	ldr	r3, [r7, #4]
    20e2:	899b      	ldrh	r3, [r3, #12]
    20e4:	b29b      	uxth	r3, r3
    20e6:	b21b      	sxth	r3, r3
    20e8:	2b00      	cmp	r3, #0
    20ea:	da0c      	bge.n	2106 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    20ec:	6a3b      	ldr	r3, [r7, #32]
    20ee:	00db      	lsls	r3, r3, #3
    20f0:	3332      	adds	r3, #50	; 0x32
    20f2:	4a10      	ldr	r2, [pc, #64]	; (2134 <USART_Init+0x170>)
    20f4:	fba2 2303 	umull	r2, r3, r2, r3
    20f8:	095b      	lsrs	r3, r3, #5
    20fa:	f003 0307 	and.w	r3, r3, #7
    20fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2100:	4313      	orrs	r3, r2
    2102:	62fb      	str	r3, [r7, #44]	; 0x2c
    2104:	e00b      	b.n	211e <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    2106:	6a3b      	ldr	r3, [r7, #32]
    2108:	011b      	lsls	r3, r3, #4
    210a:	3332      	adds	r3, #50	; 0x32
    210c:	4a09      	ldr	r2, [pc, #36]	; (2134 <USART_Init+0x170>)
    210e:	fba2 2303 	umull	r2, r3, r2, r3
    2112:	095b      	lsrs	r3, r3, #5
    2114:	f003 030f 	and.w	r3, r3, #15
    2118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    211a:	4313      	orrs	r3, r2
    211c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    211e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2120:	b29a      	uxth	r2, r3
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	811a      	strh	r2, [r3, #8]
}
    2126:	bf00      	nop
    2128:	3730      	adds	r7, #48	; 0x30
    212a:	46bd      	mov	sp, r7
    212c:	bd80      	pop	{r7, pc}
    212e:	bf00      	nop
    2130:	40013800 	.word	0x40013800
    2134:	51eb851f 	.word	0x51eb851f

00002138 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    2138:	b480      	push	{r7}
    213a:	b083      	sub	sp, #12
    213c:	af00      	add	r7, sp, #0
    213e:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    2140:	687b      	ldr	r3, [r7, #4]
    2142:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    2146:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    2148:	687b      	ldr	r3, [r7, #4]
    214a:	2200      	movs	r2, #0
    214c:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    214e:	687b      	ldr	r3, [r7, #4]
    2150:	2200      	movs	r2, #0
    2152:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    2154:	687b      	ldr	r3, [r7, #4]
    2156:	2200      	movs	r2, #0
    2158:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    215a:	687b      	ldr	r3, [r7, #4]
    215c:	220c      	movs	r2, #12
    215e:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
    2160:	687b      	ldr	r3, [r7, #4]
    2162:	2200      	movs	r2, #0
    2164:	819a      	strh	r2, [r3, #12]
}
    2166:	bf00      	nop
    2168:	370c      	adds	r7, #12
    216a:	46bd      	mov	sp, r7
    216c:	bc80      	pop	{r7}
    216e:	4770      	bx	lr

00002170 <USART_ClockInit>:
  *         USART peripheral.  
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    2170:	b480      	push	{r7}
    2172:	b085      	sub	sp, #20
    2174:	af00      	add	r7, sp, #0
    2176:	6078      	str	r0, [r7, #4]
    2178:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    217a:	2300      	movs	r3, #0
    217c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    217e:	687b      	ldr	r3, [r7, #4]
    2180:	8a1b      	ldrh	r3, [r3, #16]
    2182:	b29b      	uxth	r3, r3
    2184:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    2186:	68fa      	ldr	r2, [r7, #12]
    2188:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    218c:	4013      	ands	r3, r2
    218e:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
    2190:	683b      	ldr	r3, [r7, #0]
    2192:	881a      	ldrh	r2, [r3, #0]
    2194:	683b      	ldr	r3, [r7, #0]
    2196:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    2198:	4313      	orrs	r3, r2
    219a:	b29a      	uxth	r2, r3
    219c:	683b      	ldr	r3, [r7, #0]
    219e:	889b      	ldrh	r3, [r3, #4]
    21a0:	4313      	orrs	r3, r2
    21a2:	b29a      	uxth	r2, r3
    21a4:	683b      	ldr	r3, [r7, #0]
    21a6:	88db      	ldrh	r3, [r3, #6]
    21a8:	4313      	orrs	r3, r2
    21aa:	b29b      	uxth	r3, r3
    21ac:	461a      	mov	r2, r3
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
    21ae:	68fb      	ldr	r3, [r7, #12]
    21b0:	4313      	orrs	r3, r2
    21b2:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    21b4:	68fb      	ldr	r3, [r7, #12]
    21b6:	b29a      	uxth	r2, r3
    21b8:	687b      	ldr	r3, [r7, #4]
    21ba:	821a      	strh	r2, [r3, #16]
}
    21bc:	bf00      	nop
    21be:	3714      	adds	r7, #20
    21c0:	46bd      	mov	sp, r7
    21c2:	bc80      	pop	{r7}
    21c4:	4770      	bx	lr

000021c6 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    21c6:	b480      	push	{r7}
    21c8:	b083      	sub	sp, #12
    21ca:	af00      	add	r7, sp, #0
    21cc:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    21ce:	687b      	ldr	r3, [r7, #4]
    21d0:	2200      	movs	r2, #0
    21d2:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    21d4:	687b      	ldr	r3, [r7, #4]
    21d6:	2200      	movs	r2, #0
    21d8:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    21da:	687b      	ldr	r3, [r7, #4]
    21dc:	2200      	movs	r2, #0
    21de:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    21e0:	687b      	ldr	r3, [r7, #4]
    21e2:	2200      	movs	r2, #0
    21e4:	80da      	strh	r2, [r3, #6]
}
    21e6:	bf00      	nop
    21e8:	370c      	adds	r7, #12
    21ea:	46bd      	mov	sp, r7
    21ec:	bc80      	pop	{r7}
    21ee:	4770      	bx	lr

000021f0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    21f0:	b480      	push	{r7}
    21f2:	b083      	sub	sp, #12
    21f4:	af00      	add	r7, sp, #0
    21f6:	6078      	str	r0, [r7, #4]
    21f8:	460b      	mov	r3, r1
    21fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    21fc:	78fb      	ldrb	r3, [r7, #3]
    21fe:	2b00      	cmp	r3, #0
    2200:	d008      	beq.n	2214 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    2202:	687b      	ldr	r3, [r7, #4]
    2204:	899b      	ldrh	r3, [r3, #12]
    2206:	b29b      	uxth	r3, r3
    2208:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    220c:	b29a      	uxth	r2, r3
    220e:	687b      	ldr	r3, [r7, #4]
    2210:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
    2212:	e007      	b.n	2224 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
    2214:	687b      	ldr	r3, [r7, #4]
    2216:	899b      	ldrh	r3, [r3, #12]
    2218:	b29b      	uxth	r3, r3
    221a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    221e:	b29a      	uxth	r2, r3
    2220:	687b      	ldr	r3, [r7, #4]
    2222:	819a      	strh	r2, [r3, #12]
}
    2224:	bf00      	nop
    2226:	370c      	adds	r7, #12
    2228:	46bd      	mov	sp, r7
    222a:	bc80      	pop	{r7}
    222c:	4770      	bx	lr

0000222e <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    222e:	b480      	push	{r7}
    2230:	b087      	sub	sp, #28
    2232:	af00      	add	r7, sp, #0
    2234:	6078      	str	r0, [r7, #4]
    2236:	460b      	mov	r3, r1
    2238:	807b      	strh	r3, [r7, #2]
    223a:	4613      	mov	r3, r2
    223c:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    223e:	2300      	movs	r3, #0
    2240:	613b      	str	r3, [r7, #16]
    2242:	2300      	movs	r3, #0
    2244:	60fb      	str	r3, [r7, #12]
    2246:	2300      	movs	r3, #0
    2248:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    224a:	2300      	movs	r3, #0
    224c:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
    224e:	687b      	ldr	r3, [r7, #4]
    2250:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    2252:	887b      	ldrh	r3, [r7, #2]
    2254:	b2db      	uxtb	r3, r3
    2256:	095b      	lsrs	r3, r3, #5
    2258:	b2db      	uxtb	r3, r3
    225a:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    225c:	887b      	ldrh	r3, [r7, #2]
    225e:	f003 031f 	and.w	r3, r3, #31
    2262:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    2264:	2201      	movs	r2, #1
    2266:	68fb      	ldr	r3, [r7, #12]
    2268:	fa02 f303 	lsl.w	r3, r2, r3
    226c:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
    226e:	693b      	ldr	r3, [r7, #16]
    2270:	2b01      	cmp	r3, #1
    2272:	d103      	bne.n	227c <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    2274:	697b      	ldr	r3, [r7, #20]
    2276:	330c      	adds	r3, #12
    2278:	617b      	str	r3, [r7, #20]
    227a:	e009      	b.n	2290 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    227c:	693b      	ldr	r3, [r7, #16]
    227e:	2b02      	cmp	r3, #2
    2280:	d103      	bne.n	228a <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    2282:	697b      	ldr	r3, [r7, #20]
    2284:	3310      	adds	r3, #16
    2286:	617b      	str	r3, [r7, #20]
    2288:	e002      	b.n	2290 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
    228a:	697b      	ldr	r3, [r7, #20]
    228c:	3314      	adds	r3, #20
    228e:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    2290:	787b      	ldrb	r3, [r7, #1]
    2292:	2b00      	cmp	r3, #0
    2294:	d006      	beq.n	22a4 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    2296:	697b      	ldr	r3, [r7, #20]
    2298:	6819      	ldr	r1, [r3, #0]
    229a:	697b      	ldr	r3, [r7, #20]
    229c:	68ba      	ldr	r2, [r7, #8]
    229e:	430a      	orrs	r2, r1
    22a0:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
    22a2:	e006      	b.n	22b2 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
    22a4:	697b      	ldr	r3, [r7, #20]
    22a6:	6819      	ldr	r1, [r3, #0]
    22a8:	68bb      	ldr	r3, [r7, #8]
    22aa:	43da      	mvns	r2, r3
    22ac:	697b      	ldr	r3, [r7, #20]
    22ae:	400a      	ands	r2, r1
    22b0:	601a      	str	r2, [r3, #0]
}
    22b2:	bf00      	nop
    22b4:	371c      	adds	r7, #28
    22b6:	46bd      	mov	sp, r7
    22b8:	bc80      	pop	{r7}
    22ba:	4770      	bx	lr

000022bc <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    22bc:	b480      	push	{r7}
    22be:	b083      	sub	sp, #12
    22c0:	af00      	add	r7, sp, #0
    22c2:	6078      	str	r0, [r7, #4]
    22c4:	460b      	mov	r3, r1
    22c6:	807b      	strh	r3, [r7, #2]
    22c8:	4613      	mov	r3, r2
    22ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
    22cc:	787b      	ldrb	r3, [r7, #1]
    22ce:	2b00      	cmp	r3, #0
    22d0:	d008      	beq.n	22e4 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    22d2:	687b      	ldr	r3, [r7, #4]
    22d4:	8a9b      	ldrh	r3, [r3, #20]
    22d6:	b29a      	uxth	r2, r3
    22d8:	887b      	ldrh	r3, [r7, #2]
    22da:	4313      	orrs	r3, r2
    22dc:	b29a      	uxth	r2, r3
    22de:	687b      	ldr	r3, [r7, #4]
    22e0:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
    22e2:	e009      	b.n	22f8 <USART_DMACmd+0x3c>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    22e4:	687b      	ldr	r3, [r7, #4]
    22e6:	8a9b      	ldrh	r3, [r3, #20]
    22e8:	b29a      	uxth	r2, r3
    22ea:	887b      	ldrh	r3, [r7, #2]
    22ec:	43db      	mvns	r3, r3
    22ee:	b29b      	uxth	r3, r3
    22f0:	4013      	ands	r3, r2
    22f2:	b29a      	uxth	r2, r3
    22f4:	687b      	ldr	r3, [r7, #4]
    22f6:	829a      	strh	r2, [r3, #20]
}
    22f8:	bf00      	nop
    22fa:	370c      	adds	r7, #12
    22fc:	46bd      	mov	sp, r7
    22fe:	bc80      	pop	{r7}
    2300:	4770      	bx	lr

00002302 <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    2302:	b480      	push	{r7}
    2304:	b083      	sub	sp, #12
    2306:	af00      	add	r7, sp, #0
    2308:	6078      	str	r0, [r7, #4]
    230a:	460b      	mov	r3, r1
    230c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    230e:	687b      	ldr	r3, [r7, #4]
    2310:	8a1b      	ldrh	r3, [r3, #16]
    2312:	b29b      	uxth	r3, r3
    2314:	f023 030f 	bic.w	r3, r3, #15
    2318:	b29a      	uxth	r2, r3
    231a:	687b      	ldr	r3, [r7, #4]
    231c:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    231e:	687b      	ldr	r3, [r7, #4]
    2320:	8a1b      	ldrh	r3, [r3, #16]
    2322:	b29a      	uxth	r2, r3
    2324:	78fb      	ldrb	r3, [r7, #3]
    2326:	b29b      	uxth	r3, r3
    2328:	4313      	orrs	r3, r2
    232a:	b29a      	uxth	r2, r3
    232c:	687b      	ldr	r3, [r7, #4]
    232e:	821a      	strh	r2, [r3, #16]
}
    2330:	bf00      	nop
    2332:	370c      	adds	r7, #12
    2334:	46bd      	mov	sp, r7
    2336:	bc80      	pop	{r7}
    2338:	4770      	bx	lr

0000233a <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    233a:	b480      	push	{r7}
    233c:	b083      	sub	sp, #12
    233e:	af00      	add	r7, sp, #0
    2340:	6078      	str	r0, [r7, #4]
    2342:	460b      	mov	r3, r1
    2344:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
    2346:	687b      	ldr	r3, [r7, #4]
    2348:	899b      	ldrh	r3, [r3, #12]
    234a:	b29b      	uxth	r3, r3
    234c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2350:	b29a      	uxth	r2, r3
    2352:	687b      	ldr	r3, [r7, #4]
    2354:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    2356:	687b      	ldr	r3, [r7, #4]
    2358:	899b      	ldrh	r3, [r3, #12]
    235a:	b29a      	uxth	r2, r3
    235c:	887b      	ldrh	r3, [r7, #2]
    235e:	4313      	orrs	r3, r2
    2360:	b29a      	uxth	r2, r3
    2362:	687b      	ldr	r3, [r7, #4]
    2364:	819a      	strh	r2, [r3, #12]
}
    2366:	bf00      	nop
    2368:	370c      	adds	r7, #12
    236a:	46bd      	mov	sp, r7
    236c:	bc80      	pop	{r7}
    236e:	4770      	bx	lr

00002370 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2370:	b480      	push	{r7}
    2372:	b083      	sub	sp, #12
    2374:	af00      	add	r7, sp, #0
    2376:	6078      	str	r0, [r7, #4]
    2378:	460b      	mov	r3, r1
    237a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
    237c:	78fb      	ldrb	r3, [r7, #3]
    237e:	2b00      	cmp	r3, #0
    2380:	d008      	beq.n	2394 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    2382:	687b      	ldr	r3, [r7, #4]
    2384:	899b      	ldrh	r3, [r3, #12]
    2386:	b29b      	uxth	r3, r3
    2388:	f043 0302 	orr.w	r3, r3, #2
    238c:	b29a      	uxth	r2, r3
    238e:	687b      	ldr	r3, [r7, #4]
    2390:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
  }
}
    2392:	e007      	b.n	23a4 <USART_ReceiverWakeUpCmd+0x34>
    USARTx->CR1 &= CR1_RWU_Reset;
    2394:	687b      	ldr	r3, [r7, #4]
    2396:	899b      	ldrh	r3, [r3, #12]
    2398:	b29b      	uxth	r3, r3
    239a:	f023 0302 	bic.w	r3, r3, #2
    239e:	b29a      	uxth	r2, r3
    23a0:	687b      	ldr	r3, [r7, #4]
    23a2:	819a      	strh	r2, [r3, #12]
}
    23a4:	bf00      	nop
    23a6:	370c      	adds	r7, #12
    23a8:	46bd      	mov	sp, r7
    23aa:	bc80      	pop	{r7}
    23ac:	4770      	bx	lr

000023ae <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    23ae:	b480      	push	{r7}
    23b0:	b083      	sub	sp, #12
    23b2:	af00      	add	r7, sp, #0
    23b4:	6078      	str	r0, [r7, #4]
    23b6:	460b      	mov	r3, r1
    23b8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
    23ba:	687b      	ldr	r3, [r7, #4]
    23bc:	8a1b      	ldrh	r3, [r3, #16]
    23be:	b29b      	uxth	r3, r3
    23c0:	f023 0320 	bic.w	r3, r3, #32
    23c4:	b29a      	uxth	r2, r3
    23c6:	687b      	ldr	r3, [r7, #4]
    23c8:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
    23ca:	687b      	ldr	r3, [r7, #4]
    23cc:	8a1b      	ldrh	r3, [r3, #16]
    23ce:	b29a      	uxth	r2, r3
    23d0:	887b      	ldrh	r3, [r7, #2]
    23d2:	4313      	orrs	r3, r2
    23d4:	b29a      	uxth	r2, r3
    23d6:	687b      	ldr	r3, [r7, #4]
    23d8:	821a      	strh	r2, [r3, #16]
}
    23da:	bf00      	nop
    23dc:	370c      	adds	r7, #12
    23de:	46bd      	mov	sp, r7
    23e0:	bc80      	pop	{r7}
    23e2:	4770      	bx	lr

000023e4 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    23e4:	b480      	push	{r7}
    23e6:	b083      	sub	sp, #12
    23e8:	af00      	add	r7, sp, #0
    23ea:	6078      	str	r0, [r7, #4]
    23ec:	460b      	mov	r3, r1
    23ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    23f0:	78fb      	ldrb	r3, [r7, #3]
    23f2:	2b00      	cmp	r3, #0
    23f4:	d008      	beq.n	2408 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    23f6:	687b      	ldr	r3, [r7, #4]
    23f8:	8a1b      	ldrh	r3, [r3, #16]
    23fa:	b29b      	uxth	r3, r3
    23fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    2400:	b29a      	uxth	r2, r3
    2402:	687b      	ldr	r3, [r7, #4]
    2404:	821a      	strh	r2, [r3, #16]
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
  }
}
    2406:	e007      	b.n	2418 <USART_LINCmd+0x34>
    USARTx->CR2 &= CR2_LINEN_Reset;
    2408:	687b      	ldr	r3, [r7, #4]
    240a:	8a1b      	ldrh	r3, [r3, #16]
    240c:	b29b      	uxth	r3, r3
    240e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    2412:	b29a      	uxth	r2, r3
    2414:	687b      	ldr	r3, [r7, #4]
    2416:	821a      	strh	r2, [r3, #16]
}
    2418:	bf00      	nop
    241a:	370c      	adds	r7, #12
    241c:	46bd      	mov	sp, r7
    241e:	bc80      	pop	{r7}
    2420:	4770      	bx	lr

00002422 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    2422:	b480      	push	{r7}
    2424:	b083      	sub	sp, #12
    2426:	af00      	add	r7, sp, #0
    2428:	6078      	str	r0, [r7, #4]
    242a:	460b      	mov	r3, r1
    242c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    242e:	887b      	ldrh	r3, [r7, #2]
    2430:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2434:	b29a      	uxth	r2, r3
    2436:	687b      	ldr	r3, [r7, #4]
    2438:	809a      	strh	r2, [r3, #4]
}
    243a:	bf00      	nop
    243c:	370c      	adds	r7, #12
    243e:	46bd      	mov	sp, r7
    2440:	bc80      	pop	{r7}
    2442:	4770      	bx	lr

00002444 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    2444:	b480      	push	{r7}
    2446:	b083      	sub	sp, #12
    2448:	af00      	add	r7, sp, #0
    244a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    244c:	687b      	ldr	r3, [r7, #4]
    244e:	889b      	ldrh	r3, [r3, #4]
    2450:	b29b      	uxth	r3, r3
    2452:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2456:	b29b      	uxth	r3, r3
}
    2458:	4618      	mov	r0, r3
    245a:	370c      	adds	r7, #12
    245c:	46bd      	mov	sp, r7
    245e:	bc80      	pop	{r7}
    2460:	4770      	bx	lr

00002462 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    2462:	b480      	push	{r7}
    2464:	b083      	sub	sp, #12
    2466:	af00      	add	r7, sp, #0
    2468:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    246a:	687b      	ldr	r3, [r7, #4]
    246c:	899b      	ldrh	r3, [r3, #12]
    246e:	b29b      	uxth	r3, r3
    2470:	f043 0301 	orr.w	r3, r3, #1
    2474:	b29a      	uxth	r2, r3
    2476:	687b      	ldr	r3, [r7, #4]
    2478:	819a      	strh	r2, [r3, #12]
}
    247a:	bf00      	nop
    247c:	370c      	adds	r7, #12
    247e:	46bd      	mov	sp, r7
    2480:	bc80      	pop	{r7}
    2482:	4770      	bx	lr

00002484 <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
    2484:	b480      	push	{r7}
    2486:	b083      	sub	sp, #12
    2488:	af00      	add	r7, sp, #0
    248a:	6078      	str	r0, [r7, #4]
    248c:	460b      	mov	r3, r1
    248e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    2490:	687b      	ldr	r3, [r7, #4]
    2492:	8b1b      	ldrh	r3, [r3, #24]
    2494:	b29b      	uxth	r3, r3
    2496:	b2db      	uxtb	r3, r3
    2498:	b29a      	uxth	r2, r3
    249a:	687b      	ldr	r3, [r7, #4]
    249c:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    249e:	687b      	ldr	r3, [r7, #4]
    24a0:	8b1b      	ldrh	r3, [r3, #24]
    24a2:	b29a      	uxth	r2, r3
    24a4:	78fb      	ldrb	r3, [r7, #3]
    24a6:	b29b      	uxth	r3, r3
    24a8:	021b      	lsls	r3, r3, #8
    24aa:	b29b      	uxth	r3, r3
    24ac:	4313      	orrs	r3, r2
    24ae:	b29a      	uxth	r2, r3
    24b0:	687b      	ldr	r3, [r7, #4]
    24b2:	831a      	strh	r2, [r3, #24]
}
    24b4:	bf00      	nop
    24b6:	370c      	adds	r7, #12
    24b8:	46bd      	mov	sp, r7
    24ba:	bc80      	pop	{r7}
    24bc:	4770      	bx	lr

000024be <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.  
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
    24be:	b480      	push	{r7}
    24c0:	b083      	sub	sp, #12
    24c2:	af00      	add	r7, sp, #0
    24c4:	6078      	str	r0, [r7, #4]
    24c6:	460b      	mov	r3, r1
    24c8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    24ca:	687b      	ldr	r3, [r7, #4]
    24cc:	8b1b      	ldrh	r3, [r3, #24]
    24ce:	b29b      	uxth	r3, r3
    24d0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    24d4:	b29a      	uxth	r2, r3
    24d6:	687b      	ldr	r3, [r7, #4]
    24d8:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    24da:	687b      	ldr	r3, [r7, #4]
    24dc:	8b1b      	ldrh	r3, [r3, #24]
    24de:	b29a      	uxth	r2, r3
    24e0:	78fb      	ldrb	r3, [r7, #3]
    24e2:	b29b      	uxth	r3, r3
    24e4:	4313      	orrs	r3, r2
    24e6:	b29a      	uxth	r2, r3
    24e8:	687b      	ldr	r3, [r7, #4]
    24ea:	831a      	strh	r2, [r3, #24]
}
    24ec:	bf00      	nop
    24ee:	370c      	adds	r7, #12
    24f0:	46bd      	mov	sp, r7
    24f2:	bc80      	pop	{r7}
    24f4:	4770      	bx	lr

000024f6 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.     
  * @note The Smart Card mode is not available for UART4 and UART5. 
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    24f6:	b480      	push	{r7}
    24f8:	b083      	sub	sp, #12
    24fa:	af00      	add	r7, sp, #0
    24fc:	6078      	str	r0, [r7, #4]
    24fe:	460b      	mov	r3, r1
    2500:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2502:	78fb      	ldrb	r3, [r7, #3]
    2504:	2b00      	cmp	r3, #0
    2506:	d008      	beq.n	251a <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    2508:	687b      	ldr	r3, [r7, #4]
    250a:	8a9b      	ldrh	r3, [r3, #20]
    250c:	b29b      	uxth	r3, r3
    250e:	f043 0320 	orr.w	r3, r3, #32
    2512:	b29a      	uxth	r2, r3
    2514:	687b      	ldr	r3, [r7, #4]
    2516:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
  }
}
    2518:	e007      	b.n	252a <USART_SmartCardCmd+0x34>
    USARTx->CR3 &= CR3_SCEN_Reset;
    251a:	687b      	ldr	r3, [r7, #4]
    251c:	8a9b      	ldrh	r3, [r3, #20]
    251e:	b29b      	uxth	r3, r3
    2520:	f023 0320 	bic.w	r3, r3, #32
    2524:	b29a      	uxth	r2, r3
    2526:	687b      	ldr	r3, [r7, #4]
    2528:	829a      	strh	r2, [r3, #20]
}
    252a:	bf00      	nop
    252c:	370c      	adds	r7, #12
    252e:	46bd      	mov	sp, r7
    2530:	bc80      	pop	{r7}
    2532:	4770      	bx	lr

00002534 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2534:	b480      	push	{r7}
    2536:	b083      	sub	sp, #12
    2538:	af00      	add	r7, sp, #0
    253a:	6078      	str	r0, [r7, #4]
    253c:	460b      	mov	r3, r1
    253e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2540:	78fb      	ldrb	r3, [r7, #3]
    2542:	2b00      	cmp	r3, #0
    2544:	d008      	beq.n	2558 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    2546:	687b      	ldr	r3, [r7, #4]
    2548:	8a9b      	ldrh	r3, [r3, #20]
    254a:	b29b      	uxth	r3, r3
    254c:	f043 0310 	orr.w	r3, r3, #16
    2550:	b29a      	uxth	r2, r3
    2552:	687b      	ldr	r3, [r7, #4]
    2554:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
  }
}
    2556:	e007      	b.n	2568 <USART_SmartCardNACKCmd+0x34>
    USARTx->CR3 &= CR3_NACK_Reset;
    2558:	687b      	ldr	r3, [r7, #4]
    255a:	8a9b      	ldrh	r3, [r3, #20]
    255c:	b29b      	uxth	r3, r3
    255e:	f023 0310 	bic.w	r3, r3, #16
    2562:	b29a      	uxth	r2, r3
    2564:	687b      	ldr	r3, [r7, #4]
    2566:	829a      	strh	r2, [r3, #20]
}
    2568:	bf00      	nop
    256a:	370c      	adds	r7, #12
    256c:	46bd      	mov	sp, r7
    256e:	bc80      	pop	{r7}
    2570:	4770      	bx	lr

00002572 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2572:	b480      	push	{r7}
    2574:	b083      	sub	sp, #12
    2576:	af00      	add	r7, sp, #0
    2578:	6078      	str	r0, [r7, #4]
    257a:	460b      	mov	r3, r1
    257c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    257e:	78fb      	ldrb	r3, [r7, #3]
    2580:	2b00      	cmp	r3, #0
    2582:	d008      	beq.n	2596 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    2584:	687b      	ldr	r3, [r7, #4]
    2586:	8a9b      	ldrh	r3, [r3, #20]
    2588:	b29b      	uxth	r3, r3
    258a:	f043 0308 	orr.w	r3, r3, #8
    258e:	b29a      	uxth	r2, r3
    2590:	687b      	ldr	r3, [r7, #4]
    2592:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
  }
}
    2594:	e007      	b.n	25a6 <USART_HalfDuplexCmd+0x34>
    USARTx->CR3 &= CR3_HDSEL_Reset;
    2596:	687b      	ldr	r3, [r7, #4]
    2598:	8a9b      	ldrh	r3, [r3, #20]
    259a:	b29b      	uxth	r3, r3
    259c:	f023 0308 	bic.w	r3, r3, #8
    25a0:	b29a      	uxth	r2, r3
    25a2:	687b      	ldr	r3, [r7, #4]
    25a4:	829a      	strh	r2, [r3, #20]
}
    25a6:	bf00      	nop
    25a8:	370c      	adds	r7, #12
    25aa:	46bd      	mov	sp, r7
    25ac:	bc80      	pop	{r7}
    25ae:	4770      	bx	lr

000025b0 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.   
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    25b0:	b480      	push	{r7}
    25b2:	b083      	sub	sp, #12
    25b4:	af00      	add	r7, sp, #0
    25b6:	6078      	str	r0, [r7, #4]
    25b8:	460b      	mov	r3, r1
    25ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    25bc:	78fb      	ldrb	r3, [r7, #3]
    25be:	2b00      	cmp	r3, #0
    25c0:	d00a      	beq.n	25d8 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    25c2:	687b      	ldr	r3, [r7, #4]
    25c4:	899b      	ldrh	r3, [r3, #12]
    25c6:	b29b      	uxth	r3, r3
    25c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    25cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    25d0:	b29a      	uxth	r2, r3
    25d2:	687b      	ldr	r3, [r7, #4]
    25d4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
  }
}
    25d6:	e007      	b.n	25e8 <USART_OverSampling8Cmd+0x38>
    USARTx->CR1 &= CR1_OVER8_Reset;
    25d8:	687b      	ldr	r3, [r7, #4]
    25da:	899b      	ldrh	r3, [r3, #12]
    25dc:	b29b      	uxth	r3, r3
    25de:	f3c3 030e 	ubfx	r3, r3, #0, #15
    25e2:	b29a      	uxth	r2, r3
    25e4:	687b      	ldr	r3, [r7, #4]
    25e6:	819a      	strh	r2, [r3, #12]
}
    25e8:	bf00      	nop
    25ea:	370c      	adds	r7, #12
    25ec:	46bd      	mov	sp, r7
    25ee:	bc80      	pop	{r7}
    25f0:	4770      	bx	lr

000025f2 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    25f2:	b480      	push	{r7}
    25f4:	b083      	sub	sp, #12
    25f6:	af00      	add	r7, sp, #0
    25f8:	6078      	str	r0, [r7, #4]
    25fa:	460b      	mov	r3, r1
    25fc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    25fe:	78fb      	ldrb	r3, [r7, #3]
    2600:	2b00      	cmp	r3, #0
    2602:	d008      	beq.n	2616 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    2604:	687b      	ldr	r3, [r7, #4]
    2606:	8a9b      	ldrh	r3, [r3, #20]
    2608:	b29b      	uxth	r3, r3
    260a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    260e:	b29a      	uxth	r2, r3
    2610:	687b      	ldr	r3, [r7, #4]
    2612:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
  }
}
    2614:	e007      	b.n	2626 <USART_OneBitMethodCmd+0x34>
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    2616:	687b      	ldr	r3, [r7, #4]
    2618:	8a9b      	ldrh	r3, [r3, #20]
    261a:	b29b      	uxth	r3, r3
    261c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2620:	b29a      	uxth	r2, r3
    2622:	687b      	ldr	r3, [r7, #4]
    2624:	829a      	strh	r2, [r3, #20]
}
    2626:	bf00      	nop
    2628:	370c      	adds	r7, #12
    262a:	46bd      	mov	sp, r7
    262c:	bc80      	pop	{r7}
    262e:	4770      	bx	lr

00002630 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    2630:	b480      	push	{r7}
    2632:	b083      	sub	sp, #12
    2634:	af00      	add	r7, sp, #0
    2636:	6078      	str	r0, [r7, #4]
    2638:	460b      	mov	r3, r1
    263a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
    263c:	687b      	ldr	r3, [r7, #4]
    263e:	8a9b      	ldrh	r3, [r3, #20]
    2640:	b29b      	uxth	r3, r3
    2642:	f023 0304 	bic.w	r3, r3, #4
    2646:	b29a      	uxth	r2, r3
    2648:	687b      	ldr	r3, [r7, #4]
    264a:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    264c:	687b      	ldr	r3, [r7, #4]
    264e:	8a9b      	ldrh	r3, [r3, #20]
    2650:	b29a      	uxth	r2, r3
    2652:	887b      	ldrh	r3, [r7, #2]
    2654:	4313      	orrs	r3, r2
    2656:	b29a      	uxth	r2, r3
    2658:	687b      	ldr	r3, [r7, #4]
    265a:	829a      	strh	r2, [r3, #20]
}
    265c:	bf00      	nop
    265e:	370c      	adds	r7, #12
    2660:	46bd      	mov	sp, r7
    2662:	bc80      	pop	{r7}
    2664:	4770      	bx	lr

00002666 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2666:	b480      	push	{r7}
    2668:	b083      	sub	sp, #12
    266a:	af00      	add	r7, sp, #0
    266c:	6078      	str	r0, [r7, #4]
    266e:	460b      	mov	r3, r1
    2670:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
    2672:	78fb      	ldrb	r3, [r7, #3]
    2674:	2b00      	cmp	r3, #0
    2676:	d008      	beq.n	268a <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    2678:	687b      	ldr	r3, [r7, #4]
    267a:	8a9b      	ldrh	r3, [r3, #20]
    267c:	b29b      	uxth	r3, r3
    267e:	f043 0302 	orr.w	r3, r3, #2
    2682:	b29a      	uxth	r2, r3
    2684:	687b      	ldr	r3, [r7, #4]
    2686:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
  }
}
    2688:	e007      	b.n	269a <USART_IrDACmd+0x34>
    USARTx->CR3 &= CR3_IREN_Reset;
    268a:	687b      	ldr	r3, [r7, #4]
    268c:	8a9b      	ldrh	r3, [r3, #20]
    268e:	b29b      	uxth	r3, r3
    2690:	f023 0302 	bic.w	r3, r3, #2
    2694:	b29a      	uxth	r2, r3
    2696:	687b      	ldr	r3, [r7, #4]
    2698:	829a      	strh	r2, [r3, #20]
}
    269a:	bf00      	nop
    269c:	370c      	adds	r7, #12
    269e:	46bd      	mov	sp, r7
    26a0:	bc80      	pop	{r7}
    26a2:	4770      	bx	lr

000026a4 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    26a4:	b480      	push	{r7}
    26a6:	b085      	sub	sp, #20
    26a8:	af00      	add	r7, sp, #0
    26aa:	6078      	str	r0, [r7, #4]
    26ac:	460b      	mov	r3, r1
    26ae:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    26b0:	2300      	movs	r3, #0
    26b2:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    26b4:	687b      	ldr	r3, [r7, #4]
    26b6:	881b      	ldrh	r3, [r3, #0]
    26b8:	b29a      	uxth	r2, r3
    26ba:	887b      	ldrh	r3, [r7, #2]
    26bc:	4013      	ands	r3, r2
    26be:	b29b      	uxth	r3, r3
    26c0:	2b00      	cmp	r3, #0
    26c2:	d002      	beq.n	26ca <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    26c4:	2301      	movs	r3, #1
    26c6:	73fb      	strb	r3, [r7, #15]
    26c8:	e001      	b.n	26ce <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    26ca:	2300      	movs	r3, #0
    26cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    26ce:	7bfb      	ldrb	r3, [r7, #15]
}
    26d0:	4618      	mov	r0, r3
    26d2:	3714      	adds	r7, #20
    26d4:	46bd      	mov	sp, r7
    26d6:	bc80      	pop	{r7}
    26d8:	4770      	bx	lr

000026da <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    26da:	b480      	push	{r7}
    26dc:	b083      	sub	sp, #12
    26de:	af00      	add	r7, sp, #0
    26e0:	6078      	str	r0, [r7, #4]
    26e2:	460b      	mov	r3, r1
    26e4:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
    26e6:	887b      	ldrh	r3, [r7, #2]
    26e8:	43db      	mvns	r3, r3
    26ea:	b29a      	uxth	r2, r3
    26ec:	687b      	ldr	r3, [r7, #4]
    26ee:	801a      	strh	r2, [r3, #0]
}
    26f0:	bf00      	nop
    26f2:	370c      	adds	r7, #12
    26f4:	46bd      	mov	sp, r7
    26f6:	bc80      	pop	{r7}
    26f8:	4770      	bx	lr

000026fa <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    26fa:	b480      	push	{r7}
    26fc:	b087      	sub	sp, #28
    26fe:	af00      	add	r7, sp, #0
    2700:	6078      	str	r0, [r7, #4]
    2702:	460b      	mov	r3, r1
    2704:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    2706:	2300      	movs	r3, #0
    2708:	60fb      	str	r3, [r7, #12]
    270a:	2300      	movs	r3, #0
    270c:	617b      	str	r3, [r7, #20]
    270e:	2300      	movs	r3, #0
    2710:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    2712:	2300      	movs	r3, #0
    2714:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    2716:	887b      	ldrh	r3, [r7, #2]
    2718:	b2db      	uxtb	r3, r3
    271a:	095b      	lsrs	r3, r3, #5
    271c:	b2db      	uxtb	r3, r3
    271e:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    2720:	887b      	ldrh	r3, [r7, #2]
    2722:	f003 031f 	and.w	r3, r3, #31
    2726:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    2728:	2201      	movs	r2, #1
    272a:	697b      	ldr	r3, [r7, #20]
    272c:	fa02 f303 	lsl.w	r3, r2, r3
    2730:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
    2732:	68bb      	ldr	r3, [r7, #8]
    2734:	2b01      	cmp	r3, #1
    2736:	d107      	bne.n	2748 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
    2738:	687b      	ldr	r3, [r7, #4]
    273a:	899b      	ldrh	r3, [r3, #12]
    273c:	b29b      	uxth	r3, r3
    273e:	461a      	mov	r2, r3
    2740:	697b      	ldr	r3, [r7, #20]
    2742:	4013      	ands	r3, r2
    2744:	617b      	str	r3, [r7, #20]
    2746:	e011      	b.n	276c <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    2748:	68bb      	ldr	r3, [r7, #8]
    274a:	2b02      	cmp	r3, #2
    274c:	d107      	bne.n	275e <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
    274e:	687b      	ldr	r3, [r7, #4]
    2750:	8a1b      	ldrh	r3, [r3, #16]
    2752:	b29b      	uxth	r3, r3
    2754:	461a      	mov	r2, r3
    2756:	697b      	ldr	r3, [r7, #20]
    2758:	4013      	ands	r3, r2
    275a:	617b      	str	r3, [r7, #20]
    275c:	e006      	b.n	276c <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    275e:	687b      	ldr	r3, [r7, #4]
    2760:	8a9b      	ldrh	r3, [r3, #20]
    2762:	b29b      	uxth	r3, r3
    2764:	461a      	mov	r2, r3
    2766:	697b      	ldr	r3, [r7, #20]
    2768:	4013      	ands	r3, r2
    276a:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
    276c:	887b      	ldrh	r3, [r7, #2]
    276e:	0a1b      	lsrs	r3, r3, #8
    2770:	b29b      	uxth	r3, r3
    2772:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    2774:	2201      	movs	r2, #1
    2776:	68fb      	ldr	r3, [r7, #12]
    2778:	fa02 f303 	lsl.w	r3, r2, r3
    277c:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    277e:	687b      	ldr	r3, [r7, #4]
    2780:	881b      	ldrh	r3, [r3, #0]
    2782:	b29b      	uxth	r3, r3
    2784:	461a      	mov	r2, r3
    2786:	68fb      	ldr	r3, [r7, #12]
    2788:	4013      	ands	r3, r2
    278a:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    278c:	697b      	ldr	r3, [r7, #20]
    278e:	2b00      	cmp	r3, #0
    2790:	d005      	beq.n	279e <USART_GetITStatus+0xa4>
    2792:	68fb      	ldr	r3, [r7, #12]
    2794:	2b00      	cmp	r3, #0
    2796:	d002      	beq.n	279e <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
    2798:	2301      	movs	r3, #1
    279a:	74fb      	strb	r3, [r7, #19]
    279c:	e001      	b.n	27a2 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
    279e:	2300      	movs	r3, #0
    27a0:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
    27a2:	7cfb      	ldrb	r3, [r7, #19]
}
    27a4:	4618      	mov	r0, r3
    27a6:	371c      	adds	r7, #28
    27a8:	46bd      	mov	sp, r7
    27aa:	bc80      	pop	{r7}
    27ac:	4770      	bx	lr

000027ae <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    27ae:	b480      	push	{r7}
    27b0:	b085      	sub	sp, #20
    27b2:	af00      	add	r7, sp, #0
    27b4:	6078      	str	r0, [r7, #4]
    27b6:	460b      	mov	r3, r1
    27b8:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    27ba:	2300      	movs	r3, #0
    27bc:	81fb      	strh	r3, [r7, #14]
    27be:	2300      	movs	r3, #0
    27c0:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
    27c2:	887b      	ldrh	r3, [r7, #2]
    27c4:	0a1b      	lsrs	r3, r3, #8
    27c6:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    27c8:	89fb      	ldrh	r3, [r7, #14]
    27ca:	2201      	movs	r2, #1
    27cc:	fa02 f303 	lsl.w	r3, r2, r3
    27d0:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    27d2:	89bb      	ldrh	r3, [r7, #12]
    27d4:	43db      	mvns	r3, r3
    27d6:	b29a      	uxth	r2, r3
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	801a      	strh	r2, [r3, #0]
}
    27dc:	bf00      	nop
    27de:	3714      	adds	r7, #20
    27e0:	46bd      	mov	sp, r7
    27e2:	bc80      	pop	{r7}
    27e4:	4770      	bx	lr
    27e6:	bf00      	nop

000027e8 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    27e8:	b480      	push	{r7}
    27ea:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    27ec:	4b09      	ldr	r3, [pc, #36]	; (2814 <EXTI_DeInit+0x2c>)
    27ee:	2200      	movs	r2, #0
    27f0:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    27f2:	4b08      	ldr	r3, [pc, #32]	; (2814 <EXTI_DeInit+0x2c>)
    27f4:	2200      	movs	r2, #0
    27f6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000; 
    27f8:	4b06      	ldr	r3, [pc, #24]	; (2814 <EXTI_DeInit+0x2c>)
    27fa:	2200      	movs	r2, #0
    27fc:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000; 
    27fe:	4b05      	ldr	r3, [pc, #20]	; (2814 <EXTI_DeInit+0x2c>)
    2800:	2200      	movs	r2, #0
    2802:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    2804:	4b03      	ldr	r3, [pc, #12]	; (2814 <EXTI_DeInit+0x2c>)
    2806:	4a04      	ldr	r2, [pc, #16]	; (2818 <EXTI_DeInit+0x30>)
    2808:	615a      	str	r2, [r3, #20]
}
    280a:	bf00      	nop
    280c:	46bd      	mov	sp, r7
    280e:	bc80      	pop	{r7}
    2810:	4770      	bx	lr
    2812:	bf00      	nop
    2814:	40010400 	.word	0x40010400
    2818:	000fffff 	.word	0x000fffff

0000281c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    281c:	b480      	push	{r7}
    281e:	b085      	sub	sp, #20
    2820:	af00      	add	r7, sp, #0
    2822:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    2824:	2300      	movs	r3, #0
    2826:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    2828:	4b34      	ldr	r3, [pc, #208]	; (28fc <EXTI_Init+0xe0>)
    282a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    282c:	687b      	ldr	r3, [r7, #4]
    282e:	799b      	ldrb	r3, [r3, #6]
    2830:	2b00      	cmp	r3, #0
    2832:	d04f      	beq.n	28d4 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    2834:	4b31      	ldr	r3, [pc, #196]	; (28fc <EXTI_Init+0xe0>)
    2836:	681a      	ldr	r2, [r3, #0]
    2838:	687b      	ldr	r3, [r7, #4]
    283a:	681b      	ldr	r3, [r3, #0]
    283c:	43db      	mvns	r3, r3
    283e:	492f      	ldr	r1, [pc, #188]	; (28fc <EXTI_Init+0xe0>)
    2840:	4013      	ands	r3, r2
    2842:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2844:	4b2d      	ldr	r3, [pc, #180]	; (28fc <EXTI_Init+0xe0>)
    2846:	685a      	ldr	r2, [r3, #4]
    2848:	687b      	ldr	r3, [r7, #4]
    284a:	681b      	ldr	r3, [r3, #0]
    284c:	43db      	mvns	r3, r3
    284e:	492b      	ldr	r1, [pc, #172]	; (28fc <EXTI_Init+0xe0>)
    2850:	4013      	ands	r3, r2
    2852:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
    2854:	687b      	ldr	r3, [r7, #4]
    2856:	791b      	ldrb	r3, [r3, #4]
    2858:	461a      	mov	r2, r3
    285a:	68fb      	ldr	r3, [r7, #12]
    285c:	4413      	add	r3, r2
    285e:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    2860:	68fb      	ldr	r3, [r7, #12]
    2862:	6819      	ldr	r1, [r3, #0]
    2864:	687b      	ldr	r3, [r7, #4]
    2866:	681a      	ldr	r2, [r3, #0]
    2868:	68fb      	ldr	r3, [r7, #12]
    286a:	430a      	orrs	r2, r1
    286c:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    286e:	4b23      	ldr	r3, [pc, #140]	; (28fc <EXTI_Init+0xe0>)
    2870:	689a      	ldr	r2, [r3, #8]
    2872:	687b      	ldr	r3, [r7, #4]
    2874:	681b      	ldr	r3, [r3, #0]
    2876:	43db      	mvns	r3, r3
    2878:	4920      	ldr	r1, [pc, #128]	; (28fc <EXTI_Init+0xe0>)
    287a:	4013      	ands	r3, r2
    287c:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    287e:	4b1f      	ldr	r3, [pc, #124]	; (28fc <EXTI_Init+0xe0>)
    2880:	68da      	ldr	r2, [r3, #12]
    2882:	687b      	ldr	r3, [r7, #4]
    2884:	681b      	ldr	r3, [r3, #0]
    2886:	43db      	mvns	r3, r3
    2888:	491c      	ldr	r1, [pc, #112]	; (28fc <EXTI_Init+0xe0>)
    288a:	4013      	ands	r3, r2
    288c:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    288e:	687b      	ldr	r3, [r7, #4]
    2890:	795b      	ldrb	r3, [r3, #5]
    2892:	2b10      	cmp	r3, #16
    2894:	d10e      	bne.n	28b4 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    2896:	4b19      	ldr	r3, [pc, #100]	; (28fc <EXTI_Init+0xe0>)
    2898:	689a      	ldr	r2, [r3, #8]
    289a:	687b      	ldr	r3, [r7, #4]
    289c:	681b      	ldr	r3, [r3, #0]
    289e:	4917      	ldr	r1, [pc, #92]	; (28fc <EXTI_Init+0xe0>)
    28a0:	4313      	orrs	r3, r2
    28a2:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    28a4:	4b15      	ldr	r3, [pc, #84]	; (28fc <EXTI_Init+0xe0>)
    28a6:	68da      	ldr	r2, [r3, #12]
    28a8:	687b      	ldr	r3, [r7, #4]
    28aa:	681b      	ldr	r3, [r3, #0]
    28ac:	4913      	ldr	r1, [pc, #76]	; (28fc <EXTI_Init+0xe0>)
    28ae:	4313      	orrs	r3, r2
    28b0:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
    28b2:	e01d      	b.n	28f0 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
    28b4:	4b11      	ldr	r3, [pc, #68]	; (28fc <EXTI_Init+0xe0>)
    28b6:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    28b8:	687b      	ldr	r3, [r7, #4]
    28ba:	795b      	ldrb	r3, [r3, #5]
    28bc:	461a      	mov	r2, r3
    28be:	68fb      	ldr	r3, [r7, #12]
    28c0:	4413      	add	r3, r2
    28c2:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    28c4:	68fb      	ldr	r3, [r7, #12]
    28c6:	6819      	ldr	r1, [r3, #0]
    28c8:	687b      	ldr	r3, [r7, #4]
    28ca:	681a      	ldr	r2, [r3, #0]
    28cc:	68fb      	ldr	r3, [r7, #12]
    28ce:	430a      	orrs	r2, r1
    28d0:	601a      	str	r2, [r3, #0]
}
    28d2:	e00d      	b.n	28f0 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
    28d4:	687b      	ldr	r3, [r7, #4]
    28d6:	791b      	ldrb	r3, [r3, #4]
    28d8:	461a      	mov	r2, r3
    28da:	68fb      	ldr	r3, [r7, #12]
    28dc:	4413      	add	r3, r2
    28de:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    28e0:	68fb      	ldr	r3, [r7, #12]
    28e2:	6819      	ldr	r1, [r3, #0]
    28e4:	687b      	ldr	r3, [r7, #4]
    28e6:	681b      	ldr	r3, [r3, #0]
    28e8:	43da      	mvns	r2, r3
    28ea:	68fb      	ldr	r3, [r7, #12]
    28ec:	400a      	ands	r2, r1
    28ee:	601a      	str	r2, [r3, #0]
}
    28f0:	bf00      	nop
    28f2:	3714      	adds	r7, #20
    28f4:	46bd      	mov	sp, r7
    28f6:	bc80      	pop	{r7}
    28f8:	4770      	bx	lr
    28fa:	bf00      	nop
    28fc:	40010400 	.word	0x40010400

00002900 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2900:	b480      	push	{r7}
    2902:	b083      	sub	sp, #12
    2904:	af00      	add	r7, sp, #0
    2906:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2908:	687b      	ldr	r3, [r7, #4]
    290a:	2200      	movs	r2, #0
    290c:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    290e:	687b      	ldr	r3, [r7, #4]
    2910:	2200      	movs	r2, #0
    2912:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    2914:	687b      	ldr	r3, [r7, #4]
    2916:	220c      	movs	r2, #12
    2918:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    291a:	687b      	ldr	r3, [r7, #4]
    291c:	2200      	movs	r2, #0
    291e:	719a      	strb	r2, [r3, #6]
}
    2920:	bf00      	nop
    2922:	370c      	adds	r7, #12
    2924:	46bd      	mov	sp, r7
    2926:	bc80      	pop	{r7}
    2928:	4770      	bx	lr

0000292a <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    292a:	b480      	push	{r7}
    292c:	b083      	sub	sp, #12
    292e:	af00      	add	r7, sp, #0
    2930:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
    2932:	4b05      	ldr	r3, [pc, #20]	; (2948 <EXTI_GenerateSWInterrupt+0x1e>)
    2934:	691a      	ldr	r2, [r3, #16]
    2936:	4904      	ldr	r1, [pc, #16]	; (2948 <EXTI_GenerateSWInterrupt+0x1e>)
    2938:	687b      	ldr	r3, [r7, #4]
    293a:	4313      	orrs	r3, r2
    293c:	610b      	str	r3, [r1, #16]
}
    293e:	bf00      	nop
    2940:	370c      	adds	r7, #12
    2942:	46bd      	mov	sp, r7
    2944:	bc80      	pop	{r7}
    2946:	4770      	bx	lr
    2948:	40010400 	.word	0x40010400

0000294c <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    294c:	b480      	push	{r7}
    294e:	b085      	sub	sp, #20
    2950:	af00      	add	r7, sp, #0
    2952:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2954:	2300      	movs	r3, #0
    2956:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    2958:	4b08      	ldr	r3, [pc, #32]	; (297c <EXTI_GetFlagStatus+0x30>)
    295a:	695a      	ldr	r2, [r3, #20]
    295c:	687b      	ldr	r3, [r7, #4]
    295e:	4013      	ands	r3, r2
    2960:	2b00      	cmp	r3, #0
    2962:	d002      	beq.n	296a <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
    2964:	2301      	movs	r3, #1
    2966:	73fb      	strb	r3, [r7, #15]
    2968:	e001      	b.n	296e <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
    296a:	2300      	movs	r3, #0
    296c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    296e:	7bfb      	ldrb	r3, [r7, #15]
}
    2970:	4618      	mov	r0, r3
    2972:	3714      	adds	r7, #20
    2974:	46bd      	mov	sp, r7
    2976:	bc80      	pop	{r7}
    2978:	4770      	bx	lr
    297a:	bf00      	nop
    297c:	40010400 	.word	0x40010400

00002980 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2980:	b480      	push	{r7}
    2982:	b083      	sub	sp, #12
    2984:	af00      	add	r7, sp, #0
    2986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    2988:	4a03      	ldr	r2, [pc, #12]	; (2998 <EXTI_ClearFlag+0x18>)
    298a:	687b      	ldr	r3, [r7, #4]
    298c:	6153      	str	r3, [r2, #20]
}
    298e:	bf00      	nop
    2990:	370c      	adds	r7, #12
    2992:	46bd      	mov	sp, r7
    2994:	bc80      	pop	{r7}
    2996:	4770      	bx	lr
    2998:	40010400 	.word	0x40010400

0000299c <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    299c:	b480      	push	{r7}
    299e:	b085      	sub	sp, #20
    29a0:	af00      	add	r7, sp, #0
    29a2:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    29a4:	2300      	movs	r3, #0
    29a6:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    29a8:	2300      	movs	r3, #0
    29aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
    29ac:	4b0c      	ldr	r3, [pc, #48]	; (29e0 <EXTI_GetITStatus+0x44>)
    29ae:	681b      	ldr	r3, [r3, #0]
    29b0:	687a      	ldr	r2, [r7, #4]
    29b2:	4013      	ands	r3, r2
    29b4:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    29b6:	4b0a      	ldr	r3, [pc, #40]	; (29e0 <EXTI_GetITStatus+0x44>)
    29b8:	695a      	ldr	r2, [r3, #20]
    29ba:	687b      	ldr	r3, [r7, #4]
    29bc:	4013      	ands	r3, r2
    29be:	2b00      	cmp	r3, #0
    29c0:	d005      	beq.n	29ce <EXTI_GetITStatus+0x32>
    29c2:	68bb      	ldr	r3, [r7, #8]
    29c4:	2b00      	cmp	r3, #0
    29c6:	d002      	beq.n	29ce <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
    29c8:	2301      	movs	r3, #1
    29ca:	73fb      	strb	r3, [r7, #15]
    29cc:	e001      	b.n	29d2 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
    29ce:	2300      	movs	r3, #0
    29d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    29d2:	7bfb      	ldrb	r3, [r7, #15]
}
    29d4:	4618      	mov	r0, r3
    29d6:	3714      	adds	r7, #20
    29d8:	46bd      	mov	sp, r7
    29da:	bc80      	pop	{r7}
    29dc:	4770      	bx	lr
    29de:	bf00      	nop
    29e0:	40010400 	.word	0x40010400

000029e4 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    29e4:	b480      	push	{r7}
    29e6:	b083      	sub	sp, #12
    29e8:	af00      	add	r7, sp, #0
    29ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    29ec:	4a03      	ldr	r2, [pc, #12]	; (29fc <EXTI_ClearITPendingBit+0x18>)
    29ee:	687b      	ldr	r3, [r7, #4]
    29f0:	6153      	str	r3, [r2, #20]
}
    29f2:	bf00      	nop
    29f4:	370c      	adds	r7, #12
    29f6:	46bd      	mov	sp, r7
    29f8:	bc80      	pop	{r7}
    29fa:	4770      	bx	lr
    29fc:	40010400 	.word	0x40010400

00002a00 <ADC_DeInit>:
  * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
    2a00:	b580      	push	{r7, lr}
    2a02:	b082      	sub	sp, #8
    2a04:	af00      	add	r7, sp, #0
    2a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  if (ADCx == ADC1)
    2a08:	687b      	ldr	r3, [r7, #4]
    2a0a:	4a17      	ldr	r2, [pc, #92]	; (2a68 <ADC_DeInit+0x68>)
    2a0c:	4293      	cmp	r3, r2
    2a0e:	d10a      	bne.n	2a26 <ADC_DeInit+0x26>
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
    2a10:	2101      	movs	r1, #1
    2a12:	f44f 7000 	mov.w	r0, #512	; 0x200
    2a16:	f7fe feaf 	bl	1778 <RCC_APB2PeriphResetCmd>
    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
    2a1a:	2100      	movs	r1, #0
    2a1c:	f44f 7000 	mov.w	r0, #512	; 0x200
    2a20:	f7fe feaa 	bl	1778 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
      /* Release ADC3 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
    }
  }
}
    2a24:	e01c      	b.n	2a60 <ADC_DeInit+0x60>
  else if (ADCx == ADC2)
    2a26:	687b      	ldr	r3, [r7, #4]
    2a28:	4a10      	ldr	r2, [pc, #64]	; (2a6c <ADC_DeInit+0x6c>)
    2a2a:	4293      	cmp	r3, r2
    2a2c:	d10a      	bne.n	2a44 <ADC_DeInit+0x44>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
    2a2e:	2101      	movs	r1, #1
    2a30:	f44f 6080 	mov.w	r0, #1024	; 0x400
    2a34:	f7fe fea0 	bl	1778 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
    2a38:	2100      	movs	r1, #0
    2a3a:	f44f 6080 	mov.w	r0, #1024	; 0x400
    2a3e:	f7fe fe9b 	bl	1778 <RCC_APB2PeriphResetCmd>
}
    2a42:	e00d      	b.n	2a60 <ADC_DeInit+0x60>
    if (ADCx == ADC3)
    2a44:	687b      	ldr	r3, [r7, #4]
    2a46:	4a0a      	ldr	r2, [pc, #40]	; (2a70 <ADC_DeInit+0x70>)
    2a48:	4293      	cmp	r3, r2
    2a4a:	d109      	bne.n	2a60 <ADC_DeInit+0x60>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
    2a4c:	2101      	movs	r1, #1
    2a4e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2a52:	f7fe fe91 	bl	1778 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
    2a56:	2100      	movs	r1, #0
    2a58:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2a5c:	f7fe fe8c 	bl	1778 <RCC_APB2PeriphResetCmd>
}
    2a60:	bf00      	nop
    2a62:	3708      	adds	r7, #8
    2a64:	46bd      	mov	sp, r7
    2a66:	bd80      	pop	{r7, pc}
    2a68:	40012400 	.word	0x40012400
    2a6c:	40012800 	.word	0x40012800
    2a70:	40013c00 	.word	0x40013c00

00002a74 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
    2a74:	b480      	push	{r7}
    2a76:	b085      	sub	sp, #20
    2a78:	af00      	add	r7, sp, #0
    2a7a:	6078      	str	r0, [r7, #4]
    2a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
    2a7e:	2300      	movs	r3, #0
    2a80:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
    2a82:	2300      	movs	r3, #0
    2a84:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
    2a86:	687b      	ldr	r3, [r7, #4]
    2a88:	685b      	ldr	r3, [r3, #4]
    2a8a:	60fb      	str	r3, [r7, #12]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
    2a8c:	68fb      	ldr	r3, [r7, #12]
    2a8e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2a92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2a96:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
    2a98:	683b      	ldr	r3, [r7, #0]
    2a9a:	681a      	ldr	r2, [r3, #0]
    2a9c:	683b      	ldr	r3, [r7, #0]
    2a9e:	791b      	ldrb	r3, [r3, #4]
    2aa0:	021b      	lsls	r3, r3, #8
    2aa2:	4313      	orrs	r3, r2
    2aa4:	68fa      	ldr	r2, [r7, #12]
    2aa6:	4313      	orrs	r3, r2
    2aa8:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
    2aaa:	687b      	ldr	r3, [r7, #4]
    2aac:	68fa      	ldr	r2, [r7, #12]
    2aae:	605a      	str	r2, [r3, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
    2ab0:	687b      	ldr	r3, [r7, #4]
    2ab2:	689b      	ldr	r3, [r3, #8]
    2ab4:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
    2ab6:	68fa      	ldr	r2, [r7, #12]
    2ab8:	4b16      	ldr	r3, [pc, #88]	; (2b14 <ADC_Init+0xa0>)
    2aba:	4013      	ands	r3, r2
    2abc:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
    2abe:	683b      	ldr	r3, [r7, #0]
    2ac0:	68da      	ldr	r2, [r3, #12]
    2ac2:	683b      	ldr	r3, [r7, #0]
    2ac4:	689b      	ldr	r3, [r3, #8]
    2ac6:	431a      	orrs	r2, r3
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
    2ac8:	683b      	ldr	r3, [r7, #0]
    2aca:	795b      	ldrb	r3, [r3, #5]
    2acc:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
    2ace:	4313      	orrs	r3, r2
    2ad0:	68fa      	ldr	r2, [r7, #12]
    2ad2:	4313      	orrs	r3, r2
    2ad4:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
    2ad6:	687b      	ldr	r3, [r7, #4]
    2ad8:	68fa      	ldr	r2, [r7, #12]
    2ada:	609a      	str	r2, [r3, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
    2adc:	687b      	ldr	r3, [r7, #4]
    2ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2ae0:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
    2ae2:	68fb      	ldr	r3, [r7, #12]
    2ae4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    2ae8:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
    2aea:	683b      	ldr	r3, [r7, #0]
    2aec:	7c1b      	ldrb	r3, [r3, #16]
    2aee:	3b01      	subs	r3, #1
    2af0:	b2da      	uxtb	r2, r3
    2af2:	7afb      	ldrb	r3, [r7, #11]
    2af4:	4313      	orrs	r3, r2
    2af6:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
    2af8:	7afb      	ldrb	r3, [r7, #11]
    2afa:	051b      	lsls	r3, r3, #20
    2afc:	68fa      	ldr	r2, [r7, #12]
    2afe:	4313      	orrs	r3, r2
    2b00:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
    2b02:	687b      	ldr	r3, [r7, #4]
    2b04:	68fa      	ldr	r2, [r7, #12]
    2b06:	62da      	str	r2, [r3, #44]	; 0x2c
}
    2b08:	bf00      	nop
    2b0a:	3714      	adds	r7, #20
    2b0c:	46bd      	mov	sp, r7
    2b0e:	bc80      	pop	{r7}
    2b10:	4770      	bx	lr
    2b12:	bf00      	nop
    2b14:	fff1f7fd 	.word	0xfff1f7fd

00002b18 <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
    2b18:	b480      	push	{r7}
    2b1a:	b083      	sub	sp, #12
    2b1c:	af00      	add	r7, sp, #0
    2b1e:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
    2b20:	687b      	ldr	r3, [r7, #4]
    2b22:	2200      	movs	r2, #0
    2b24:	601a      	str	r2, [r3, #0]
  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
    2b26:	687b      	ldr	r3, [r7, #4]
    2b28:	2200      	movs	r2, #0
    2b2a:	711a      	strb	r2, [r3, #4]
  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
    2b2c:	687b      	ldr	r3, [r7, #4]
    2b2e:	2200      	movs	r2, #0
    2b30:	715a      	strb	r2, [r3, #5]
  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
    2b32:	687b      	ldr	r3, [r7, #4]
    2b34:	2200      	movs	r2, #0
    2b36:	609a      	str	r2, [r3, #8]
  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
    2b38:	687b      	ldr	r3, [r7, #4]
    2b3a:	2200      	movs	r2, #0
    2b3c:	60da      	str	r2, [r3, #12]
  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
    2b3e:	687b      	ldr	r3, [r7, #4]
    2b40:	2201      	movs	r2, #1
    2b42:	741a      	strb	r2, [r3, #16]
}
    2b44:	bf00      	nop
    2b46:	370c      	adds	r7, #12
    2b48:	46bd      	mov	sp, r7
    2b4a:	bc80      	pop	{r7}
    2b4c:	4770      	bx	lr

00002b4e <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    2b4e:	b480      	push	{r7}
    2b50:	b083      	sub	sp, #12
    2b52:	af00      	add	r7, sp, #0
    2b54:	6078      	str	r0, [r7, #4]
    2b56:	460b      	mov	r3, r1
    2b58:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2b5a:	78fb      	ldrb	r3, [r7, #3]
    2b5c:	2b00      	cmp	r3, #0
    2b5e:	d006      	beq.n	2b6e <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
    2b60:	687b      	ldr	r3, [r7, #4]
    2b62:	689b      	ldr	r3, [r3, #8]
    2b64:	f043 0201 	orr.w	r2, r3, #1
    2b68:	687b      	ldr	r3, [r7, #4]
    2b6a:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
  }
}
    2b6c:	e005      	b.n	2b7a <ADC_Cmd+0x2c>
    ADCx->CR2 &= CR2_ADON_Reset;
    2b6e:	687b      	ldr	r3, [r7, #4]
    2b70:	689b      	ldr	r3, [r3, #8]
    2b72:	f023 0201 	bic.w	r2, r3, #1
    2b76:	687b      	ldr	r3, [r7, #4]
    2b78:	609a      	str	r2, [r3, #8]
}
    2b7a:	bf00      	nop
    2b7c:	370c      	adds	r7, #12
    2b7e:	46bd      	mov	sp, r7
    2b80:	bc80      	pop	{r7}
    2b82:	4770      	bx	lr

00002b84 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    2b84:	b480      	push	{r7}
    2b86:	b083      	sub	sp, #12
    2b88:	af00      	add	r7, sp, #0
    2b8a:	6078      	str	r0, [r7, #4]
    2b8c:	460b      	mov	r3, r1
    2b8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2b90:	78fb      	ldrb	r3, [r7, #3]
    2b92:	2b00      	cmp	r3, #0
    2b94:	d006      	beq.n	2ba4 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
    2b96:	687b      	ldr	r3, [r7, #4]
    2b98:	689b      	ldr	r3, [r3, #8]
    2b9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    2b9e:	687b      	ldr	r3, [r7, #4]
    2ba0:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
  }
}
    2ba2:	e005      	b.n	2bb0 <ADC_DMACmd+0x2c>
    ADCx->CR2 &= CR2_DMA_Reset;
    2ba4:	687b      	ldr	r3, [r7, #4]
    2ba6:	689b      	ldr	r3, [r3, #8]
    2ba8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    2bac:	687b      	ldr	r3, [r7, #4]
    2bae:	609a      	str	r2, [r3, #8]
}
    2bb0:	bf00      	nop
    2bb2:	370c      	adds	r7, #12
    2bb4:	46bd      	mov	sp, r7
    2bb6:	bc80      	pop	{r7}
    2bb8:	4770      	bx	lr

00002bba <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)
{
    2bba:	b480      	push	{r7}
    2bbc:	b085      	sub	sp, #20
    2bbe:	af00      	add	r7, sp, #0
    2bc0:	6078      	str	r0, [r7, #4]
    2bc2:	460b      	mov	r3, r1
    2bc4:	807b      	strh	r3, [r7, #2]
    2bc6:	4613      	mov	r3, r2
    2bc8:	707b      	strb	r3, [r7, #1]
  uint8_t itmask = 0;
    2bca:	2300      	movs	r3, #0
    2bcc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
    2bce:	887b      	ldrh	r3, [r7, #2]
    2bd0:	73fb      	strb	r3, [r7, #15]
  if (NewState != DISABLE)
    2bd2:	787b      	ldrb	r3, [r7, #1]
    2bd4:	2b00      	cmp	r3, #0
    2bd6:	d006      	beq.n	2be6 <ADC_ITConfig+0x2c>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
    2bd8:	687b      	ldr	r3, [r7, #4]
    2bda:	685a      	ldr	r2, [r3, #4]
    2bdc:	7bfb      	ldrb	r3, [r7, #15]
    2bde:	431a      	orrs	r2, r3
    2be0:	687b      	ldr	r3, [r7, #4]
    2be2:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
  }
}
    2be4:	e006      	b.n	2bf4 <ADC_ITConfig+0x3a>
    ADCx->CR1 &= (~(uint32_t)itmask);
    2be6:	687b      	ldr	r3, [r7, #4]
    2be8:	685a      	ldr	r2, [r3, #4]
    2bea:	7bfb      	ldrb	r3, [r7, #15]
    2bec:	43db      	mvns	r3, r3
    2bee:	401a      	ands	r2, r3
    2bf0:	687b      	ldr	r3, [r7, #4]
    2bf2:	605a      	str	r2, [r3, #4]
}
    2bf4:	bf00      	nop
    2bf6:	3714      	adds	r7, #20
    2bf8:	46bd      	mov	sp, r7
    2bfa:	bc80      	pop	{r7}
    2bfc:	4770      	bx	lr

00002bfe <ADC_ResetCalibration>:
  * @brief  Resets the selected ADC calibration registers.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
    2bfe:	b480      	push	{r7}
    2c00:	b083      	sub	sp, #12
    2c02:	af00      	add	r7, sp, #0
    2c04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibration registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
    2c06:	687b      	ldr	r3, [r7, #4]
    2c08:	689b      	ldr	r3, [r3, #8]
    2c0a:	f043 0208 	orr.w	r2, r3, #8
    2c0e:	687b      	ldr	r3, [r7, #4]
    2c10:	609a      	str	r2, [r3, #8]
}
    2c12:	bf00      	nop
    2c14:	370c      	adds	r7, #12
    2c16:	46bd      	mov	sp, r7
    2c18:	bc80      	pop	{r7}
    2c1a:	4770      	bx	lr

00002c1c <ADC_GetResetCalibrationStatus>:
  * @brief  Gets the selected ADC reset calibration registers status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC reset calibration registers (SET or RESET).
  */
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
{
    2c1c:	b480      	push	{r7}
    2c1e:	b085      	sub	sp, #20
    2c20:	af00      	add	r7, sp, #0
    2c22:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2c24:	2300      	movs	r3, #0
    2c26:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
    2c28:	687b      	ldr	r3, [r7, #4]
    2c2a:	689b      	ldr	r3, [r3, #8]
    2c2c:	f003 0308 	and.w	r3, r3, #8
    2c30:	2b00      	cmp	r3, #0
    2c32:	d002      	beq.n	2c3a <ADC_GetResetCalibrationStatus+0x1e>
  {
    /* RSTCAL bit is set */
    bitstatus = SET;
    2c34:	2301      	movs	r3, #1
    2c36:	73fb      	strb	r3, [r7, #15]
    2c38:	e001      	b.n	2c3e <ADC_GetResetCalibrationStatus+0x22>
  }
  else
  {
    /* RSTCAL bit is reset */
    bitstatus = RESET;
    2c3a:	2300      	movs	r3, #0
    2c3c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
    2c3e:	7bfb      	ldrb	r3, [r7, #15]
}
    2c40:	4618      	mov	r0, r3
    2c42:	3714      	adds	r7, #20
    2c44:	46bd      	mov	sp, r7
    2c46:	bc80      	pop	{r7}
    2c48:	4770      	bx	lr

00002c4a <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
    2c4a:	b480      	push	{r7}
    2c4c:	b083      	sub	sp, #12
    2c4e:	af00      	add	r7, sp, #0
    2c50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
    2c52:	687b      	ldr	r3, [r7, #4]
    2c54:	689b      	ldr	r3, [r3, #8]
    2c56:	f043 0204 	orr.w	r2, r3, #4
    2c5a:	687b      	ldr	r3, [r7, #4]
    2c5c:	609a      	str	r2, [r3, #8]
}
    2c5e:	bf00      	nop
    2c60:	370c      	adds	r7, #12
    2c62:	46bd      	mov	sp, r7
    2c64:	bc80      	pop	{r7}
    2c66:	4770      	bx	lr

00002c68 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
    2c68:	b480      	push	{r7}
    2c6a:	b085      	sub	sp, #20
    2c6c:	af00      	add	r7, sp, #0
    2c6e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2c70:	2300      	movs	r3, #0
    2c72:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
    2c74:	687b      	ldr	r3, [r7, #4]
    2c76:	689b      	ldr	r3, [r3, #8]
    2c78:	f003 0304 	and.w	r3, r3, #4
    2c7c:	2b00      	cmp	r3, #0
    2c7e:	d002      	beq.n	2c86 <ADC_GetCalibrationStatus+0x1e>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
    2c80:	2301      	movs	r3, #1
    2c82:	73fb      	strb	r3, [r7, #15]
    2c84:	e001      	b.n	2c8a <ADC_GetCalibrationStatus+0x22>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
    2c86:	2300      	movs	r3, #0
    2c88:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
    2c8a:	7bfb      	ldrb	r3, [r7, #15]
}
    2c8c:	4618      	mov	r0, r3
    2c8e:	3714      	adds	r7, #20
    2c90:	46bd      	mov	sp, r7
    2c92:	bc80      	pop	{r7}
    2c94:	4770      	bx	lr

00002c96 <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    2c96:	b480      	push	{r7}
    2c98:	b083      	sub	sp, #12
    2c9a:	af00      	add	r7, sp, #0
    2c9c:	6078      	str	r0, [r7, #4]
    2c9e:	460b      	mov	r3, r1
    2ca0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2ca2:	78fb      	ldrb	r3, [r7, #3]
    2ca4:	2b00      	cmp	r3, #0
    2ca6:	d006      	beq.n	2cb6 <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
    2ca8:	687b      	ldr	r3, [r7, #4]
    2caa:	689b      	ldr	r3, [r3, #8]
    2cac:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
    2cb0:	687b      	ldr	r3, [r7, #4]
    2cb2:	609a      	str	r2, [r3, #8]
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
  }
}
    2cb4:	e005      	b.n	2cc2 <ADC_SoftwareStartConvCmd+0x2c>
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
    2cb6:	687b      	ldr	r3, [r7, #4]
    2cb8:	689b      	ldr	r3, [r3, #8]
    2cba:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
    2cbe:	687b      	ldr	r3, [r7, #4]
    2cc0:	609a      	str	r2, [r3, #8]
}
    2cc2:	bf00      	nop
    2cc4:	370c      	adds	r7, #12
    2cc6:	46bd      	mov	sp, r7
    2cc8:	bc80      	pop	{r7}
    2cca:	4770      	bx	lr

00002ccc <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
    2ccc:	b480      	push	{r7}
    2cce:	b085      	sub	sp, #20
    2cd0:	af00      	add	r7, sp, #0
    2cd2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2cd4:	2300      	movs	r3, #0
    2cd6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & CR2_SWSTART_Set) != (uint32_t)RESET)
    2cd8:	687b      	ldr	r3, [r7, #4]
    2cda:	689b      	ldr	r3, [r3, #8]
    2cdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    2ce0:	2b00      	cmp	r3, #0
    2ce2:	d002      	beq.n	2cea <ADC_GetSoftwareStartConvStatus+0x1e>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
    2ce4:	2301      	movs	r3, #1
    2ce6:	73fb      	strb	r3, [r7, #15]
    2ce8:	e001      	b.n	2cee <ADC_GetSoftwareStartConvStatus+0x22>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
    2cea:	2300      	movs	r3, #0
    2cec:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SWSTART bit status */
  return  bitstatus;
    2cee:	7bfb      	ldrb	r3, [r7, #15]
}
    2cf0:	4618      	mov	r0, r3
    2cf2:	3714      	adds	r7, #20
    2cf4:	46bd      	mov	sp, r7
    2cf6:	bc80      	pop	{r7}
    2cf8:	4770      	bx	lr

00002cfa <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel
  *         count value. This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
    2cfa:	b480      	push	{r7}
    2cfc:	b085      	sub	sp, #20
    2cfe:	af00      	add	r7, sp, #0
    2d00:	6078      	str	r0, [r7, #4]
    2d02:	460b      	mov	r3, r1
    2d04:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
    2d06:	2300      	movs	r3, #0
    2d08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
    2d0a:	2300      	movs	r3, #0
    2d0c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
    2d0e:	687b      	ldr	r3, [r7, #4]
    2d10:	685b      	ldr	r3, [r3, #4]
    2d12:	60fb      	str	r3, [r7, #12]
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_Reset;
    2d14:	68fb      	ldr	r3, [r7, #12]
    2d16:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
    2d1a:	60fb      	str	r3, [r7, #12]
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
    2d1c:	78fb      	ldrb	r3, [r7, #3]
    2d1e:	3b01      	subs	r3, #1
    2d20:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
    2d22:	68bb      	ldr	r3, [r7, #8]
    2d24:	035b      	lsls	r3, r3, #13
    2d26:	68fa      	ldr	r2, [r7, #12]
    2d28:	4313      	orrs	r3, r2
    2d2a:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
    2d2c:	687b      	ldr	r3, [r7, #4]
    2d2e:	68fa      	ldr	r2, [r7, #12]
    2d30:	605a      	str	r2, [r3, #4]
}
    2d32:	bf00      	nop
    2d34:	3714      	adds	r7, #20
    2d36:	46bd      	mov	sp, r7
    2d38:	bc80      	pop	{r7}
    2d3a:	4770      	bx	lr

00002d3c <ADC_DiscModeCmd>:
  *         on regular group channel.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    2d3c:	b480      	push	{r7}
    2d3e:	b083      	sub	sp, #12
    2d40:	af00      	add	r7, sp, #0
    2d42:	6078      	str	r0, [r7, #4]
    2d44:	460b      	mov	r3, r1
    2d46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2d48:	78fb      	ldrb	r3, [r7, #3]
    2d4a:	2b00      	cmp	r3, #0
    2d4c:	d006      	beq.n	2d5c <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= CR1_DISCEN_Set;
    2d4e:	687b      	ldr	r3, [r7, #4]
    2d50:	685b      	ldr	r3, [r3, #4]
    2d52:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    2d56:	687b      	ldr	r3, [r7, #4]
    2d58:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= CR1_DISCEN_Reset;
  }
}
    2d5a:	e005      	b.n	2d68 <ADC_DiscModeCmd+0x2c>
    ADCx->CR1 &= CR1_DISCEN_Reset;
    2d5c:	687b      	ldr	r3, [r7, #4]
    2d5e:	685b      	ldr	r3, [r3, #4]
    2d60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    2d64:	687b      	ldr	r3, [r7, #4]
    2d66:	605a      	str	r2, [r3, #4]
}
    2d68:	bf00      	nop
    2d6a:	370c      	adds	r7, #12
    2d6c:	46bd      	mov	sp, r7
    2d6e:	bc80      	pop	{r7}
    2d70:	4770      	bx	lr

00002d72 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
    2d72:	b480      	push	{r7}
    2d74:	b085      	sub	sp, #20
    2d76:	af00      	add	r7, sp, #0
    2d78:	6078      	str	r0, [r7, #4]
    2d7a:	4608      	mov	r0, r1
    2d7c:	4611      	mov	r1, r2
    2d7e:	461a      	mov	r2, r3
    2d80:	4603      	mov	r3, r0
    2d82:	70fb      	strb	r3, [r7, #3]
    2d84:	460b      	mov	r3, r1
    2d86:	70bb      	strb	r3, [r7, #2]
    2d88:	4613      	mov	r3, r2
    2d8a:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
    2d8c:	2300      	movs	r3, #0
    2d8e:	60fb      	str	r3, [r7, #12]
    2d90:	2300      	movs	r3, #0
    2d92:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
    2d94:	78fb      	ldrb	r3, [r7, #3]
    2d96:	2b09      	cmp	r3, #9
    2d98:	d923      	bls.n	2de2 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    2d9a:	687b      	ldr	r3, [r7, #4]
    2d9c:	68db      	ldr	r3, [r3, #12]
    2d9e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
    2da0:	78fb      	ldrb	r3, [r7, #3]
    2da2:	f1a3 020a 	sub.w	r2, r3, #10
    2da6:	4613      	mov	r3, r2
    2da8:	005b      	lsls	r3, r3, #1
    2daa:	4413      	add	r3, r2
    2dac:	2207      	movs	r2, #7
    2dae:	fa02 f303 	lsl.w	r3, r2, r3
    2db2:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    2db4:	68bb      	ldr	r3, [r7, #8]
    2db6:	43db      	mvns	r3, r3
    2db8:	68fa      	ldr	r2, [r7, #12]
    2dba:	4013      	ands	r3, r2
    2dbc:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
    2dbe:	7879      	ldrb	r1, [r7, #1]
    2dc0:	78fb      	ldrb	r3, [r7, #3]
    2dc2:	f1a3 020a 	sub.w	r2, r3, #10
    2dc6:	4613      	mov	r3, r2
    2dc8:	005b      	lsls	r3, r3, #1
    2dca:	4413      	add	r3, r2
    2dcc:	fa01 f303 	lsl.w	r3, r1, r3
    2dd0:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    2dd2:	68fa      	ldr	r2, [r7, #12]
    2dd4:	68bb      	ldr	r3, [r7, #8]
    2dd6:	4313      	orrs	r3, r2
    2dd8:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
    2dda:	687b      	ldr	r3, [r7, #4]
    2ddc:	68fa      	ldr	r2, [r7, #12]
    2dde:	60da      	str	r2, [r3, #12]
    2de0:	e01e      	b.n	2e20 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    2de2:	687b      	ldr	r3, [r7, #4]
    2de4:	691b      	ldr	r3, [r3, #16]
    2de6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
    2de8:	78fa      	ldrb	r2, [r7, #3]
    2dea:	4613      	mov	r3, r2
    2dec:	005b      	lsls	r3, r3, #1
    2dee:	4413      	add	r3, r2
    2df0:	2207      	movs	r2, #7
    2df2:	fa02 f303 	lsl.w	r3, r2, r3
    2df6:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    2df8:	68bb      	ldr	r3, [r7, #8]
    2dfa:	43db      	mvns	r3, r3
    2dfc:	68fa      	ldr	r2, [r7, #12]
    2dfe:	4013      	ands	r3, r2
    2e00:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    2e02:	7879      	ldrb	r1, [r7, #1]
    2e04:	78fa      	ldrb	r2, [r7, #3]
    2e06:	4613      	mov	r3, r2
    2e08:	005b      	lsls	r3, r3, #1
    2e0a:	4413      	add	r3, r2
    2e0c:	fa01 f303 	lsl.w	r3, r1, r3
    2e10:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    2e12:	68fa      	ldr	r2, [r7, #12]
    2e14:	68bb      	ldr	r3, [r7, #8]
    2e16:	4313      	orrs	r3, r2
    2e18:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
    2e1a:	687b      	ldr	r3, [r7, #4]
    2e1c:	68fa      	ldr	r2, [r7, #12]
    2e1e:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
    2e20:	78bb      	ldrb	r3, [r7, #2]
    2e22:	2b06      	cmp	r3, #6
    2e24:	d821      	bhi.n	2e6a <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    2e26:	687b      	ldr	r3, [r7, #4]
    2e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2e2a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
    2e2c:	78bb      	ldrb	r3, [r7, #2]
    2e2e:	1e5a      	subs	r2, r3, #1
    2e30:	4613      	mov	r3, r2
    2e32:	009b      	lsls	r3, r3, #2
    2e34:	4413      	add	r3, r2
    2e36:	221f      	movs	r2, #31
    2e38:	fa02 f303 	lsl.w	r3, r2, r3
    2e3c:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    2e3e:	68bb      	ldr	r3, [r7, #8]
    2e40:	43db      	mvns	r3, r3
    2e42:	68fa      	ldr	r2, [r7, #12]
    2e44:	4013      	ands	r3, r2
    2e46:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
    2e48:	78f9      	ldrb	r1, [r7, #3]
    2e4a:	78bb      	ldrb	r3, [r7, #2]
    2e4c:	1e5a      	subs	r2, r3, #1
    2e4e:	4613      	mov	r3, r2
    2e50:	009b      	lsls	r3, r3, #2
    2e52:	4413      	add	r3, r2
    2e54:	fa01 f303 	lsl.w	r3, r1, r3
    2e58:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    2e5a:	68fa      	ldr	r2, [r7, #12]
    2e5c:	68bb      	ldr	r3, [r7, #8]
    2e5e:	4313      	orrs	r3, r2
    2e60:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
    2e62:	687b      	ldr	r3, [r7, #4]
    2e64:	68fa      	ldr	r2, [r7, #12]
    2e66:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
    2e68:	e047      	b.n	2efa <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
    2e6a:	78bb      	ldrb	r3, [r7, #2]
    2e6c:	2b0c      	cmp	r3, #12
    2e6e:	d821      	bhi.n	2eb4 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
    2e70:	687b      	ldr	r3, [r7, #4]
    2e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2e74:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
    2e76:	78bb      	ldrb	r3, [r7, #2]
    2e78:	1fda      	subs	r2, r3, #7
    2e7a:	4613      	mov	r3, r2
    2e7c:	009b      	lsls	r3, r3, #2
    2e7e:	4413      	add	r3, r2
    2e80:	221f      	movs	r2, #31
    2e82:	fa02 f303 	lsl.w	r3, r2, r3
    2e86:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
    2e88:	68bb      	ldr	r3, [r7, #8]
    2e8a:	43db      	mvns	r3, r3
    2e8c:	68fa      	ldr	r2, [r7, #12]
    2e8e:	4013      	ands	r3, r2
    2e90:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
    2e92:	78f9      	ldrb	r1, [r7, #3]
    2e94:	78bb      	ldrb	r3, [r7, #2]
    2e96:	1fda      	subs	r2, r3, #7
    2e98:	4613      	mov	r3, r2
    2e9a:	009b      	lsls	r3, r3, #2
    2e9c:	4413      	add	r3, r2
    2e9e:	fa01 f303 	lsl.w	r3, r1, r3
    2ea2:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
    2ea4:	68fa      	ldr	r2, [r7, #12]
    2ea6:	68bb      	ldr	r3, [r7, #8]
    2ea8:	4313      	orrs	r3, r2
    2eaa:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
    2eac:	687b      	ldr	r3, [r7, #4]
    2eae:	68fa      	ldr	r2, [r7, #12]
    2eb0:	631a      	str	r2, [r3, #48]	; 0x30
}
    2eb2:	e022      	b.n	2efa <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
    2eb4:	687b      	ldr	r3, [r7, #4]
    2eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2eb8:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
    2eba:	78bb      	ldrb	r3, [r7, #2]
    2ebc:	f1a3 020d 	sub.w	r2, r3, #13
    2ec0:	4613      	mov	r3, r2
    2ec2:	009b      	lsls	r3, r3, #2
    2ec4:	4413      	add	r3, r2
    2ec6:	221f      	movs	r2, #31
    2ec8:	fa02 f303 	lsl.w	r3, r2, r3
    2ecc:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
    2ece:	68bb      	ldr	r3, [r7, #8]
    2ed0:	43db      	mvns	r3, r3
    2ed2:	68fa      	ldr	r2, [r7, #12]
    2ed4:	4013      	ands	r3, r2
    2ed6:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
    2ed8:	78f9      	ldrb	r1, [r7, #3]
    2eda:	78bb      	ldrb	r3, [r7, #2]
    2edc:	f1a3 020d 	sub.w	r2, r3, #13
    2ee0:	4613      	mov	r3, r2
    2ee2:	009b      	lsls	r3, r3, #2
    2ee4:	4413      	add	r3, r2
    2ee6:	fa01 f303 	lsl.w	r3, r1, r3
    2eea:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
    2eec:	68fa      	ldr	r2, [r7, #12]
    2eee:	68bb      	ldr	r3, [r7, #8]
    2ef0:	4313      	orrs	r3, r2
    2ef2:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
    2ef4:	687b      	ldr	r3, [r7, #4]
    2ef6:	68fa      	ldr	r2, [r7, #12]
    2ef8:	62da      	str	r2, [r3, #44]	; 0x2c
}
    2efa:	bf00      	nop
    2efc:	3714      	adds	r7, #20
    2efe:	46bd      	mov	sp, r7
    2f00:	bc80      	pop	{r7}
    2f02:	4770      	bx	lr

00002f04 <ADC_ExternalTrigConvCmd>:
  * @param  NewState: new state of the selected ADC external trigger start of conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    2f04:	b480      	push	{r7}
    2f06:	b083      	sub	sp, #12
    2f08:	af00      	add	r7, sp, #0
    2f0a:	6078      	str	r0, [r7, #4]
    2f0c:	460b      	mov	r3, r1
    2f0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2f10:	78fb      	ldrb	r3, [r7, #3]
    2f12:	2b00      	cmp	r3, #0
    2f14:	d006      	beq.n	2f24 <ADC_ExternalTrigConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event */
    ADCx->CR2 |= CR2_EXTTRIG_Set;
    2f16:	687b      	ldr	r3, [r7, #4]
    2f18:	689b      	ldr	r3, [r3, #8]
    2f1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
    2f1e:	687b      	ldr	r3, [r7, #4]
    2f20:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC conversion on external event */
    ADCx->CR2 &= CR2_EXTTRIG_Reset;
  }
}
    2f22:	e005      	b.n	2f30 <ADC_ExternalTrigConvCmd+0x2c>
    ADCx->CR2 &= CR2_EXTTRIG_Reset;
    2f24:	687b      	ldr	r3, [r7, #4]
    2f26:	689b      	ldr	r3, [r3, #8]
    2f28:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
    2f2c:	687b      	ldr	r3, [r7, #4]
    2f2e:	609a      	str	r2, [r3, #8]
}
    2f30:	bf00      	nop
    2f32:	370c      	adds	r7, #12
    2f34:	46bd      	mov	sp, r7
    2f36:	bc80      	pop	{r7}
    2f38:	4770      	bx	lr

00002f3a <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
    2f3a:	b480      	push	{r7}
    2f3c:	b083      	sub	sp, #12
    2f3e:	af00      	add	r7, sp, #0
    2f40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
    2f42:	687b      	ldr	r3, [r7, #4]
    2f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    2f46:	b29b      	uxth	r3, r3
}
    2f48:	4618      	mov	r0, r3
    2f4a:	370c      	adds	r7, #12
    2f4c:	46bd      	mov	sp, r7
    2f4e:	bc80      	pop	{r7}
    2f50:	4770      	bx	lr

00002f52 <ADC_GetDualModeConversionValue>:
/**
  * @brief  Returns the last ADC1 and ADC2 conversion result data in dual mode.
  * @retval The Data conversion value.
  */
uint32_t ADC_GetDualModeConversionValue(void)
{
    2f52:	b480      	push	{r7}
    2f54:	af00      	add	r7, sp, #0
  /* Return the dual mode conversion value */
  return (*(__IO uint32_t *) DR_ADDRESS);
    2f56:	4b03      	ldr	r3, [pc, #12]	; (2f64 <ADC_GetDualModeConversionValue+0x12>)
    2f58:	681b      	ldr	r3, [r3, #0]
}
    2f5a:	4618      	mov	r0, r3
    2f5c:	46bd      	mov	sp, r7
    2f5e:	bc80      	pop	{r7}
    2f60:	4770      	bx	lr
    2f62:	bf00      	nop
    2f64:	4001244c 	.word	0x4001244c

00002f68 <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    2f68:	b480      	push	{r7}
    2f6a:	b083      	sub	sp, #12
    2f6c:	af00      	add	r7, sp, #0
    2f6e:	6078      	str	r0, [r7, #4]
    2f70:	460b      	mov	r3, r1
    2f72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2f74:	78fb      	ldrb	r3, [r7, #3]
    2f76:	2b00      	cmp	r3, #0
    2f78:	d006      	beq.n	2f88 <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= CR1_JAUTO_Set;
    2f7a:	687b      	ldr	r3, [r7, #4]
    2f7c:	685b      	ldr	r3, [r3, #4]
    2f7e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    2f82:	687b      	ldr	r3, [r7, #4]
    2f84:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= CR1_JAUTO_Reset;
  }
}
    2f86:	e005      	b.n	2f94 <ADC_AutoInjectedConvCmd+0x2c>
    ADCx->CR1 &= CR1_JAUTO_Reset;
    2f88:	687b      	ldr	r3, [r7, #4]
    2f8a:	685b      	ldr	r3, [r3, #4]
    2f8c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
    2f90:	687b      	ldr	r3, [r7, #4]
    2f92:	605a      	str	r2, [r3, #4]
}
    2f94:	bf00      	nop
    2f96:	370c      	adds	r7, #12
    2f98:	46bd      	mov	sp, r7
    2f9a:	bc80      	pop	{r7}
    2f9c:	4770      	bx	lr

00002f9e <ADC_InjectedDiscModeCmd>:
  *         on injected group channel.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    2f9e:	b480      	push	{r7}
    2fa0:	b083      	sub	sp, #12
    2fa2:	af00      	add	r7, sp, #0
    2fa4:	6078      	str	r0, [r7, #4]
    2fa6:	460b      	mov	r3, r1
    2fa8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2faa:	78fb      	ldrb	r3, [r7, #3]
    2fac:	2b00      	cmp	r3, #0
    2fae:	d006      	beq.n	2fbe <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= CR1_JDISCEN_Set;
    2fb0:	687b      	ldr	r3, [r7, #4]
    2fb2:	685b      	ldr	r3, [r3, #4]
    2fb4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    2fb8:	687b      	ldr	r3, [r7, #4]
    2fba:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= CR1_JDISCEN_Reset;
  }
}
    2fbc:	e005      	b.n	2fca <ADC_InjectedDiscModeCmd+0x2c>
    ADCx->CR1 &= CR1_JDISCEN_Reset;
    2fbe:	687b      	ldr	r3, [r7, #4]
    2fc0:	685b      	ldr	r3, [r3, #4]
    2fc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    2fc6:	687b      	ldr	r3, [r7, #4]
    2fc8:	605a      	str	r2, [r3, #4]
}
    2fca:	bf00      	nop
    2fcc:	370c      	adds	r7, #12
    2fce:	46bd      	mov	sp, r7
    2fd0:	bc80      	pop	{r7}
    2fd2:	4770      	bx	lr

00002fd4 <ADC_ExternalTrigInjectedConvConfig>:
  *     @arg ADC_ExternalTrigInjecConv_None: Injected conversion started by software and not
  *                                          by external trigger (for ADC1, ADC2 and ADC3)
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
    2fd4:	b480      	push	{r7}
    2fd6:	b085      	sub	sp, #20
    2fd8:	af00      	add	r7, sp, #0
    2fda:	6078      	str	r0, [r7, #4]
    2fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    2fde:	2300      	movs	r3, #0
    2fe0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
    2fe2:	687b      	ldr	r3, [r7, #4]
    2fe4:	689b      	ldr	r3, [r3, #8]
    2fe6:	60fb      	str	r3, [r7, #12]
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_Reset;
    2fe8:	68fb      	ldr	r3, [r7, #12]
    2fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    2fee:	60fb      	str	r3, [r7, #12]
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
    2ff0:	68fa      	ldr	r2, [r7, #12]
    2ff2:	683b      	ldr	r3, [r7, #0]
    2ff4:	4313      	orrs	r3, r2
    2ff6:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
    2ff8:	687b      	ldr	r3, [r7, #4]
    2ffa:	68fa      	ldr	r2, [r7, #12]
    2ffc:	609a      	str	r2, [r3, #8]
}
    2ffe:	bf00      	nop
    3000:	3714      	adds	r7, #20
    3002:	46bd      	mov	sp, r7
    3004:	bc80      	pop	{r7}
    3006:	4770      	bx	lr

00003008 <ADC_ExternalTrigInjectedConvCmd>:
  *         injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    3008:	b480      	push	{r7}
    300a:	b083      	sub	sp, #12
    300c:	af00      	add	r7, sp, #0
    300e:	6078      	str	r0, [r7, #4]
    3010:	460b      	mov	r3, r1
    3012:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3014:	78fb      	ldrb	r3, [r7, #3]
    3016:	2b00      	cmp	r3, #0
    3018:	d006      	beq.n	3028 <ADC_ExternalTrigInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC external event selection for injected group */
    ADCx->CR2 |= CR2_JEXTTRIG_Set;
    301a:	687b      	ldr	r3, [r7, #4]
    301c:	689b      	ldr	r3, [r3, #8]
    301e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
    3022:	687b      	ldr	r3, [r7, #4]
    3024:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC external event selection for injected group */
    ADCx->CR2 &= CR2_JEXTTRIG_Reset;
  }
}
    3026:	e005      	b.n	3034 <ADC_ExternalTrigInjectedConvCmd+0x2c>
    ADCx->CR2 &= CR2_JEXTTRIG_Reset;
    3028:	687b      	ldr	r3, [r7, #4]
    302a:	689b      	ldr	r3, [r3, #8]
    302c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
    3030:	687b      	ldr	r3, [r7, #4]
    3032:	609a      	str	r2, [r3, #8]
}
    3034:	bf00      	nop
    3036:	370c      	adds	r7, #12
    3038:	46bd      	mov	sp, r7
    303a:	bc80      	pop	{r7}
    303c:	4770      	bx	lr

0000303e <ADC_SoftwareStartInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC software start injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    303e:	b480      	push	{r7}
    3040:	b083      	sub	sp, #12
    3042:	af00      	add	r7, sp, #0
    3044:	6078      	str	r0, [r7, #4]
    3046:	460b      	mov	r3, r1
    3048:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    304a:	78fb      	ldrb	r3, [r7, #3]
    304c:	2b00      	cmp	r3, #0
    304e:	d006      	beq.n	305e <ADC_SoftwareStartInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC conversion for injected group on external event and start the selected
       ADC injected conversion */
    ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
    3050:	687b      	ldr	r3, [r7, #4]
    3052:	689b      	ldr	r3, [r3, #8]
    3054:	f443 1202 	orr.w	r2, r3, #2129920	; 0x208000
    3058:	687b      	ldr	r3, [r7, #4]
    305a:	609a      	str	r2, [r3, #8]
  {
    /* Disable the selected ADC conversion on external event for injected group and stop the selected
       ADC injected conversion */
    ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
  }
}
    305c:	e005      	b.n	306a <ADC_SoftwareStartInjectedConvCmd+0x2c>
    ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
    305e:	687b      	ldr	r3, [r7, #4]
    3060:	689b      	ldr	r3, [r3, #8]
    3062:	f423 1202 	bic.w	r2, r3, #2129920	; 0x208000
    3066:	687b      	ldr	r3, [r7, #4]
    3068:	609a      	str	r2, [r3, #8]
}
    306a:	bf00      	nop
    306c:	370c      	adds	r7, #12
    306e:	46bd      	mov	sp, r7
    3070:	bc80      	pop	{r7}
    3072:	4770      	bx	lr

00003074 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
    3074:	b480      	push	{r7}
    3076:	b085      	sub	sp, #20
    3078:	af00      	add	r7, sp, #0
    307a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    307c:	2300      	movs	r3, #0
    307e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & CR2_JSWSTART_Set) != (uint32_t)RESET)
    3080:	687b      	ldr	r3, [r7, #4]
    3082:	689b      	ldr	r3, [r3, #8]
    3084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    3088:	2b00      	cmp	r3, #0
    308a:	d002      	beq.n	3092 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x1e>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
    308c:	2301      	movs	r3, #1
    308e:	73fb      	strb	r3, [r7, #15]
    3090:	e001      	b.n	3096 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
    3092:	2300      	movs	r3, #0
    3094:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
    3096:	7bfb      	ldrb	r3, [r7, #15]
}
    3098:	4618      	mov	r0, r3
    309a:	3714      	adds	r7, #20
    309c:	46bd      	mov	sp, r7
    309e:	bc80      	pop	{r7}
    30a0:	4770      	bx	lr

000030a2 <ADC_InjectedChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
    30a2:	b480      	push	{r7}
    30a4:	b087      	sub	sp, #28
    30a6:	af00      	add	r7, sp, #0
    30a8:	6078      	str	r0, [r7, #4]
    30aa:	4608      	mov	r0, r1
    30ac:	4611      	mov	r1, r2
    30ae:	461a      	mov	r2, r3
    30b0:	4603      	mov	r3, r0
    30b2:	70fb      	strb	r3, [r7, #3]
    30b4:	460b      	mov	r3, r1
    30b6:	70bb      	strb	r3, [r7, #2]
    30b8:	4613      	mov	r3, r2
    30ba:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
    30bc:	2300      	movs	r3, #0
    30be:	617b      	str	r3, [r7, #20]
    30c0:	2300      	movs	r3, #0
    30c2:	613b      	str	r3, [r7, #16]
    30c4:	2300      	movs	r3, #0
    30c6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
    30c8:	78fb      	ldrb	r3, [r7, #3]
    30ca:	2b09      	cmp	r3, #9
    30cc:	d923      	bls.n	3116 <ADC_InjectedChannelConfig+0x74>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    30ce:	687b      	ldr	r3, [r7, #4]
    30d0:	68db      	ldr	r3, [r3, #12]
    30d2:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
    30d4:	78fb      	ldrb	r3, [r7, #3]
    30d6:	f1a3 020a 	sub.w	r2, r3, #10
    30da:	4613      	mov	r3, r2
    30dc:	005b      	lsls	r3, r3, #1
    30de:	4413      	add	r3, r2
    30e0:	2207      	movs	r2, #7
    30e2:	fa02 f303 	lsl.w	r3, r2, r3
    30e6:	613b      	str	r3, [r7, #16]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    30e8:	693b      	ldr	r3, [r7, #16]
    30ea:	43db      	mvns	r3, r3
    30ec:	697a      	ldr	r2, [r7, #20]
    30ee:	4013      	ands	r3, r2
    30f0:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
    30f2:	7879      	ldrb	r1, [r7, #1]
    30f4:	78fb      	ldrb	r3, [r7, #3]
    30f6:	f1a3 020a 	sub.w	r2, r3, #10
    30fa:	4613      	mov	r3, r2
    30fc:	005b      	lsls	r3, r3, #1
    30fe:	4413      	add	r3, r2
    3100:	fa01 f303 	lsl.w	r3, r1, r3
    3104:	613b      	str	r3, [r7, #16]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    3106:	697a      	ldr	r2, [r7, #20]
    3108:	693b      	ldr	r3, [r7, #16]
    310a:	4313      	orrs	r3, r2
    310c:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
    310e:	687b      	ldr	r3, [r7, #4]
    3110:	697a      	ldr	r2, [r7, #20]
    3112:	60da      	str	r2, [r3, #12]
    3114:	e01e      	b.n	3154 <ADC_InjectedChannelConfig+0xb2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    3116:	687b      	ldr	r3, [r7, #4]
    3118:	691b      	ldr	r3, [r3, #16]
    311a:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
    311c:	78fa      	ldrb	r2, [r7, #3]
    311e:	4613      	mov	r3, r2
    3120:	005b      	lsls	r3, r3, #1
    3122:	4413      	add	r3, r2
    3124:	2207      	movs	r2, #7
    3126:	fa02 f303 	lsl.w	r3, r2, r3
    312a:	613b      	str	r3, [r7, #16]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    312c:	693b      	ldr	r3, [r7, #16]
    312e:	43db      	mvns	r3, r3
    3130:	697a      	ldr	r2, [r7, #20]
    3132:	4013      	ands	r3, r2
    3134:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    3136:	7879      	ldrb	r1, [r7, #1]
    3138:	78fa      	ldrb	r2, [r7, #3]
    313a:	4613      	mov	r3, r2
    313c:	005b      	lsls	r3, r3, #1
    313e:	4413      	add	r3, r2
    3140:	fa01 f303 	lsl.w	r3, r1, r3
    3144:	613b      	str	r3, [r7, #16]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    3146:	697a      	ldr	r2, [r7, #20]
    3148:	693b      	ldr	r3, [r7, #16]
    314a:	4313      	orrs	r3, r2
    314c:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
    314e:	687b      	ldr	r3, [r7, #4]
    3150:	697a      	ldr	r2, [r7, #20]
    3152:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
    3154:	687b      	ldr	r3, [r7, #4]
    3156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3158:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
    315a:	697b      	ldr	r3, [r7, #20]
    315c:	0d1b      	lsrs	r3, r3, #20
    315e:	f003 0303 	and.w	r3, r3, #3
    3162:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_Set << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
    3164:	68fb      	ldr	r3, [r7, #12]
    3166:	b2db      	uxtb	r3, r3
    3168:	78ba      	ldrb	r2, [r7, #2]
    316a:	1ad3      	subs	r3, r2, r3
    316c:	b2db      	uxtb	r3, r3
    316e:	3302      	adds	r3, #2
    3170:	b2db      	uxtb	r3, r3
    3172:	461a      	mov	r2, r3
    3174:	4613      	mov	r3, r2
    3176:	009b      	lsls	r3, r3, #2
    3178:	4413      	add	r3, r2
    317a:	221f      	movs	r2, #31
    317c:	fa02 f303 	lsl.w	r3, r2, r3
    3180:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
    3182:	693b      	ldr	r3, [r7, #16]
    3184:	43db      	mvns	r3, r3
    3186:	697a      	ldr	r2, [r7, #20]
    3188:	4013      	ands	r3, r2
    318a:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
    318c:	78fa      	ldrb	r2, [r7, #3]
    318e:	68fb      	ldr	r3, [r7, #12]
    3190:	b2db      	uxtb	r3, r3
    3192:	78b9      	ldrb	r1, [r7, #2]
    3194:	1acb      	subs	r3, r1, r3
    3196:	b2db      	uxtb	r3, r3
    3198:	3302      	adds	r3, #2
    319a:	b2db      	uxtb	r3, r3
    319c:	4619      	mov	r1, r3
    319e:	460b      	mov	r3, r1
    31a0:	009b      	lsls	r3, r3, #2
    31a2:	440b      	add	r3, r1
    31a4:	fa02 f303 	lsl.w	r3, r2, r3
    31a8:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
    31aa:	697a      	ldr	r2, [r7, #20]
    31ac:	693b      	ldr	r3, [r7, #16]
    31ae:	4313      	orrs	r3, r2
    31b0:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
    31b2:	687b      	ldr	r3, [r7, #4]
    31b4:	697a      	ldr	r2, [r7, #20]
    31b6:	639a      	str	r2, [r3, #56]	; 0x38
}
    31b8:	bf00      	nop
    31ba:	371c      	adds	r7, #28
    31bc:	46bd      	mov	sp, r7
    31be:	bc80      	pop	{r7}
    31c0:	4770      	bx	lr

000031c2 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *   This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
    31c2:	b480      	push	{r7}
    31c4:	b085      	sub	sp, #20
    31c6:	af00      	add	r7, sp, #0
    31c8:	6078      	str	r0, [r7, #4]
    31ca:	460b      	mov	r3, r1
    31cc:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
    31ce:	2300      	movs	r3, #0
    31d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
    31d2:	2300      	movs	r3, #0
    31d4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
    31d6:	687b      	ldr	r3, [r7, #4]
    31d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    31da:	60fb      	str	r3, [r7, #12]
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= JSQR_JL_Reset;
    31dc:	68fb      	ldr	r3, [r7, #12]
    31de:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    31e2:	60fb      	str	r3, [r7, #12]
  /* Set the injected sequnence lenght JL bits */
  tmpreg2 = Length - 1; 
    31e4:	78fb      	ldrb	r3, [r7, #3]
    31e6:	3b01      	subs	r3, #1
    31e8:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
    31ea:	68bb      	ldr	r3, [r7, #8]
    31ec:	051b      	lsls	r3, r3, #20
    31ee:	68fa      	ldr	r2, [r7, #12]
    31f0:	4313      	orrs	r3, r2
    31f2:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
    31f4:	687b      	ldr	r3, [r7, #4]
    31f6:	68fa      	ldr	r2, [r7, #12]
    31f8:	639a      	str	r2, [r3, #56]	; 0x38
}
    31fa:	bf00      	nop
    31fc:	3714      	adds	r7, #20
    31fe:	46bd      	mov	sp, r7
    3200:	bc80      	pop	{r7}
    3202:	4770      	bx	lr

00003204 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
    3204:	b480      	push	{r7}
    3206:	b085      	sub	sp, #20
    3208:	af00      	add	r7, sp, #0
    320a:	6078      	str	r0, [r7, #4]
    320c:	460b      	mov	r3, r1
    320e:	70fb      	strb	r3, [r7, #3]
    3210:	4613      	mov	r3, r2
    3212:	803b      	strh	r3, [r7, #0]
  __IO uint32_t tmp = 0;
    3214:	2300      	movs	r3, #0
    3216:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));  
  
  tmp = (uint32_t)ADCx;
    3218:	687b      	ldr	r3, [r7, #4]
    321a:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
    321c:	78fa      	ldrb	r2, [r7, #3]
    321e:	68fb      	ldr	r3, [r7, #12]
    3220:	4413      	add	r3, r2
    3222:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
  *(__IO uint32_t *) tmp = (uint32_t)Offset;
    3224:	68fb      	ldr	r3, [r7, #12]
    3226:	461a      	mov	r2, r3
    3228:	883b      	ldrh	r3, [r7, #0]
    322a:	6013      	str	r3, [r2, #0]
}
    322c:	bf00      	nop
    322e:	3714      	adds	r7, #20
    3230:	46bd      	mov	sp, r7
    3232:	bc80      	pop	{r7}
    3234:	4770      	bx	lr

00003236 <ADC_GetInjectedConversionValue>:
  *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
    3236:	b480      	push	{r7}
    3238:	b085      	sub	sp, #20
    323a:	af00      	add	r7, sp, #0
    323c:	6078      	str	r0, [r7, #4]
    323e:	460b      	mov	r3, r1
    3240:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
    3242:	2300      	movs	r3, #0
    3244:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
    3246:	687b      	ldr	r3, [r7, #4]
    3248:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_Offset;
    324a:	78fa      	ldrb	r2, [r7, #3]
    324c:	68fb      	ldr	r3, [r7, #12]
    324e:	4413      	add	r3, r2
    3250:	3328      	adds	r3, #40	; 0x28
    3252:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp);   
    3254:	68fb      	ldr	r3, [r7, #12]
    3256:	681b      	ldr	r3, [r3, #0]
    3258:	b29b      	uxth	r3, r3
}
    325a:	4618      	mov	r0, r3
    325c:	3714      	adds	r7, #20
    325e:	46bd      	mov	sp, r7
    3260:	bc80      	pop	{r7}
    3262:	4770      	bx	lr

00003264 <ADC_AnalogWatchdogCmd>:
  *     @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *     @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
    3264:	b480      	push	{r7}
    3266:	b085      	sub	sp, #20
    3268:	af00      	add	r7, sp, #0
    326a:	6078      	str	r0, [r7, #4]
    326c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    326e:	2300      	movs	r3, #0
    3270:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
    3272:	687b      	ldr	r3, [r7, #4]
    3274:	685b      	ldr	r3, [r3, #4]
    3276:	60fb      	str	r3, [r7, #12]
  /* Clear AWDEN, AWDENJ and AWDSGL bits */
  tmpreg &= CR1_AWDMode_Reset;
    3278:	68fb      	ldr	r3, [r7, #12]
    327a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
    327e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3282:	60fb      	str	r3, [r7, #12]
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
    3284:	68fa      	ldr	r2, [r7, #12]
    3286:	683b      	ldr	r3, [r7, #0]
    3288:	4313      	orrs	r3, r2
    328a:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
    328c:	687b      	ldr	r3, [r7, #4]
    328e:	68fa      	ldr	r2, [r7, #12]
    3290:	605a      	str	r2, [r3, #4]
}
    3292:	bf00      	nop
    3294:	3714      	adds	r7, #20
    3296:	46bd      	mov	sp, r7
    3298:	bc80      	pop	{r7}
    329a:	4770      	bx	lr

0000329c <ADC_AnalogWatchdogThresholdsConfig>:
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
    329c:	b480      	push	{r7}
    329e:	b083      	sub	sp, #12
    32a0:	af00      	add	r7, sp, #0
    32a2:	6078      	str	r0, [r7, #4]
    32a4:	460b      	mov	r3, r1
    32a6:	807b      	strh	r3, [r7, #2]
    32a8:	4613      	mov	r3, r2
    32aa:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
    32ac:	887a      	ldrh	r2, [r7, #2]
    32ae:	687b      	ldr	r3, [r7, #4]
    32b0:	625a      	str	r2, [r3, #36]	; 0x24
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
    32b2:	883a      	ldrh	r2, [r7, #0]
    32b4:	687b      	ldr	r3, [r7, #4]
    32b6:	629a      	str	r2, [r3, #40]	; 0x28
}
    32b8:	bf00      	nop
    32ba:	370c      	adds	r7, #12
    32bc:	46bd      	mov	sp, r7
    32be:	bc80      	pop	{r7}
    32c0:	4770      	bx	lr

000032c2 <ADC_AnalogWatchdogSingleChannelConfig>:
  *     @arg ADC_Channel_16: ADC Channel16 selected
  *     @arg ADC_Channel_17: ADC Channel17 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
    32c2:	b480      	push	{r7}
    32c4:	b085      	sub	sp, #20
    32c6:	af00      	add	r7, sp, #0
    32c8:	6078      	str	r0, [r7, #4]
    32ca:	460b      	mov	r3, r1
    32cc:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
    32ce:	2300      	movs	r3, #0
    32d0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
    32d2:	687b      	ldr	r3, [r7, #4]
    32d4:	685b      	ldr	r3, [r3, #4]
    32d6:	60fb      	str	r3, [r7, #12]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_Reset;
    32d8:	68fb      	ldr	r3, [r7, #12]
    32da:	f023 031f 	bic.w	r3, r3, #31
    32de:	60fb      	str	r3, [r7, #12]
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
    32e0:	78fb      	ldrb	r3, [r7, #3]
    32e2:	68fa      	ldr	r2, [r7, #12]
    32e4:	4313      	orrs	r3, r2
    32e6:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
    32e8:	687b      	ldr	r3, [r7, #4]
    32ea:	68fa      	ldr	r2, [r7, #12]
    32ec:	605a      	str	r2, [r3, #4]
}
    32ee:	bf00      	nop
    32f0:	3714      	adds	r7, #20
    32f2:	46bd      	mov	sp, r7
    32f4:	bc80      	pop	{r7}
    32f6:	4770      	bx	lr

000032f8 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
    32f8:	b480      	push	{r7}
    32fa:	b083      	sub	sp, #12
    32fc:	af00      	add	r7, sp, #0
    32fe:	4603      	mov	r3, r0
    3300:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3302:	79fb      	ldrb	r3, [r7, #7]
    3304:	2b00      	cmp	r3, #0
    3306:	d006      	beq.n	3316 <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
    3308:	4b08      	ldr	r3, [pc, #32]	; (332c <ADC_TempSensorVrefintCmd+0x34>)
    330a:	689b      	ldr	r3, [r3, #8]
    330c:	4a07      	ldr	r2, [pc, #28]	; (332c <ADC_TempSensorVrefintCmd+0x34>)
    330e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    3312:	6093      	str	r3, [r2, #8]
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
  }
}
    3314:	e005      	b.n	3322 <ADC_TempSensorVrefintCmd+0x2a>
    ADC1->CR2 &= CR2_TSVREFE_Reset;
    3316:	4b05      	ldr	r3, [pc, #20]	; (332c <ADC_TempSensorVrefintCmd+0x34>)
    3318:	689b      	ldr	r3, [r3, #8]
    331a:	4a04      	ldr	r2, [pc, #16]	; (332c <ADC_TempSensorVrefintCmd+0x34>)
    331c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3320:	6093      	str	r3, [r2, #8]
}
    3322:	bf00      	nop
    3324:	370c      	adds	r7, #12
    3326:	46bd      	mov	sp, r7
    3328:	bc80      	pop	{r7}
    332a:	4770      	bx	lr
    332c:	40012400 	.word	0x40012400

00003330 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
    3330:	b480      	push	{r7}
    3332:	b085      	sub	sp, #20
    3334:	af00      	add	r7, sp, #0
    3336:	6078      	str	r0, [r7, #4]
    3338:	460b      	mov	r3, r1
    333a:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
    333c:	2300      	movs	r3, #0
    333e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
    3340:	687b      	ldr	r3, [r7, #4]
    3342:	681a      	ldr	r2, [r3, #0]
    3344:	78fb      	ldrb	r3, [r7, #3]
    3346:	4013      	ands	r3, r2
    3348:	2b00      	cmp	r3, #0
    334a:	d002      	beq.n	3352 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
    334c:	2301      	movs	r3, #1
    334e:	73fb      	strb	r3, [r7, #15]
    3350:	e001      	b.n	3356 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
    3352:	2300      	movs	r3, #0
    3354:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
    3356:	7bfb      	ldrb	r3, [r7, #15]
}
    3358:	4618      	mov	r0, r3
    335a:	3714      	adds	r7, #20
    335c:	46bd      	mov	sp, r7
    335e:	bc80      	pop	{r7}
    3360:	4770      	bx	lr

00003362 <ADC_ClearFlag>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
    3362:	b480      	push	{r7}
    3364:	b083      	sub	sp, #12
    3366:	af00      	add	r7, sp, #0
    3368:	6078      	str	r0, [r7, #4]
    336a:	460b      	mov	r3, r1
    336c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
    336e:	78fb      	ldrb	r3, [r7, #3]
    3370:	43da      	mvns	r2, r3
    3372:	687b      	ldr	r3, [r7, #4]
    3374:	601a      	str	r2, [r3, #0]
}
    3376:	bf00      	nop
    3378:	370c      	adds	r7, #12
    337a:	46bd      	mov	sp, r7
    337c:	bc80      	pop	{r7}
    337e:	4770      	bx	lr

00003380 <ADC_GetITStatus>:
  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
    3380:	b480      	push	{r7}
    3382:	b087      	sub	sp, #28
    3384:	af00      	add	r7, sp, #0
    3386:	6078      	str	r0, [r7, #4]
    3388:	460b      	mov	r3, r1
    338a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
    338c:	2300      	movs	r3, #0
    338e:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
    3390:	2300      	movs	r3, #0
    3392:	613b      	str	r3, [r7, #16]
    3394:	2300      	movs	r3, #0
    3396:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
    3398:	887b      	ldrh	r3, [r7, #2]
    339a:	0a1b      	lsrs	r3, r3, #8
    339c:	b29b      	uxth	r3, r3
    339e:	613b      	str	r3, [r7, #16]
  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & (uint8_t)ADC_IT) ;
    33a0:	687b      	ldr	r3, [r7, #4]
    33a2:	685b      	ldr	r3, [r3, #4]
    33a4:	887a      	ldrh	r2, [r7, #2]
    33a6:	b2d2      	uxtb	r2, r2
    33a8:	4013      	ands	r3, r2
    33aa:	60fb      	str	r3, [r7, #12]
  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
    33ac:	687b      	ldr	r3, [r7, #4]
    33ae:	681a      	ldr	r2, [r3, #0]
    33b0:	693b      	ldr	r3, [r7, #16]
    33b2:	4013      	ands	r3, r2
    33b4:	2b00      	cmp	r3, #0
    33b6:	d005      	beq.n	33c4 <ADC_GetITStatus+0x44>
    33b8:	68fb      	ldr	r3, [r7, #12]
    33ba:	2b00      	cmp	r3, #0
    33bc:	d002      	beq.n	33c4 <ADC_GetITStatus+0x44>
  {
    /* ADC_IT is set */
    bitstatus = SET;
    33be:	2301      	movs	r3, #1
    33c0:	75fb      	strb	r3, [r7, #23]
    33c2:	e001      	b.n	33c8 <ADC_GetITStatus+0x48>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
    33c4:	2300      	movs	r3, #0
    33c6:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
    33c8:	7dfb      	ldrb	r3, [r7, #23]
}
    33ca:	4618      	mov	r0, r3
    33cc:	371c      	adds	r7, #28
    33ce:	46bd      	mov	sp, r7
    33d0:	bc80      	pop	{r7}
    33d2:	4770      	bx	lr

000033d4 <ADC_ClearITPendingBit>:
  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
    33d4:	b480      	push	{r7}
    33d6:	b085      	sub	sp, #20
    33d8:	af00      	add	r7, sp, #0
    33da:	6078      	str	r0, [r7, #4]
    33dc:	460b      	mov	r3, r1
    33de:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
    33e0:	2300      	movs	r3, #0
    33e2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
    33e4:	887b      	ldrh	r3, [r7, #2]
    33e6:	0a1b      	lsrs	r3, r3, #8
    33e8:	b29b      	uxth	r3, r3
    33ea:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
    33ec:	7bfb      	ldrb	r3, [r7, #15]
    33ee:	43da      	mvns	r2, r3
    33f0:	687b      	ldr	r3, [r7, #4]
    33f2:	601a      	str	r2, [r3, #0]
}
    33f4:	bf00      	nop
    33f6:	3714      	adds	r7, #20
    33f8:	46bd      	mov	sp, r7
    33fa:	bc80      	pop	{r7}
    33fc:	4770      	bx	lr
    33fe:	bf00      	nop

00003400 <TIM_DeInit>:
  * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval None
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
    3400:	b580      	push	{r7, lr}
    3402:	b082      	sub	sp, #8
    3404:	af00      	add	r7, sp, #0
    3406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
    3408:	687b      	ldr	r3, [r7, #4]
    340a:	4a78      	ldr	r2, [pc, #480]	; (35ec <TIM_DeInit+0x1ec>)
    340c:	4293      	cmp	r3, r2
    340e:	d10a      	bne.n	3426 <TIM_DeInit+0x26>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    3410:	2101      	movs	r1, #1
    3412:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3416:	f7fe f9af 	bl	1778 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
    341a:	2100      	movs	r1, #0
    341c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3420:	f7fe f9aa 	bl	1778 <RCC_APB2PeriphResetCmd>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
    }  
  }
}
    3424:	e0de      	b.n	35e4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM2)
    3426:	687b      	ldr	r3, [r7, #4]
    3428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    342c:	d108      	bne.n	3440 <TIM_DeInit+0x40>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    342e:	2101      	movs	r1, #1
    3430:	2001      	movs	r0, #1
    3432:	f7fe f9bf 	bl	17b4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
    3436:	2100      	movs	r1, #0
    3438:	2001      	movs	r0, #1
    343a:	f7fe f9bb 	bl	17b4 <RCC_APB1PeriphResetCmd>
}
    343e:	e0d1      	b.n	35e4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM3)
    3440:	687b      	ldr	r3, [r7, #4]
    3442:	4a6b      	ldr	r2, [pc, #428]	; (35f0 <TIM_DeInit+0x1f0>)
    3444:	4293      	cmp	r3, r2
    3446:	d108      	bne.n	345a <TIM_DeInit+0x5a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    3448:	2101      	movs	r1, #1
    344a:	2002      	movs	r0, #2
    344c:	f7fe f9b2 	bl	17b4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
    3450:	2100      	movs	r1, #0
    3452:	2002      	movs	r0, #2
    3454:	f7fe f9ae 	bl	17b4 <RCC_APB1PeriphResetCmd>
}
    3458:	e0c4      	b.n	35e4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM4)
    345a:	687b      	ldr	r3, [r7, #4]
    345c:	4a65      	ldr	r2, [pc, #404]	; (35f4 <TIM_DeInit+0x1f4>)
    345e:	4293      	cmp	r3, r2
    3460:	d108      	bne.n	3474 <TIM_DeInit+0x74>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    3462:	2101      	movs	r1, #1
    3464:	2004      	movs	r0, #4
    3466:	f7fe f9a5 	bl	17b4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
    346a:	2100      	movs	r1, #0
    346c:	2004      	movs	r0, #4
    346e:	f7fe f9a1 	bl	17b4 <RCC_APB1PeriphResetCmd>
}
    3472:	e0b7      	b.n	35e4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM5)
    3474:	687b      	ldr	r3, [r7, #4]
    3476:	4a60      	ldr	r2, [pc, #384]	; (35f8 <TIM_DeInit+0x1f8>)
    3478:	4293      	cmp	r3, r2
    347a:	d108      	bne.n	348e <TIM_DeInit+0x8e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    347c:	2101      	movs	r1, #1
    347e:	2008      	movs	r0, #8
    3480:	f7fe f998 	bl	17b4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
    3484:	2100      	movs	r1, #0
    3486:	2008      	movs	r0, #8
    3488:	f7fe f994 	bl	17b4 <RCC_APB1PeriphResetCmd>
}
    348c:	e0aa      	b.n	35e4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM6)
    348e:	687b      	ldr	r3, [r7, #4]
    3490:	4a5a      	ldr	r2, [pc, #360]	; (35fc <TIM_DeInit+0x1fc>)
    3492:	4293      	cmp	r3, r2
    3494:	d108      	bne.n	34a8 <TIM_DeInit+0xa8>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    3496:	2101      	movs	r1, #1
    3498:	2010      	movs	r0, #16
    349a:	f7fe f98b 	bl	17b4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
    349e:	2100      	movs	r1, #0
    34a0:	2010      	movs	r0, #16
    34a2:	f7fe f987 	bl	17b4 <RCC_APB1PeriphResetCmd>
}
    34a6:	e09d      	b.n	35e4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM7)
    34a8:	687b      	ldr	r3, [r7, #4]
    34aa:	4a55      	ldr	r2, [pc, #340]	; (3600 <TIM_DeInit+0x200>)
    34ac:	4293      	cmp	r3, r2
    34ae:	d108      	bne.n	34c2 <TIM_DeInit+0xc2>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    34b0:	2101      	movs	r1, #1
    34b2:	2020      	movs	r0, #32
    34b4:	f7fe f97e 	bl	17b4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
    34b8:	2100      	movs	r1, #0
    34ba:	2020      	movs	r0, #32
    34bc:	f7fe f97a 	bl	17b4 <RCC_APB1PeriphResetCmd>
}
    34c0:	e090      	b.n	35e4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM8)
    34c2:	687b      	ldr	r3, [r7, #4]
    34c4:	4a4f      	ldr	r2, [pc, #316]	; (3604 <TIM_DeInit+0x204>)
    34c6:	4293      	cmp	r3, r2
    34c8:	d10a      	bne.n	34e0 <TIM_DeInit+0xe0>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    34ca:	2101      	movs	r1, #1
    34cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    34d0:	f7fe f952 	bl	1778 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
    34d4:	2100      	movs	r1, #0
    34d6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    34da:	f7fe f94d 	bl	1778 <RCC_APB2PeriphResetCmd>
}
    34de:	e081      	b.n	35e4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM9)
    34e0:	687b      	ldr	r3, [r7, #4]
    34e2:	4a49      	ldr	r2, [pc, #292]	; (3608 <TIM_DeInit+0x208>)
    34e4:	4293      	cmp	r3, r2
    34e6:	d10a      	bne.n	34fe <TIM_DeInit+0xfe>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    34e8:	2101      	movs	r1, #1
    34ea:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    34ee:	f7fe f943 	bl	1778 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
    34f2:	2100      	movs	r1, #0
    34f4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    34f8:	f7fe f93e 	bl	1778 <RCC_APB2PeriphResetCmd>
}
    34fc:	e072      	b.n	35e4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM10)
    34fe:	687b      	ldr	r3, [r7, #4]
    3500:	4a42      	ldr	r2, [pc, #264]	; (360c <TIM_DeInit+0x20c>)
    3502:	4293      	cmp	r3, r2
    3504:	d10a      	bne.n	351c <TIM_DeInit+0x11c>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    3506:	2101      	movs	r1, #1
    3508:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    350c:	f7fe f934 	bl	1778 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
    3510:	2100      	movs	r1, #0
    3512:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    3516:	f7fe f92f 	bl	1778 <RCC_APB2PeriphResetCmd>
}
    351a:	e063      	b.n	35e4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM11) 
    351c:	687b      	ldr	r3, [r7, #4]
    351e:	4a3c      	ldr	r2, [pc, #240]	; (3610 <TIM_DeInit+0x210>)
    3520:	4293      	cmp	r3, r2
    3522:	d10a      	bne.n	353a <TIM_DeInit+0x13a>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    3524:	2101      	movs	r1, #1
    3526:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    352a:	f7fe f925 	bl	1778 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
    352e:	2100      	movs	r1, #0
    3530:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    3534:	f7fe f920 	bl	1778 <RCC_APB2PeriphResetCmd>
}
    3538:	e054      	b.n	35e4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM12)
    353a:	687b      	ldr	r3, [r7, #4]
    353c:	4a35      	ldr	r2, [pc, #212]	; (3614 <TIM_DeInit+0x214>)
    353e:	4293      	cmp	r3, r2
    3540:	d108      	bne.n	3554 <TIM_DeInit+0x154>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    3542:	2101      	movs	r1, #1
    3544:	2040      	movs	r0, #64	; 0x40
    3546:	f7fe f935 	bl	17b4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
    354a:	2100      	movs	r1, #0
    354c:	2040      	movs	r0, #64	; 0x40
    354e:	f7fe f931 	bl	17b4 <RCC_APB1PeriphResetCmd>
}
    3552:	e047      	b.n	35e4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM13) 
    3554:	687b      	ldr	r3, [r7, #4]
    3556:	4a30      	ldr	r2, [pc, #192]	; (3618 <TIM_DeInit+0x218>)
    3558:	4293      	cmp	r3, r2
    355a:	d108      	bne.n	356e <TIM_DeInit+0x16e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    355c:	2101      	movs	r1, #1
    355e:	2080      	movs	r0, #128	; 0x80
    3560:	f7fe f928 	bl	17b4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
    3564:	2100      	movs	r1, #0
    3566:	2080      	movs	r0, #128	; 0x80
    3568:	f7fe f924 	bl	17b4 <RCC_APB1PeriphResetCmd>
}
    356c:	e03a      	b.n	35e4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM14) 
    356e:	687b      	ldr	r3, [r7, #4]
    3570:	4a2a      	ldr	r2, [pc, #168]	; (361c <TIM_DeInit+0x21c>)
    3572:	4293      	cmp	r3, r2
    3574:	d10a      	bne.n	358c <TIM_DeInit+0x18c>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
    3576:	2101      	movs	r1, #1
    3578:	f44f 7080 	mov.w	r0, #256	; 0x100
    357c:	f7fe f91a 	bl	17b4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
    3580:	2100      	movs	r1, #0
    3582:	f44f 7080 	mov.w	r0, #256	; 0x100
    3586:	f7fe f915 	bl	17b4 <RCC_APB1PeriphResetCmd>
}
    358a:	e02b      	b.n	35e4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM15)
    358c:	687b      	ldr	r3, [r7, #4]
    358e:	4a24      	ldr	r2, [pc, #144]	; (3620 <TIM_DeInit+0x220>)
    3590:	4293      	cmp	r3, r2
    3592:	d10a      	bne.n	35aa <TIM_DeInit+0x1aa>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
    3594:	2101      	movs	r1, #1
    3596:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    359a:	f7fe f8ed 	bl	1778 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
    359e:	2100      	movs	r1, #0
    35a0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    35a4:	f7fe f8e8 	bl	1778 <RCC_APB2PeriphResetCmd>
}
    35a8:	e01c      	b.n	35e4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM16)
    35aa:	687b      	ldr	r3, [r7, #4]
    35ac:	4a1d      	ldr	r2, [pc, #116]	; (3624 <TIM_DeInit+0x224>)
    35ae:	4293      	cmp	r3, r2
    35b0:	d10a      	bne.n	35c8 <TIM_DeInit+0x1c8>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
    35b2:	2101      	movs	r1, #1
    35b4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    35b8:	f7fe f8de 	bl	1778 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
    35bc:	2100      	movs	r1, #0
    35be:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    35c2:	f7fe f8d9 	bl	1778 <RCC_APB2PeriphResetCmd>
}
    35c6:	e00d      	b.n	35e4 <TIM_DeInit+0x1e4>
    if (TIMx == TIM17)
    35c8:	687b      	ldr	r3, [r7, #4]
    35ca:	4a17      	ldr	r2, [pc, #92]	; (3628 <TIM_DeInit+0x228>)
    35cc:	4293      	cmp	r3, r2
    35ce:	d109      	bne.n	35e4 <TIM_DeInit+0x1e4>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
    35d0:	2101      	movs	r1, #1
    35d2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    35d6:	f7fe f8cf 	bl	1778 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
    35da:	2100      	movs	r1, #0
    35dc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    35e0:	f7fe f8ca 	bl	1778 <RCC_APB2PeriphResetCmd>
}
    35e4:	bf00      	nop
    35e6:	3708      	adds	r7, #8
    35e8:	46bd      	mov	sp, r7
    35ea:	bd80      	pop	{r7, pc}
    35ec:	40012c00 	.word	0x40012c00
    35f0:	40000400 	.word	0x40000400
    35f4:	40000800 	.word	0x40000800
    35f8:	40000c00 	.word	0x40000c00
    35fc:	40001000 	.word	0x40001000
    3600:	40001400 	.word	0x40001400
    3604:	40013400 	.word	0x40013400
    3608:	40014c00 	.word	0x40014c00
    360c:	40015000 	.word	0x40015000
    3610:	40015400 	.word	0x40015400
    3614:	40001800 	.word	0x40001800
    3618:	40001c00 	.word	0x40001c00
    361c:	40002000 	.word	0x40002000
    3620:	40014000 	.word	0x40014000
    3624:	40014400 	.word	0x40014400
    3628:	40014800 	.word	0x40014800

0000362c <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
    362c:	b480      	push	{r7}
    362e:	b085      	sub	sp, #20
    3630:	af00      	add	r7, sp, #0
    3632:	6078      	str	r0, [r7, #4]
    3634:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
    3636:	2300      	movs	r3, #0
    3638:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
    363a:	687b      	ldr	r3, [r7, #4]
    363c:	881b      	ldrh	r3, [r3, #0]
    363e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
    3640:	687b      	ldr	r3, [r7, #4]
    3642:	4a2e      	ldr	r2, [pc, #184]	; (36fc <TIM_TimeBaseInit+0xd0>)
    3644:	4293      	cmp	r3, r2
    3646:	d013      	beq.n	3670 <TIM_TimeBaseInit+0x44>
    3648:	687b      	ldr	r3, [r7, #4]
    364a:	4a2d      	ldr	r2, [pc, #180]	; (3700 <TIM_TimeBaseInit+0xd4>)
    364c:	4293      	cmp	r3, r2
    364e:	d00f      	beq.n	3670 <TIM_TimeBaseInit+0x44>
    3650:	687b      	ldr	r3, [r7, #4]
    3652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    3656:	d00b      	beq.n	3670 <TIM_TimeBaseInit+0x44>
    3658:	687b      	ldr	r3, [r7, #4]
    365a:	4a2a      	ldr	r2, [pc, #168]	; (3704 <TIM_TimeBaseInit+0xd8>)
    365c:	4293      	cmp	r3, r2
    365e:	d007      	beq.n	3670 <TIM_TimeBaseInit+0x44>
    3660:	687b      	ldr	r3, [r7, #4]
    3662:	4a29      	ldr	r2, [pc, #164]	; (3708 <TIM_TimeBaseInit+0xdc>)
    3664:	4293      	cmp	r3, r2
    3666:	d003      	beq.n	3670 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
    3668:	687b      	ldr	r3, [r7, #4]
    366a:	4a28      	ldr	r2, [pc, #160]	; (370c <TIM_TimeBaseInit+0xe0>)
    366c:	4293      	cmp	r3, r2
    366e:	d108      	bne.n	3682 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    3670:	89fb      	ldrh	r3, [r7, #14]
    3672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    3676:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
    3678:	683b      	ldr	r3, [r7, #0]
    367a:	885a      	ldrh	r2, [r3, #2]
    367c:	89fb      	ldrh	r3, [r7, #14]
    367e:	4313      	orrs	r3, r2
    3680:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
    3682:	687b      	ldr	r3, [r7, #4]
    3684:	4a22      	ldr	r2, [pc, #136]	; (3710 <TIM_TimeBaseInit+0xe4>)
    3686:	4293      	cmp	r3, r2
    3688:	d00c      	beq.n	36a4 <TIM_TimeBaseInit+0x78>
    368a:	687b      	ldr	r3, [r7, #4]
    368c:	4a21      	ldr	r2, [pc, #132]	; (3714 <TIM_TimeBaseInit+0xe8>)
    368e:	4293      	cmp	r3, r2
    3690:	d008      	beq.n	36a4 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
    3692:	89fb      	ldrh	r3, [r7, #14]
    3694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    3698:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
    369a:	683b      	ldr	r3, [r7, #0]
    369c:	88da      	ldrh	r2, [r3, #6]
    369e:	89fb      	ldrh	r3, [r7, #14]
    36a0:	4313      	orrs	r3, r2
    36a2:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
    36a4:	687b      	ldr	r3, [r7, #4]
    36a6:	89fa      	ldrh	r2, [r7, #14]
    36a8:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
    36aa:	683b      	ldr	r3, [r7, #0]
    36ac:	889a      	ldrh	r2, [r3, #4]
    36ae:	687b      	ldr	r3, [r7, #4]
    36b0:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    36b2:	683b      	ldr	r3, [r7, #0]
    36b4:	881a      	ldrh	r2, [r3, #0]
    36b6:	687b      	ldr	r3, [r7, #4]
    36b8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
    36ba:	687b      	ldr	r3, [r7, #4]
    36bc:	4a0f      	ldr	r2, [pc, #60]	; (36fc <TIM_TimeBaseInit+0xd0>)
    36be:	4293      	cmp	r3, r2
    36c0:	d00f      	beq.n	36e2 <TIM_TimeBaseInit+0xb6>
    36c2:	687b      	ldr	r3, [r7, #4]
    36c4:	4a0e      	ldr	r2, [pc, #56]	; (3700 <TIM_TimeBaseInit+0xd4>)
    36c6:	4293      	cmp	r3, r2
    36c8:	d00b      	beq.n	36e2 <TIM_TimeBaseInit+0xb6>
    36ca:	687b      	ldr	r3, [r7, #4]
    36cc:	4a12      	ldr	r2, [pc, #72]	; (3718 <TIM_TimeBaseInit+0xec>)
    36ce:	4293      	cmp	r3, r2
    36d0:	d007      	beq.n	36e2 <TIM_TimeBaseInit+0xb6>
    36d2:	687b      	ldr	r3, [r7, #4]
    36d4:	4a11      	ldr	r2, [pc, #68]	; (371c <TIM_TimeBaseInit+0xf0>)
    36d6:	4293      	cmp	r3, r2
    36d8:	d003      	beq.n	36e2 <TIM_TimeBaseInit+0xb6>
    36da:	687b      	ldr	r3, [r7, #4]
    36dc:	4a10      	ldr	r2, [pc, #64]	; (3720 <TIM_TimeBaseInit+0xf4>)
    36de:	4293      	cmp	r3, r2
    36e0:	d104      	bne.n	36ec <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
    36e2:	683b      	ldr	r3, [r7, #0]
    36e4:	7a1b      	ldrb	r3, [r3, #8]
    36e6:	b29a      	uxth	r2, r3
    36e8:	687b      	ldr	r3, [r7, #4]
    36ea:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
    36ec:	687b      	ldr	r3, [r7, #4]
    36ee:	2201      	movs	r2, #1
    36f0:	829a      	strh	r2, [r3, #20]
}
    36f2:	bf00      	nop
    36f4:	3714      	adds	r7, #20
    36f6:	46bd      	mov	sp, r7
    36f8:	bc80      	pop	{r7}
    36fa:	4770      	bx	lr
    36fc:	40012c00 	.word	0x40012c00
    3700:	40013400 	.word	0x40013400
    3704:	40000400 	.word	0x40000400
    3708:	40000800 	.word	0x40000800
    370c:	40000c00 	.word	0x40000c00
    3710:	40001000 	.word	0x40001000
    3714:	40001400 	.word	0x40001400
    3718:	40014000 	.word	0x40014000
    371c:	40014400 	.word	0x40014400
    3720:	40014800 	.word	0x40014800

00003724 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    3724:	b480      	push	{r7}
    3726:	b085      	sub	sp, #20
    3728:	af00      	add	r7, sp, #0
    372a:	6078      	str	r0, [r7, #4]
    372c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    372e:	2300      	movs	r3, #0
    3730:	817b      	strh	r3, [r7, #10]
    3732:	2300      	movs	r3, #0
    3734:	81fb      	strh	r3, [r7, #14]
    3736:	2300      	movs	r3, #0
    3738:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
    373a:	687b      	ldr	r3, [r7, #4]
    373c:	8c1b      	ldrh	r3, [r3, #32]
    373e:	b29b      	uxth	r3, r3
    3740:	f023 0301 	bic.w	r3, r3, #1
    3744:	b29a      	uxth	r2, r3
    3746:	687b      	ldr	r3, [r7, #4]
    3748:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    374a:	687b      	ldr	r3, [r7, #4]
    374c:	8c1b      	ldrh	r3, [r3, #32]
    374e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    3750:	687b      	ldr	r3, [r7, #4]
    3752:	889b      	ldrh	r3, [r3, #4]
    3754:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    3756:	687b      	ldr	r3, [r7, #4]
    3758:	8b1b      	ldrh	r3, [r3, #24]
    375a:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
    375c:	897b      	ldrh	r3, [r7, #10]
    375e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    3762:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
    3764:	897b      	ldrh	r3, [r7, #10]
    3766:	f023 0303 	bic.w	r3, r3, #3
    376a:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
    376c:	683b      	ldr	r3, [r7, #0]
    376e:	881a      	ldrh	r2, [r3, #0]
    3770:	897b      	ldrh	r3, [r7, #10]
    3772:	4313      	orrs	r3, r2
    3774:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
    3776:	89fb      	ldrh	r3, [r7, #14]
    3778:	f023 0302 	bic.w	r3, r3, #2
    377c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
    377e:	683b      	ldr	r3, [r7, #0]
    3780:	891a      	ldrh	r2, [r3, #8]
    3782:	89fb      	ldrh	r3, [r7, #14]
    3784:	4313      	orrs	r3, r2
    3786:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    3788:	683b      	ldr	r3, [r7, #0]
    378a:	885a      	ldrh	r2, [r3, #2]
    378c:	89fb      	ldrh	r3, [r7, #14]
    378e:	4313      	orrs	r3, r2
    3790:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
    3792:	687b      	ldr	r3, [r7, #4]
    3794:	4a24      	ldr	r2, [pc, #144]	; (3828 <TIM_OC1Init+0x104>)
    3796:	4293      	cmp	r3, r2
    3798:	d00f      	beq.n	37ba <TIM_OC1Init+0x96>
    379a:	687b      	ldr	r3, [r7, #4]
    379c:	4a23      	ldr	r2, [pc, #140]	; (382c <TIM_OC1Init+0x108>)
    379e:	4293      	cmp	r3, r2
    37a0:	d00b      	beq.n	37ba <TIM_OC1Init+0x96>
    37a2:	687b      	ldr	r3, [r7, #4]
    37a4:	4a22      	ldr	r2, [pc, #136]	; (3830 <TIM_OC1Init+0x10c>)
    37a6:	4293      	cmp	r3, r2
    37a8:	d007      	beq.n	37ba <TIM_OC1Init+0x96>
    37aa:	687b      	ldr	r3, [r7, #4]
    37ac:	4a21      	ldr	r2, [pc, #132]	; (3834 <TIM_OC1Init+0x110>)
    37ae:	4293      	cmp	r3, r2
    37b0:	d003      	beq.n	37ba <TIM_OC1Init+0x96>
     (TIMx == TIM16)|| (TIMx == TIM17))
    37b2:	687b      	ldr	r3, [r7, #4]
    37b4:	4a20      	ldr	r2, [pc, #128]	; (3838 <TIM_OC1Init+0x114>)
    37b6:	4293      	cmp	r3, r2
    37b8:	d123      	bne.n	3802 <TIM_OC1Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
    37ba:	89fb      	ldrh	r3, [r7, #14]
    37bc:	f023 0308 	bic.w	r3, r3, #8
    37c0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    37c2:	683b      	ldr	r3, [r7, #0]
    37c4:	895a      	ldrh	r2, [r3, #10]
    37c6:	89fb      	ldrh	r3, [r7, #14]
    37c8:	4313      	orrs	r3, r2
    37ca:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
    37cc:	89fb      	ldrh	r3, [r7, #14]
    37ce:	f023 0304 	bic.w	r3, r3, #4
    37d2:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    37d4:	683b      	ldr	r3, [r7, #0]
    37d6:	889a      	ldrh	r2, [r3, #4]
    37d8:	89fb      	ldrh	r3, [r7, #14]
    37da:	4313      	orrs	r3, r2
    37dc:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
    37de:	89bb      	ldrh	r3, [r7, #12]
    37e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    37e4:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
    37e6:	89bb      	ldrh	r3, [r7, #12]
    37e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    37ec:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    37ee:	683b      	ldr	r3, [r7, #0]
    37f0:	899a      	ldrh	r2, [r3, #12]
    37f2:	89bb      	ldrh	r3, [r7, #12]
    37f4:	4313      	orrs	r3, r2
    37f6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
    37f8:	683b      	ldr	r3, [r7, #0]
    37fa:	89da      	ldrh	r2, [r3, #14]
    37fc:	89bb      	ldrh	r3, [r7, #12]
    37fe:	4313      	orrs	r3, r2
    3800:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    3802:	687b      	ldr	r3, [r7, #4]
    3804:	89ba      	ldrh	r2, [r7, #12]
    3806:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
    3808:	687b      	ldr	r3, [r7, #4]
    380a:	897a      	ldrh	r2, [r7, #10]
    380c:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
    380e:	683b      	ldr	r3, [r7, #0]
    3810:	88da      	ldrh	r2, [r3, #6]
    3812:	687b      	ldr	r3, [r7, #4]
    3814:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    3816:	687b      	ldr	r3, [r7, #4]
    3818:	89fa      	ldrh	r2, [r7, #14]
    381a:	841a      	strh	r2, [r3, #32]
}
    381c:	bf00      	nop
    381e:	3714      	adds	r7, #20
    3820:	46bd      	mov	sp, r7
    3822:	bc80      	pop	{r7}
    3824:	4770      	bx	lr
    3826:	bf00      	nop
    3828:	40012c00 	.word	0x40012c00
    382c:	40013400 	.word	0x40013400
    3830:	40014000 	.word	0x40014000
    3834:	40014400 	.word	0x40014400
    3838:	40014800 	.word	0x40014800

0000383c <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    383c:	b480      	push	{r7}
    383e:	b085      	sub	sp, #20
    3840:	af00      	add	r7, sp, #0
    3842:	6078      	str	r0, [r7, #4]
    3844:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    3846:	2300      	movs	r3, #0
    3848:	817b      	strh	r3, [r7, #10]
    384a:	2300      	movs	r3, #0
    384c:	81fb      	strh	r3, [r7, #14]
    384e:	2300      	movs	r3, #0
    3850:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
    3852:	687b      	ldr	r3, [r7, #4]
    3854:	8c1b      	ldrh	r3, [r3, #32]
    3856:	b29b      	uxth	r3, r3
    3858:	f023 0310 	bic.w	r3, r3, #16
    385c:	b29a      	uxth	r2, r3
    385e:	687b      	ldr	r3, [r7, #4]
    3860:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
    3862:	687b      	ldr	r3, [r7, #4]
    3864:	8c1b      	ldrh	r3, [r3, #32]
    3866:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    3868:	687b      	ldr	r3, [r7, #4]
    386a:	889b      	ldrh	r3, [r3, #4]
    386c:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    386e:	687b      	ldr	r3, [r7, #4]
    3870:	8b1b      	ldrh	r3, [r3, #24]
    3872:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
    3874:	897b      	ldrh	r3, [r7, #10]
    3876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    387a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
    387c:	897b      	ldrh	r3, [r7, #10]
    387e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    3882:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
    3884:	683b      	ldr	r3, [r7, #0]
    3886:	881b      	ldrh	r3, [r3, #0]
    3888:	021b      	lsls	r3, r3, #8
    388a:	b29a      	uxth	r2, r3
    388c:	897b      	ldrh	r3, [r7, #10]
    388e:	4313      	orrs	r3, r2
    3890:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
    3892:	89fb      	ldrh	r3, [r7, #14]
    3894:	f023 0320 	bic.w	r3, r3, #32
    3898:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
    389a:	683b      	ldr	r3, [r7, #0]
    389c:	891b      	ldrh	r3, [r3, #8]
    389e:	011b      	lsls	r3, r3, #4
    38a0:	b29a      	uxth	r2, r3
    38a2:	89fb      	ldrh	r3, [r7, #14]
    38a4:	4313      	orrs	r3, r2
    38a6:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    38a8:	683b      	ldr	r3, [r7, #0]
    38aa:	885b      	ldrh	r3, [r3, #2]
    38ac:	011b      	lsls	r3, r3, #4
    38ae:	b29a      	uxth	r2, r3
    38b0:	89fb      	ldrh	r3, [r7, #14]
    38b2:	4313      	orrs	r3, r2
    38b4:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
    38b6:	687b      	ldr	r3, [r7, #4]
    38b8:	4a22      	ldr	r2, [pc, #136]	; (3944 <TIM_OC2Init+0x108>)
    38ba:	4293      	cmp	r3, r2
    38bc:	d003      	beq.n	38c6 <TIM_OC2Init+0x8a>
    38be:	687b      	ldr	r3, [r7, #4]
    38c0:	4a21      	ldr	r2, [pc, #132]	; (3948 <TIM_OC2Init+0x10c>)
    38c2:	4293      	cmp	r3, r2
    38c4:	d12b      	bne.n	391e <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
    38c6:	89fb      	ldrh	r3, [r7, #14]
    38c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    38cc:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    38ce:	683b      	ldr	r3, [r7, #0]
    38d0:	895b      	ldrh	r3, [r3, #10]
    38d2:	011b      	lsls	r3, r3, #4
    38d4:	b29a      	uxth	r2, r3
    38d6:	89fb      	ldrh	r3, [r7, #14]
    38d8:	4313      	orrs	r3, r2
    38da:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
    38dc:	89fb      	ldrh	r3, [r7, #14]
    38de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    38e2:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    38e4:	683b      	ldr	r3, [r7, #0]
    38e6:	889b      	ldrh	r3, [r3, #4]
    38e8:	011b      	lsls	r3, r3, #4
    38ea:	b29a      	uxth	r2, r3
    38ec:	89fb      	ldrh	r3, [r7, #14]
    38ee:	4313      	orrs	r3, r2
    38f0:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
    38f2:	89bb      	ldrh	r3, [r7, #12]
    38f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    38f8:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
    38fa:	89bb      	ldrh	r3, [r7, #12]
    38fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3900:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    3902:	683b      	ldr	r3, [r7, #0]
    3904:	899b      	ldrh	r3, [r3, #12]
    3906:	009b      	lsls	r3, r3, #2
    3908:	b29a      	uxth	r2, r3
    390a:	89bb      	ldrh	r3, [r7, #12]
    390c:	4313      	orrs	r3, r2
    390e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
    3910:	683b      	ldr	r3, [r7, #0]
    3912:	89db      	ldrh	r3, [r3, #14]
    3914:	009b      	lsls	r3, r3, #2
    3916:	b29a      	uxth	r2, r3
    3918:	89bb      	ldrh	r3, [r7, #12]
    391a:	4313      	orrs	r3, r2
    391c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    391e:	687b      	ldr	r3, [r7, #4]
    3920:	89ba      	ldrh	r2, [r7, #12]
    3922:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
    3924:	687b      	ldr	r3, [r7, #4]
    3926:	897a      	ldrh	r2, [r7, #10]
    3928:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
    392a:	683b      	ldr	r3, [r7, #0]
    392c:	88da      	ldrh	r2, [r3, #6]
    392e:	687b      	ldr	r3, [r7, #4]
    3930:	871a      	strh	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    3932:	687b      	ldr	r3, [r7, #4]
    3934:	89fa      	ldrh	r2, [r7, #14]
    3936:	841a      	strh	r2, [r3, #32]
}
    3938:	bf00      	nop
    393a:	3714      	adds	r7, #20
    393c:	46bd      	mov	sp, r7
    393e:	bc80      	pop	{r7}
    3940:	4770      	bx	lr
    3942:	bf00      	nop
    3944:	40012c00 	.word	0x40012c00
    3948:	40013400 	.word	0x40013400

0000394c <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    394c:	b480      	push	{r7}
    394e:	b085      	sub	sp, #20
    3950:	af00      	add	r7, sp, #0
    3952:	6078      	str	r0, [r7, #4]
    3954:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    3956:	2300      	movs	r3, #0
    3958:	817b      	strh	r3, [r7, #10]
    395a:	2300      	movs	r3, #0
    395c:	81fb      	strh	r3, [r7, #14]
    395e:	2300      	movs	r3, #0
    3960:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
    3962:	687b      	ldr	r3, [r7, #4]
    3964:	8c1b      	ldrh	r3, [r3, #32]
    3966:	b29b      	uxth	r3, r3
    3968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    396c:	b29a      	uxth	r2, r3
    396e:	687b      	ldr	r3, [r7, #4]
    3970:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    3972:	687b      	ldr	r3, [r7, #4]
    3974:	8c1b      	ldrh	r3, [r3, #32]
    3976:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    3978:	687b      	ldr	r3, [r7, #4]
    397a:	889b      	ldrh	r3, [r3, #4]
    397c:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    397e:	687b      	ldr	r3, [r7, #4]
    3980:	8b9b      	ldrh	r3, [r3, #28]
    3982:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
    3984:	897b      	ldrh	r3, [r7, #10]
    3986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    398a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
    398c:	897b      	ldrh	r3, [r7, #10]
    398e:	f023 0303 	bic.w	r3, r3, #3
    3992:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
    3994:	683b      	ldr	r3, [r7, #0]
    3996:	881a      	ldrh	r2, [r3, #0]
    3998:	897b      	ldrh	r3, [r7, #10]
    399a:	4313      	orrs	r3, r2
    399c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
    399e:	89fb      	ldrh	r3, [r7, #14]
    39a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    39a4:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
    39a6:	683b      	ldr	r3, [r7, #0]
    39a8:	891b      	ldrh	r3, [r3, #8]
    39aa:	021b      	lsls	r3, r3, #8
    39ac:	b29a      	uxth	r2, r3
    39ae:	89fb      	ldrh	r3, [r7, #14]
    39b0:	4313      	orrs	r3, r2
    39b2:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    39b4:	683b      	ldr	r3, [r7, #0]
    39b6:	885b      	ldrh	r3, [r3, #2]
    39b8:	021b      	lsls	r3, r3, #8
    39ba:	b29a      	uxth	r2, r3
    39bc:	89fb      	ldrh	r3, [r7, #14]
    39be:	4313      	orrs	r3, r2
    39c0:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
    39c2:	687b      	ldr	r3, [r7, #4]
    39c4:	4a22      	ldr	r2, [pc, #136]	; (3a50 <TIM_OC3Init+0x104>)
    39c6:	4293      	cmp	r3, r2
    39c8:	d003      	beq.n	39d2 <TIM_OC3Init+0x86>
    39ca:	687b      	ldr	r3, [r7, #4]
    39cc:	4a21      	ldr	r2, [pc, #132]	; (3a54 <TIM_OC3Init+0x108>)
    39ce:	4293      	cmp	r3, r2
    39d0:	d12b      	bne.n	3a2a <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
    39d2:	89fb      	ldrh	r3, [r7, #14]
    39d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    39d8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    39da:	683b      	ldr	r3, [r7, #0]
    39dc:	895b      	ldrh	r3, [r3, #10]
    39de:	021b      	lsls	r3, r3, #8
    39e0:	b29a      	uxth	r2, r3
    39e2:	89fb      	ldrh	r3, [r7, #14]
    39e4:	4313      	orrs	r3, r2
    39e6:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
    39e8:	89fb      	ldrh	r3, [r7, #14]
    39ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    39ee:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    39f0:	683b      	ldr	r3, [r7, #0]
    39f2:	889b      	ldrh	r3, [r3, #4]
    39f4:	021b      	lsls	r3, r3, #8
    39f6:	b29a      	uxth	r2, r3
    39f8:	89fb      	ldrh	r3, [r7, #14]
    39fa:	4313      	orrs	r3, r2
    39fc:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    39fe:	89bb      	ldrh	r3, [r7, #12]
    3a00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3a04:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
    3a06:	89bb      	ldrh	r3, [r7, #12]
    3a08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    3a0c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    3a0e:	683b      	ldr	r3, [r7, #0]
    3a10:	899b      	ldrh	r3, [r3, #12]
    3a12:	011b      	lsls	r3, r3, #4
    3a14:	b29a      	uxth	r2, r3
    3a16:	89bb      	ldrh	r3, [r7, #12]
    3a18:	4313      	orrs	r3, r2
    3a1a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
    3a1c:	683b      	ldr	r3, [r7, #0]
    3a1e:	89db      	ldrh	r3, [r3, #14]
    3a20:	011b      	lsls	r3, r3, #4
    3a22:	b29a      	uxth	r2, r3
    3a24:	89bb      	ldrh	r3, [r7, #12]
    3a26:	4313      	orrs	r3, r2
    3a28:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    3a2a:	687b      	ldr	r3, [r7, #4]
    3a2c:	89ba      	ldrh	r2, [r7, #12]
    3a2e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
    3a30:	687b      	ldr	r3, [r7, #4]
    3a32:	897a      	ldrh	r2, [r7, #10]
    3a34:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
    3a36:	683b      	ldr	r3, [r7, #0]
    3a38:	88da      	ldrh	r2, [r3, #6]
    3a3a:	687b      	ldr	r3, [r7, #4]
    3a3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    3a3e:	687b      	ldr	r3, [r7, #4]
    3a40:	89fa      	ldrh	r2, [r7, #14]
    3a42:	841a      	strh	r2, [r3, #32]
}
    3a44:	bf00      	nop
    3a46:	3714      	adds	r7, #20
    3a48:	46bd      	mov	sp, r7
    3a4a:	bc80      	pop	{r7}
    3a4c:	4770      	bx	lr
    3a4e:	bf00      	nop
    3a50:	40012c00 	.word	0x40012c00
    3a54:	40013400 	.word	0x40013400

00003a58 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    3a58:	b480      	push	{r7}
    3a5a:	b085      	sub	sp, #20
    3a5c:	af00      	add	r7, sp, #0
    3a5e:	6078      	str	r0, [r7, #4]
    3a60:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    3a62:	2300      	movs	r3, #0
    3a64:	81bb      	strh	r3, [r7, #12]
    3a66:	2300      	movs	r3, #0
    3a68:	817b      	strh	r3, [r7, #10]
    3a6a:	2300      	movs	r3, #0
    3a6c:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
    3a6e:	687b      	ldr	r3, [r7, #4]
    3a70:	8c1b      	ldrh	r3, [r3, #32]
    3a72:	b29b      	uxth	r3, r3
    3a74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3a78:	b29a      	uxth	r2, r3
    3a7a:	687b      	ldr	r3, [r7, #4]
    3a7c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    3a7e:	687b      	ldr	r3, [r7, #4]
    3a80:	8c1b      	ldrh	r3, [r3, #32]
    3a82:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    3a84:	687b      	ldr	r3, [r7, #4]
    3a86:	889b      	ldrh	r3, [r3, #4]
    3a88:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    3a8a:	687b      	ldr	r3, [r7, #4]
    3a8c:	8b9b      	ldrh	r3, [r3, #28]
    3a8e:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
    3a90:	89bb      	ldrh	r3, [r7, #12]
    3a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    3a96:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
    3a98:	89bb      	ldrh	r3, [r7, #12]
    3a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    3a9e:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
    3aa0:	683b      	ldr	r3, [r7, #0]
    3aa2:	881b      	ldrh	r3, [r3, #0]
    3aa4:	021b      	lsls	r3, r3, #8
    3aa6:	b29a      	uxth	r2, r3
    3aa8:	89bb      	ldrh	r3, [r7, #12]
    3aaa:	4313      	orrs	r3, r2
    3aac:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
    3aae:	897b      	ldrh	r3, [r7, #10]
    3ab0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    3ab4:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
    3ab6:	683b      	ldr	r3, [r7, #0]
    3ab8:	891b      	ldrh	r3, [r3, #8]
    3aba:	031b      	lsls	r3, r3, #12
    3abc:	b29a      	uxth	r2, r3
    3abe:	897b      	ldrh	r3, [r7, #10]
    3ac0:	4313      	orrs	r3, r2
    3ac2:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
    3ac4:	683b      	ldr	r3, [r7, #0]
    3ac6:	885b      	ldrh	r3, [r3, #2]
    3ac8:	031b      	lsls	r3, r3, #12
    3aca:	b29a      	uxth	r2, r3
    3acc:	897b      	ldrh	r3, [r7, #10]
    3ace:	4313      	orrs	r3, r2
    3ad0:	817b      	strh	r3, [r7, #10]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
    3ad2:	687b      	ldr	r3, [r7, #4]
    3ad4:	4a12      	ldr	r2, [pc, #72]	; (3b20 <TIM_OC4Init+0xc8>)
    3ad6:	4293      	cmp	r3, r2
    3ad8:	d003      	beq.n	3ae2 <TIM_OC4Init+0x8a>
    3ada:	687b      	ldr	r3, [r7, #4]
    3adc:	4a11      	ldr	r2, [pc, #68]	; (3b24 <TIM_OC4Init+0xcc>)
    3ade:	4293      	cmp	r3, r2
    3ae0:	d10a      	bne.n	3af8 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
    3ae2:	89fb      	ldrh	r3, [r7, #14]
    3ae4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    3ae8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
    3aea:	683b      	ldr	r3, [r7, #0]
    3aec:	899b      	ldrh	r3, [r3, #12]
    3aee:	019b      	lsls	r3, r3, #6
    3af0:	b29a      	uxth	r2, r3
    3af2:	89fb      	ldrh	r3, [r7, #14]
    3af4:	4313      	orrs	r3, r2
    3af6:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    3af8:	687b      	ldr	r3, [r7, #4]
    3afa:	89fa      	ldrh	r2, [r7, #14]
    3afc:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    3afe:	687b      	ldr	r3, [r7, #4]
    3b00:	89ba      	ldrh	r2, [r7, #12]
    3b02:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
    3b04:	683b      	ldr	r3, [r7, #0]
    3b06:	88da      	ldrh	r2, [r3, #6]
    3b08:	687b      	ldr	r3, [r7, #4]
    3b0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    3b0e:	687b      	ldr	r3, [r7, #4]
    3b10:	897a      	ldrh	r2, [r7, #10]
    3b12:	841a      	strh	r2, [r3, #32]
}
    3b14:	bf00      	nop
    3b16:	3714      	adds	r7, #20
    3b18:	46bd      	mov	sp, r7
    3b1a:	bc80      	pop	{r7}
    3b1c:	4770      	bx	lr
    3b1e:	bf00      	nop
    3b20:	40012c00 	.word	0x40012c00
    3b24:	40013400 	.word	0x40013400

00003b28 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    3b28:	b580      	push	{r7, lr}
    3b2a:	b082      	sub	sp, #8
    3b2c:	af00      	add	r7, sp, #0
    3b2e:	6078      	str	r0, [r7, #4]
    3b30:	6039      	str	r1, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
    3b32:	683b      	ldr	r3, [r7, #0]
    3b34:	881b      	ldrh	r3, [r3, #0]
    3b36:	2b00      	cmp	r3, #0
    3b38:	d10f      	bne.n	3b5a <TIM_ICInit+0x32>
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    3b3a:	683b      	ldr	r3, [r7, #0]
    3b3c:	8859      	ldrh	r1, [r3, #2]
    3b3e:	683b      	ldr	r3, [r7, #0]
    3b40:	889a      	ldrh	r2, [r3, #4]
    3b42:	683b      	ldr	r3, [r7, #0]
    3b44:	891b      	ldrh	r3, [r3, #8]
    3b46:	6878      	ldr	r0, [r7, #4]
    3b48:	f001 f947 	bl	4dda <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3b4c:	683b      	ldr	r3, [r7, #0]
    3b4e:	88db      	ldrh	r3, [r3, #6]
    3b50:	4619      	mov	r1, r3
    3b52:	6878      	ldr	r0, [r7, #4]
    3b54:	f001 f809 	bl	4b6a <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
    3b58:	e036      	b.n	3bc8 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
    3b5a:	683b      	ldr	r3, [r7, #0]
    3b5c:	881b      	ldrh	r3, [r3, #0]
    3b5e:	2b04      	cmp	r3, #4
    3b60:	d10f      	bne.n	3b82 <TIM_ICInit+0x5a>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    3b62:	683b      	ldr	r3, [r7, #0]
    3b64:	8859      	ldrh	r1, [r3, #2]
    3b66:	683b      	ldr	r3, [r7, #0]
    3b68:	889a      	ldrh	r2, [r3, #4]
    3b6a:	683b      	ldr	r3, [r7, #0]
    3b6c:	891b      	ldrh	r3, [r3, #8]
    3b6e:	6878      	ldr	r0, [r7, #4]
    3b70:	f001 f9a4 	bl	4ebc <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3b74:	683b      	ldr	r3, [r7, #0]
    3b76:	88db      	ldrh	r3, [r3, #6]
    3b78:	4619      	mov	r1, r3
    3b7a:	6878      	ldr	r0, [r7, #4]
    3b7c:	f001 f810 	bl	4ba0 <TIM_SetIC2Prescaler>
}
    3b80:	e022      	b.n	3bc8 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
    3b82:	683b      	ldr	r3, [r7, #0]
    3b84:	881b      	ldrh	r3, [r3, #0]
    3b86:	2b08      	cmp	r3, #8
    3b88:	d10f      	bne.n	3baa <TIM_ICInit+0x82>
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
    3b8a:	683b      	ldr	r3, [r7, #0]
    3b8c:	8859      	ldrh	r1, [r3, #2]
    3b8e:	683b      	ldr	r3, [r7, #0]
    3b90:	889a      	ldrh	r2, [r3, #4]
    3b92:	683b      	ldr	r3, [r7, #0]
    3b94:	891b      	ldrh	r3, [r3, #8]
    3b96:	6878      	ldr	r0, [r7, #4]
    3b98:	f001 fa0a 	bl	4fb0 <TI3_Config>
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3b9c:	683b      	ldr	r3, [r7, #0]
    3b9e:	88db      	ldrh	r3, [r3, #6]
    3ba0:	4619      	mov	r1, r3
    3ba2:	6878      	ldr	r0, [r7, #4]
    3ba4:	f001 f819 	bl	4bda <TIM_SetIC3Prescaler>
}
    3ba8:	e00e      	b.n	3bc8 <TIM_ICInit+0xa0>
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    3baa:	683b      	ldr	r3, [r7, #0]
    3bac:	8859      	ldrh	r1, [r3, #2]
    3bae:	683b      	ldr	r3, [r7, #0]
    3bb0:	889a      	ldrh	r2, [r3, #4]
    3bb2:	683b      	ldr	r3, [r7, #0]
    3bb4:	891b      	ldrh	r3, [r3, #8]
    3bb6:	6878      	ldr	r0, [r7, #4]
    3bb8:	f001 fa70 	bl	509c <TI4_Config>
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3bbc:	683b      	ldr	r3, [r7, #0]
    3bbe:	88db      	ldrh	r3, [r3, #6]
    3bc0:	4619      	mov	r1, r3
    3bc2:	6878      	ldr	r0, [r7, #4]
    3bc4:	f001 f824 	bl	4c10 <TIM_SetIC4Prescaler>
}
    3bc8:	bf00      	nop
    3bca:	3708      	adds	r7, #8
    3bcc:	46bd      	mov	sp, r7
    3bce:	bd80      	pop	{r7, pc}

00003bd0 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    3bd0:	b580      	push	{r7, lr}
    3bd2:	b084      	sub	sp, #16
    3bd4:	af00      	add	r7, sp, #0
    3bd6:	6078      	str	r0, [r7, #4]
    3bd8:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
    3bda:	2300      	movs	r3, #0
    3bdc:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
    3bde:	2301      	movs	r3, #1
    3be0:	81bb      	strh	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
    3be2:	683b      	ldr	r3, [r7, #0]
    3be4:	885b      	ldrh	r3, [r3, #2]
    3be6:	2b00      	cmp	r3, #0
    3be8:	d102      	bne.n	3bf0 <TIM_PWMIConfig+0x20>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
    3bea:	2302      	movs	r3, #2
    3bec:	81fb      	strh	r3, [r7, #14]
    3bee:	e001      	b.n	3bf4 <TIM_PWMIConfig+0x24>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
    3bf0:	2300      	movs	r3, #0
    3bf2:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
    3bf4:	683b      	ldr	r3, [r7, #0]
    3bf6:	889b      	ldrh	r3, [r3, #4]
    3bf8:	2b01      	cmp	r3, #1
    3bfa:	d102      	bne.n	3c02 <TIM_PWMIConfig+0x32>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
    3bfc:	2302      	movs	r3, #2
    3bfe:	81bb      	strh	r3, [r7, #12]
    3c00:	e001      	b.n	3c06 <TIM_PWMIConfig+0x36>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
    3c02:	2301      	movs	r3, #1
    3c04:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
    3c06:	683b      	ldr	r3, [r7, #0]
    3c08:	881b      	ldrh	r3, [r3, #0]
    3c0a:	2b00      	cmp	r3, #0
    3c0c:	d11c      	bne.n	3c48 <TIM_PWMIConfig+0x78>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    3c0e:	683b      	ldr	r3, [r7, #0]
    3c10:	8859      	ldrh	r1, [r3, #2]
    3c12:	683b      	ldr	r3, [r7, #0]
    3c14:	889a      	ldrh	r2, [r3, #4]
    3c16:	683b      	ldr	r3, [r7, #0]
    3c18:	891b      	ldrh	r3, [r3, #8]
    3c1a:	6878      	ldr	r0, [r7, #4]
    3c1c:	f001 f8dd 	bl	4dda <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3c20:	683b      	ldr	r3, [r7, #0]
    3c22:	88db      	ldrh	r3, [r3, #6]
    3c24:	4619      	mov	r1, r3
    3c26:	6878      	ldr	r0, [r7, #4]
    3c28:	f000 ff9f 	bl	4b6a <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    3c2c:	683b      	ldr	r3, [r7, #0]
    3c2e:	891b      	ldrh	r3, [r3, #8]
    3c30:	89ba      	ldrh	r2, [r7, #12]
    3c32:	89f9      	ldrh	r1, [r7, #14]
    3c34:	6878      	ldr	r0, [r7, #4]
    3c36:	f001 f941 	bl	4ebc <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3c3a:	683b      	ldr	r3, [r7, #0]
    3c3c:	88db      	ldrh	r3, [r3, #6]
    3c3e:	4619      	mov	r1, r3
    3c40:	6878      	ldr	r0, [r7, #4]
    3c42:	f000 ffad 	bl	4ba0 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
    3c46:	e01b      	b.n	3c80 <TIM_PWMIConfig+0xb0>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    3c48:	683b      	ldr	r3, [r7, #0]
    3c4a:	8859      	ldrh	r1, [r3, #2]
    3c4c:	683b      	ldr	r3, [r7, #0]
    3c4e:	889a      	ldrh	r2, [r3, #4]
    3c50:	683b      	ldr	r3, [r7, #0]
    3c52:	891b      	ldrh	r3, [r3, #8]
    3c54:	6878      	ldr	r0, [r7, #4]
    3c56:	f001 f931 	bl	4ebc <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3c5a:	683b      	ldr	r3, [r7, #0]
    3c5c:	88db      	ldrh	r3, [r3, #6]
    3c5e:	4619      	mov	r1, r3
    3c60:	6878      	ldr	r0, [r7, #4]
    3c62:	f000 ff9d 	bl	4ba0 <TIM_SetIC2Prescaler>
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    3c66:	683b      	ldr	r3, [r7, #0]
    3c68:	891b      	ldrh	r3, [r3, #8]
    3c6a:	89ba      	ldrh	r2, [r7, #12]
    3c6c:	89f9      	ldrh	r1, [r7, #14]
    3c6e:	6878      	ldr	r0, [r7, #4]
    3c70:	f001 f8b3 	bl	4dda <TI1_Config>
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3c74:	683b      	ldr	r3, [r7, #0]
    3c76:	88db      	ldrh	r3, [r3, #6]
    3c78:	4619      	mov	r1, r3
    3c7a:	6878      	ldr	r0, [r7, #4]
    3c7c:	f000 ff75 	bl	4b6a <TIM_SetIC1Prescaler>
}
    3c80:	bf00      	nop
    3c82:	3710      	adds	r7, #16
    3c84:	46bd      	mov	sp, r7
    3c86:	bd80      	pop	{r7, pc}

00003c88 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
    3c88:	b480      	push	{r7}
    3c8a:	b083      	sub	sp, #12
    3c8c:	af00      	add	r7, sp, #0
    3c8e:	6078      	str	r0, [r7, #4]
    3c90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    3c92:	683b      	ldr	r3, [r7, #0]
    3c94:	881a      	ldrh	r2, [r3, #0]
    3c96:	683b      	ldr	r3, [r7, #0]
    3c98:	885b      	ldrh	r3, [r3, #2]
    3c9a:	4313      	orrs	r3, r2
    3c9c:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
    3c9e:	683b      	ldr	r3, [r7, #0]
    3ca0:	889b      	ldrh	r3, [r3, #4]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    3ca2:	4313      	orrs	r3, r2
    3ca4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
    3ca6:	683b      	ldr	r3, [r7, #0]
    3ca8:	88db      	ldrh	r3, [r3, #6]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    3caa:	4313      	orrs	r3, r2
    3cac:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
    3cae:	683b      	ldr	r3, [r7, #0]
    3cb0:	891b      	ldrh	r3, [r3, #8]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    3cb2:	4313      	orrs	r3, r2
    3cb4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
    3cb6:	683b      	ldr	r3, [r7, #0]
    3cb8:	895b      	ldrh	r3, [r3, #10]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    3cba:	4313      	orrs	r3, r2
    3cbc:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
    3cbe:	683b      	ldr	r3, [r7, #0]
    3cc0:	899b      	ldrh	r3, [r3, #12]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    3cc2:	4313      	orrs	r3, r2
    3cc4:	b29a      	uxth	r2, r3
    3cc6:	687b      	ldr	r3, [r7, #4]
    3cc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
    3ccc:	bf00      	nop
    3cce:	370c      	adds	r7, #12
    3cd0:	46bd      	mov	sp, r7
    3cd2:	bc80      	pop	{r7}
    3cd4:	4770      	bx	lr

00003cd6 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
    3cd6:	b480      	push	{r7}
    3cd8:	b083      	sub	sp, #12
    3cda:	af00      	add	r7, sp, #0
    3cdc:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
    3cde:	687b      	ldr	r3, [r7, #4]
    3ce0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3ce4:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
    3ce6:	687b      	ldr	r3, [r7, #4]
    3ce8:	2200      	movs	r2, #0
    3cea:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
    3cec:	687b      	ldr	r3, [r7, #4]
    3cee:	2200      	movs	r2, #0
    3cf0:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
    3cf2:	687b      	ldr	r3, [r7, #4]
    3cf4:	2200      	movs	r2, #0
    3cf6:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
    3cf8:	687b      	ldr	r3, [r7, #4]
    3cfa:	2200      	movs	r2, #0
    3cfc:	721a      	strb	r2, [r3, #8]
}
    3cfe:	bf00      	nop
    3d00:	370c      	adds	r7, #12
    3d02:	46bd      	mov	sp, r7
    3d04:	bc80      	pop	{r7}
    3d06:	4770      	bx	lr

00003d08 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct : pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    3d08:	b480      	push	{r7}
    3d0a:	b083      	sub	sp, #12
    3d0c:	af00      	add	r7, sp, #0
    3d0e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
    3d10:	687b      	ldr	r3, [r7, #4]
    3d12:	2200      	movs	r2, #0
    3d14:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
    3d16:	687b      	ldr	r3, [r7, #4]
    3d18:	2200      	movs	r2, #0
    3d1a:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
    3d1c:	687b      	ldr	r3, [r7, #4]
    3d1e:	2200      	movs	r2, #0
    3d20:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
    3d22:	687b      	ldr	r3, [r7, #4]
    3d24:	2200      	movs	r2, #0
    3d26:	80da      	strh	r2, [r3, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
    3d28:	687b      	ldr	r3, [r7, #4]
    3d2a:	2200      	movs	r2, #0
    3d2c:	811a      	strh	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
    3d2e:	687b      	ldr	r3, [r7, #4]
    3d30:	2200      	movs	r2, #0
    3d32:	815a      	strh	r2, [r3, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
    3d34:	687b      	ldr	r3, [r7, #4]
    3d36:	2200      	movs	r2, #0
    3d38:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
    3d3a:	687b      	ldr	r3, [r7, #4]
    3d3c:	2200      	movs	r2, #0
    3d3e:	81da      	strh	r2, [r3, #14]
}
    3d40:	bf00      	nop
    3d42:	370c      	adds	r7, #12
    3d44:	46bd      	mov	sp, r7
    3d46:	bc80      	pop	{r7}
    3d48:	4770      	bx	lr

00003d4a <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    3d4a:	b480      	push	{r7}
    3d4c:	b083      	sub	sp, #12
    3d4e:	af00      	add	r7, sp, #0
    3d50:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
    3d52:	687b      	ldr	r3, [r7, #4]
    3d54:	2200      	movs	r2, #0
    3d56:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
    3d58:	687b      	ldr	r3, [r7, #4]
    3d5a:	2200      	movs	r2, #0
    3d5c:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
    3d5e:	687b      	ldr	r3, [r7, #4]
    3d60:	2201      	movs	r2, #1
    3d62:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
    3d64:	687b      	ldr	r3, [r7, #4]
    3d66:	2200      	movs	r2, #0
    3d68:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
    3d6a:	687b      	ldr	r3, [r7, #4]
    3d6c:	2200      	movs	r2, #0
    3d6e:	811a      	strh	r2, [r3, #8]
}
    3d70:	bf00      	nop
    3d72:	370c      	adds	r7, #12
    3d74:	46bd      	mov	sp, r7
    3d76:	bc80      	pop	{r7}
    3d78:	4770      	bx	lr

00003d7a <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
    3d7a:	b480      	push	{r7}
    3d7c:	b083      	sub	sp, #12
    3d7e:	af00      	add	r7, sp, #0
    3d80:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
    3d82:	687b      	ldr	r3, [r7, #4]
    3d84:	2200      	movs	r2, #0
    3d86:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
    3d88:	687b      	ldr	r3, [r7, #4]
    3d8a:	2200      	movs	r2, #0
    3d8c:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
    3d8e:	687b      	ldr	r3, [r7, #4]
    3d90:	2200      	movs	r2, #0
    3d92:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
    3d94:	687b      	ldr	r3, [r7, #4]
    3d96:	2200      	movs	r2, #0
    3d98:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
    3d9a:	687b      	ldr	r3, [r7, #4]
    3d9c:	2200      	movs	r2, #0
    3d9e:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
    3da0:	687b      	ldr	r3, [r7, #4]
    3da2:	2200      	movs	r2, #0
    3da4:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
    3da6:	687b      	ldr	r3, [r7, #4]
    3da8:	2200      	movs	r2, #0
    3daa:	819a      	strh	r2, [r3, #12]
}
    3dac:	bf00      	nop
    3dae:	370c      	adds	r7, #12
    3db0:	46bd      	mov	sp, r7
    3db2:	bc80      	pop	{r7}
    3db4:	4770      	bx	lr

00003db6 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3db6:	b480      	push	{r7}
    3db8:	b083      	sub	sp, #12
    3dba:	af00      	add	r7, sp, #0
    3dbc:	6078      	str	r0, [r7, #4]
    3dbe:	460b      	mov	r3, r1
    3dc0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    3dc2:	78fb      	ldrb	r3, [r7, #3]
    3dc4:	2b00      	cmp	r3, #0
    3dc6:	d008      	beq.n	3dda <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
    3dc8:	687b      	ldr	r3, [r7, #4]
    3dca:	881b      	ldrh	r3, [r3, #0]
    3dcc:	b29b      	uxth	r3, r3
    3dce:	f043 0301 	orr.w	r3, r3, #1
    3dd2:	b29a      	uxth	r2, r3
    3dd4:	687b      	ldr	r3, [r7, #4]
    3dd6:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
    3dd8:	e007      	b.n	3dea <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
    3dda:	687b      	ldr	r3, [r7, #4]
    3ddc:	881b      	ldrh	r3, [r3, #0]
    3dde:	b29b      	uxth	r3, r3
    3de0:	f023 0301 	bic.w	r3, r3, #1
    3de4:	b29a      	uxth	r2, r3
    3de6:	687b      	ldr	r3, [r7, #4]
    3de8:	801a      	strh	r2, [r3, #0]
}
    3dea:	bf00      	nop
    3dec:	370c      	adds	r7, #12
    3dee:	46bd      	mov	sp, r7
    3df0:	bc80      	pop	{r7}
    3df2:	4770      	bx	lr

00003df4 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3df4:	b480      	push	{r7}
    3df6:	b083      	sub	sp, #12
    3df8:	af00      	add	r7, sp, #0
    3dfa:	6078      	str	r0, [r7, #4]
    3dfc:	460b      	mov	r3, r1
    3dfe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3e00:	78fb      	ldrb	r3, [r7, #3]
    3e02:	2b00      	cmp	r3, #0
    3e04:	d00c      	beq.n	3e20 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
    3e06:	687b      	ldr	r3, [r7, #4]
    3e08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    3e0c:	b29b      	uxth	r3, r3
    3e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    3e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    3e16:	b29a      	uxth	r2, r3
    3e18:	687b      	ldr	r3, [r7, #4]
    3e1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
  }  
}
    3e1e:	e009      	b.n	3e34 <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
    3e20:	687b      	ldr	r3, [r7, #4]
    3e22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    3e26:	b29b      	uxth	r3, r3
    3e28:	f3c3 030e 	ubfx	r3, r3, #0, #15
    3e2c:	b29a      	uxth	r2, r3
    3e2e:	687b      	ldr	r3, [r7, #4]
    3e30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
    3e34:	bf00      	nop
    3e36:	370c      	adds	r7, #12
    3e38:	46bd      	mov	sp, r7
    3e3a:	bc80      	pop	{r7}
    3e3c:	4770      	bx	lr

00003e3e <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
    3e3e:	b480      	push	{r7}
    3e40:	b083      	sub	sp, #12
    3e42:	af00      	add	r7, sp, #0
    3e44:	6078      	str	r0, [r7, #4]
    3e46:	460b      	mov	r3, r1
    3e48:	807b      	strh	r3, [r7, #2]
    3e4a:	4613      	mov	r3, r2
    3e4c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    3e4e:	787b      	ldrb	r3, [r7, #1]
    3e50:	2b00      	cmp	r3, #0
    3e52:	d008      	beq.n	3e66 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
    3e54:	687b      	ldr	r3, [r7, #4]
    3e56:	899b      	ldrh	r3, [r3, #12]
    3e58:	b29a      	uxth	r2, r3
    3e5a:	887b      	ldrh	r3, [r7, #2]
    3e5c:	4313      	orrs	r3, r2
    3e5e:	b29a      	uxth	r2, r3
    3e60:	687b      	ldr	r3, [r7, #4]
    3e62:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
    3e64:	e009      	b.n	3e7a <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
    3e66:	687b      	ldr	r3, [r7, #4]
    3e68:	899b      	ldrh	r3, [r3, #12]
    3e6a:	b29a      	uxth	r2, r3
    3e6c:	887b      	ldrh	r3, [r7, #2]
    3e6e:	43db      	mvns	r3, r3
    3e70:	b29b      	uxth	r3, r3
    3e72:	4013      	ands	r3, r2
    3e74:	b29a      	uxth	r2, r3
    3e76:	687b      	ldr	r3, [r7, #4]
    3e78:	819a      	strh	r2, [r3, #12]
}
    3e7a:	bf00      	nop
    3e7c:	370c      	adds	r7, #12
    3e7e:	46bd      	mov	sp, r7
    3e80:	bc80      	pop	{r7}
    3e82:	4770      	bx	lr

00003e84 <TIM_GenerateEvent>:
  *   - TIM6 and TIM7 can only generate an update event. 
  *   - TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.      
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
    3e84:	b480      	push	{r7}
    3e86:	b083      	sub	sp, #12
    3e88:	af00      	add	r7, sp, #0
    3e8a:	6078      	str	r0, [r7, #4]
    3e8c:	460b      	mov	r3, r1
    3e8e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
    3e90:	687b      	ldr	r3, [r7, #4]
    3e92:	887a      	ldrh	r2, [r7, #2]
    3e94:	829a      	strh	r2, [r3, #20]
}
    3e96:	bf00      	nop
    3e98:	370c      	adds	r7, #12
    3e9a:	46bd      	mov	sp, r7
    3e9c:	bc80      	pop	{r7}
    3e9e:	4770      	bx	lr

00003ea0 <TIM_DMAConfig>:
  *   This parameter can be one value between:
  *   TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
    3ea0:	b480      	push	{r7}
    3ea2:	b083      	sub	sp, #12
    3ea4:	af00      	add	r7, sp, #0
    3ea6:	6078      	str	r0, [r7, #4]
    3ea8:	460b      	mov	r3, r1
    3eaa:	807b      	strh	r3, [r7, #2]
    3eac:	4613      	mov	r3, r2
    3eae:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
    3eb0:	887a      	ldrh	r2, [r7, #2]
    3eb2:	883b      	ldrh	r3, [r7, #0]
    3eb4:	4313      	orrs	r3, r2
    3eb6:	b29a      	uxth	r2, r3
    3eb8:	687b      	ldr	r3, [r7, #4]
    3eba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
    3ebe:	bf00      	nop
    3ec0:	370c      	adds	r7, #12
    3ec2:	46bd      	mov	sp, r7
    3ec4:	bc80      	pop	{r7}
    3ec6:	4770      	bx	lr

00003ec8 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
    3ec8:	b480      	push	{r7}
    3eca:	b083      	sub	sp, #12
    3ecc:	af00      	add	r7, sp, #0
    3ece:	6078      	str	r0, [r7, #4]
    3ed0:	460b      	mov	r3, r1
    3ed2:	807b      	strh	r3, [r7, #2]
    3ed4:	4613      	mov	r3, r2
    3ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST9_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    3ed8:	787b      	ldrb	r3, [r7, #1]
    3eda:	2b00      	cmp	r3, #0
    3edc:	d008      	beq.n	3ef0 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
    3ede:	687b      	ldr	r3, [r7, #4]
    3ee0:	899b      	ldrh	r3, [r3, #12]
    3ee2:	b29a      	uxth	r2, r3
    3ee4:	887b      	ldrh	r3, [r7, #2]
    3ee6:	4313      	orrs	r3, r2
    3ee8:	b29a      	uxth	r2, r3
    3eea:	687b      	ldr	r3, [r7, #4]
    3eec:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
    3eee:	e009      	b.n	3f04 <TIM_DMACmd+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
    3ef0:	687b      	ldr	r3, [r7, #4]
    3ef2:	899b      	ldrh	r3, [r3, #12]
    3ef4:	b29a      	uxth	r2, r3
    3ef6:	887b      	ldrh	r3, [r7, #2]
    3ef8:	43db      	mvns	r3, r3
    3efa:	b29b      	uxth	r3, r3
    3efc:	4013      	ands	r3, r2
    3efe:	b29a      	uxth	r2, r3
    3f00:	687b      	ldr	r3, [r7, #4]
    3f02:	819a      	strh	r2, [r3, #12]
}
    3f04:	bf00      	nop
    3f06:	370c      	adds	r7, #12
    3f08:	46bd      	mov	sp, r7
    3f0a:	bc80      	pop	{r7}
    3f0c:	4770      	bx	lr

00003f0e <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15
  *         to select the TIM peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
    3f0e:	b480      	push	{r7}
    3f10:	b083      	sub	sp, #12
    3f12:	af00      	add	r7, sp, #0
    3f14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
    3f16:	687b      	ldr	r3, [r7, #4]
    3f18:	891b      	ldrh	r3, [r3, #8]
    3f1a:	b29b      	uxth	r3, r3
    3f1c:	f023 0307 	bic.w	r3, r3, #7
    3f20:	b29a      	uxth	r2, r3
    3f22:	687b      	ldr	r3, [r7, #4]
    3f24:	811a      	strh	r2, [r3, #8]
}
    3f26:	bf00      	nop
    3f28:	370c      	adds	r7, #12
    3f2a:	46bd      	mov	sp, r7
    3f2c:	bc80      	pop	{r7}
    3f2e:	4770      	bx	lr

00003f30 <TIM_ITRxExternalClockConfig>:
  * @param  TIM_TS_ITR2: Internal Trigger 2
  * @param  TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
    3f30:	b580      	push	{r7, lr}
    3f32:	b082      	sub	sp, #8
    3f34:	af00      	add	r7, sp, #0
    3f36:	6078      	str	r0, [r7, #4]
    3f38:	460b      	mov	r3, r1
    3f3a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
    3f3c:	887b      	ldrh	r3, [r7, #2]
    3f3e:	4619      	mov	r1, r3
    3f40:	6878      	ldr	r0, [r7, #4]
    3f42:	f000 f8df 	bl	4104 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
    3f46:	687b      	ldr	r3, [r7, #4]
    3f48:	891b      	ldrh	r3, [r3, #8]
    3f4a:	b29b      	uxth	r3, r3
    3f4c:	f043 0307 	orr.w	r3, r3, #7
    3f50:	b29a      	uxth	r2, r3
    3f52:	687b      	ldr	r3, [r7, #4]
    3f54:	811a      	strh	r2, [r3, #8]
}
    3f56:	bf00      	nop
    3f58:	3708      	adds	r7, #8
    3f5a:	46bd      	mov	sp, r7
    3f5c:	bd80      	pop	{r7, pc}

00003f5e <TIM_TIxExternalClockConfig>:
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
    3f5e:	b580      	push	{r7, lr}
    3f60:	b084      	sub	sp, #16
    3f62:	af00      	add	r7, sp, #0
    3f64:	60f8      	str	r0, [r7, #12]
    3f66:	4608      	mov	r0, r1
    3f68:	4611      	mov	r1, r2
    3f6a:	461a      	mov	r2, r3
    3f6c:	4603      	mov	r3, r0
    3f6e:	817b      	strh	r3, [r7, #10]
    3f70:	460b      	mov	r3, r1
    3f72:	813b      	strh	r3, [r7, #8]
    3f74:	4613      	mov	r3, r2
    3f76:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
    3f78:	897b      	ldrh	r3, [r7, #10]
    3f7a:	2b60      	cmp	r3, #96	; 0x60
    3f7c:	d106      	bne.n	3f8c <TIM_TIxExternalClockConfig+0x2e>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
    3f7e:	88fb      	ldrh	r3, [r7, #6]
    3f80:	8939      	ldrh	r1, [r7, #8]
    3f82:	2201      	movs	r2, #1
    3f84:	68f8      	ldr	r0, [r7, #12]
    3f86:	f000 ff99 	bl	4ebc <TI2_Config>
    3f8a:	e005      	b.n	3f98 <TIM_TIxExternalClockConfig+0x3a>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
    3f8c:	88fb      	ldrh	r3, [r7, #6]
    3f8e:	8939      	ldrh	r1, [r7, #8]
    3f90:	2201      	movs	r2, #1
    3f92:	68f8      	ldr	r0, [r7, #12]
    3f94:	f000 ff21 	bl	4dda <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
    3f98:	897b      	ldrh	r3, [r7, #10]
    3f9a:	4619      	mov	r1, r3
    3f9c:	68f8      	ldr	r0, [r7, #12]
    3f9e:	f000 f8b1 	bl	4104 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
    3fa2:	68fb      	ldr	r3, [r7, #12]
    3fa4:	891b      	ldrh	r3, [r3, #8]
    3fa6:	b29b      	uxth	r3, r3
    3fa8:	f043 0307 	orr.w	r3, r3, #7
    3fac:	b29a      	uxth	r2, r3
    3fae:	68fb      	ldr	r3, [r7, #12]
    3fb0:	811a      	strh	r2, [r3, #8]
}
    3fb2:	bf00      	nop
    3fb4:	3710      	adds	r7, #16
    3fb6:	46bd      	mov	sp, r7
    3fb8:	bd80      	pop	{r7, pc}

00003fba <TIM_ETRClockMode1Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
    3fba:	b580      	push	{r7, lr}
    3fbc:	b086      	sub	sp, #24
    3fbe:	af00      	add	r7, sp, #0
    3fc0:	60f8      	str	r0, [r7, #12]
    3fc2:	4608      	mov	r0, r1
    3fc4:	4611      	mov	r1, r2
    3fc6:	461a      	mov	r2, r3
    3fc8:	4603      	mov	r3, r0
    3fca:	817b      	strh	r3, [r7, #10]
    3fcc:	460b      	mov	r3, r1
    3fce:	813b      	strh	r3, [r7, #8]
    3fd0:	4613      	mov	r3, r2
    3fd2:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    3fd4:	2300      	movs	r3, #0
    3fd6:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
    3fd8:	88fb      	ldrh	r3, [r7, #6]
    3fda:	893a      	ldrh	r2, [r7, #8]
    3fdc:	8979      	ldrh	r1, [r7, #10]
    3fde:	68f8      	ldr	r0, [r7, #12]
    3fe0:	f000 f839 	bl	4056 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    3fe4:	68fb      	ldr	r3, [r7, #12]
    3fe6:	891b      	ldrh	r3, [r3, #8]
    3fe8:	82fb      	strh	r3, [r7, #22]
  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
    3fea:	8afb      	ldrh	r3, [r7, #22]
    3fec:	f023 0307 	bic.w	r3, r3, #7
    3ff0:	82fb      	strh	r3, [r7, #22]
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
    3ff2:	8afb      	ldrh	r3, [r7, #22]
    3ff4:	f043 0307 	orr.w	r3, r3, #7
    3ff8:	82fb      	strh	r3, [r7, #22]
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
    3ffa:	8afb      	ldrh	r3, [r7, #22]
    3ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    4000:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
    4002:	8afb      	ldrh	r3, [r7, #22]
    4004:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    4008:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    400a:	68fb      	ldr	r3, [r7, #12]
    400c:	8afa      	ldrh	r2, [r7, #22]
    400e:	811a      	strh	r2, [r3, #8]
}
    4010:	bf00      	nop
    4012:	3718      	adds	r7, #24
    4014:	46bd      	mov	sp, r7
    4016:	bd80      	pop	{r7, pc}

00004018 <TIM_ETRClockMode2Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
    4018:	b580      	push	{r7, lr}
    401a:	b084      	sub	sp, #16
    401c:	af00      	add	r7, sp, #0
    401e:	60f8      	str	r0, [r7, #12]
    4020:	4608      	mov	r0, r1
    4022:	4611      	mov	r1, r2
    4024:	461a      	mov	r2, r3
    4026:	4603      	mov	r3, r0
    4028:	817b      	strh	r3, [r7, #10]
    402a:	460b      	mov	r3, r1
    402c:	813b      	strh	r3, [r7, #8]
    402e:	4613      	mov	r3, r2
    4030:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
    4032:	88fb      	ldrh	r3, [r7, #6]
    4034:	893a      	ldrh	r2, [r7, #8]
    4036:	8979      	ldrh	r1, [r7, #10]
    4038:	68f8      	ldr	r0, [r7, #12]
    403a:	f000 f80c 	bl	4056 <TIM_ETRConfig>
  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
    403e:	68fb      	ldr	r3, [r7, #12]
    4040:	891b      	ldrh	r3, [r3, #8]
    4042:	b29b      	uxth	r3, r3
    4044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    4048:	b29a      	uxth	r2, r3
    404a:	68fb      	ldr	r3, [r7, #12]
    404c:	811a      	strh	r2, [r3, #8]
}
    404e:	bf00      	nop
    4050:	3710      	adds	r7, #16
    4052:	46bd      	mov	sp, r7
    4054:	bd80      	pop	{r7, pc}

00004056 <TIM_ETRConfig>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
    4056:	b480      	push	{r7}
    4058:	b087      	sub	sp, #28
    405a:	af00      	add	r7, sp, #0
    405c:	60f8      	str	r0, [r7, #12]
    405e:	4608      	mov	r0, r1
    4060:	4611      	mov	r1, r2
    4062:	461a      	mov	r2, r3
    4064:	4603      	mov	r3, r0
    4066:	817b      	strh	r3, [r7, #10]
    4068:	460b      	mov	r3, r1
    406a:	813b      	strh	r3, [r7, #8]
    406c:	4613      	mov	r3, r2
    406e:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    4070:	2300      	movs	r3, #0
    4072:	82fb      	strh	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
    4074:	68fb      	ldr	r3, [r7, #12]
    4076:	891b      	ldrh	r3, [r3, #8]
    4078:	82fb      	strh	r3, [r7, #22]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
    407a:	8afb      	ldrh	r3, [r7, #22]
    407c:	b2db      	uxtb	r3, r3
    407e:	82fb      	strh	r3, [r7, #22]
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
    4080:	88fb      	ldrh	r3, [r7, #6]
    4082:	021b      	lsls	r3, r3, #8
    4084:	b29a      	uxth	r2, r3
    4086:	893b      	ldrh	r3, [r7, #8]
    4088:	4313      	orrs	r3, r2
    408a:	b29a      	uxth	r2, r3
    408c:	897b      	ldrh	r3, [r7, #10]
    408e:	4313      	orrs	r3, r2
    4090:	b29a      	uxth	r2, r3
    4092:	8afb      	ldrh	r3, [r7, #22]
    4094:	4313      	orrs	r3, r2
    4096:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    4098:	68fb      	ldr	r3, [r7, #12]
    409a:	8afa      	ldrh	r2, [r7, #22]
    409c:	811a      	strh	r2, [r3, #8]
}
    409e:	bf00      	nop
    40a0:	371c      	adds	r7, #28
    40a2:	46bd      	mov	sp, r7
    40a4:	bc80      	pop	{r7}
    40a6:	4770      	bx	lr

000040a8 <TIM_PrescalerConfig>:
  *     @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *     @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediately.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
    40a8:	b480      	push	{r7}
    40aa:	b083      	sub	sp, #12
    40ac:	af00      	add	r7, sp, #0
    40ae:	6078      	str	r0, [r7, #4]
    40b0:	460b      	mov	r3, r1
    40b2:	807b      	strh	r3, [r7, #2]
    40b4:	4613      	mov	r3, r2
    40b6:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
    40b8:	687b      	ldr	r3, [r7, #4]
    40ba:	887a      	ldrh	r2, [r7, #2]
    40bc:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
    40be:	687b      	ldr	r3, [r7, #4]
    40c0:	883a      	ldrh	r2, [r7, #0]
    40c2:	829a      	strh	r2, [r3, #20]
}
    40c4:	bf00      	nop
    40c6:	370c      	adds	r7, #12
    40c8:	46bd      	mov	sp, r7
    40ca:	bc80      	pop	{r7}
    40cc:	4770      	bx	lr

000040ce <TIM_CounterModeConfig>:
  *     @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *     @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
    40ce:	b480      	push	{r7}
    40d0:	b085      	sub	sp, #20
    40d2:	af00      	add	r7, sp, #0
    40d4:	6078      	str	r0, [r7, #4]
    40d6:	460b      	mov	r3, r1
    40d8:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
    40da:	2300      	movs	r3, #0
    40dc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  tmpcr1 = TIMx->CR1;
    40de:	687b      	ldr	r3, [r7, #4]
    40e0:	881b      	ldrh	r3, [r3, #0]
    40e2:	81fb      	strh	r3, [r7, #14]
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    40e4:	89fb      	ldrh	r3, [r7, #14]
    40e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    40ea:	81fb      	strh	r3, [r7, #14]
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
    40ec:	89fa      	ldrh	r2, [r7, #14]
    40ee:	887b      	ldrh	r3, [r7, #2]
    40f0:	4313      	orrs	r3, r2
    40f2:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
    40f4:	687b      	ldr	r3, [r7, #4]
    40f6:	89fa      	ldrh	r2, [r7, #14]
    40f8:	801a      	strh	r2, [r3, #0]
}
    40fa:	bf00      	nop
    40fc:	3714      	adds	r7, #20
    40fe:	46bd      	mov	sp, r7
    4100:	bc80      	pop	{r7}
    4102:	4770      	bx	lr

00004104 <TIM_SelectInputTrigger>:
  *     @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *     @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
    4104:	b480      	push	{r7}
    4106:	b085      	sub	sp, #20
    4108:	af00      	add	r7, sp, #0
    410a:	6078      	str	r0, [r7, #4]
    410c:	460b      	mov	r3, r1
    410e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
    4110:	2300      	movs	r3, #0
    4112:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    4114:	687b      	ldr	r3, [r7, #4]
    4116:	891b      	ldrh	r3, [r3, #8]
    4118:	81fb      	strh	r3, [r7, #14]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
    411a:	89fb      	ldrh	r3, [r7, #14]
    411c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    4120:	81fb      	strh	r3, [r7, #14]
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
    4122:	89fa      	ldrh	r2, [r7, #14]
    4124:	887b      	ldrh	r3, [r7, #2]
    4126:	4313      	orrs	r3, r2
    4128:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    412a:	687b      	ldr	r3, [r7, #4]
    412c:	89fa      	ldrh	r2, [r7, #14]
    412e:	811a      	strh	r2, [r3, #8]
}
    4130:	bf00      	nop
    4132:	3714      	adds	r7, #20
    4134:	46bd      	mov	sp, r7
    4136:	bc80      	pop	{r7}
    4138:	4770      	bx	lr

0000413a <TIM_EncoderInterfaceConfig>:
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
    413a:	b480      	push	{r7}
    413c:	b087      	sub	sp, #28
    413e:	af00      	add	r7, sp, #0
    4140:	60f8      	str	r0, [r7, #12]
    4142:	4608      	mov	r0, r1
    4144:	4611      	mov	r1, r2
    4146:	461a      	mov	r2, r3
    4148:	4603      	mov	r3, r0
    414a:	817b      	strh	r3, [r7, #10]
    414c:	460b      	mov	r3, r1
    414e:	813b      	strh	r3, [r7, #8]
    4150:	4613      	mov	r3, r2
    4152:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    4154:	2300      	movs	r3, #0
    4156:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
    4158:	2300      	movs	r3, #0
    415a:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
    415c:	2300      	movs	r3, #0
    415e:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    4160:	68fb      	ldr	r3, [r7, #12]
    4162:	891b      	ldrh	r3, [r3, #8]
    4164:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    4166:	68fb      	ldr	r3, [r7, #12]
    4168:	8b1b      	ldrh	r3, [r3, #24]
    416a:	82bb      	strh	r3, [r7, #20]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    416c:	68fb      	ldr	r3, [r7, #12]
    416e:	8c1b      	ldrh	r3, [r3, #32]
    4170:	827b      	strh	r3, [r7, #18]
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
    4172:	8afb      	ldrh	r3, [r7, #22]
    4174:	f023 0307 	bic.w	r3, r3, #7
    4178:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
    417a:	8afa      	ldrh	r2, [r7, #22]
    417c:	897b      	ldrh	r3, [r7, #10]
    417e:	4313      	orrs	r3, r2
    4180:	82fb      	strh	r3, [r7, #22]
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
    4182:	8abb      	ldrh	r3, [r7, #20]
    4184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    4188:	f023 0303 	bic.w	r3, r3, #3
    418c:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
    418e:	8abb      	ldrh	r3, [r7, #20]
    4190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4194:	f043 0301 	orr.w	r3, r3, #1
    4198:	82bb      	strh	r3, [r7, #20]
  
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
    419a:	8a7b      	ldrh	r3, [r7, #18]
    419c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
    41a0:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
    41a2:	88fb      	ldrh	r3, [r7, #6]
    41a4:	011b      	lsls	r3, r3, #4
    41a6:	b29a      	uxth	r2, r3
    41a8:	893b      	ldrh	r3, [r7, #8]
    41aa:	4313      	orrs	r3, r2
    41ac:	b29a      	uxth	r2, r3
    41ae:	8a7b      	ldrh	r3, [r7, #18]
    41b0:	4313      	orrs	r3, r2
    41b2:	827b      	strh	r3, [r7, #18]
  
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    41b4:	68fb      	ldr	r3, [r7, #12]
    41b6:	8afa      	ldrh	r2, [r7, #22]
    41b8:	811a      	strh	r2, [r3, #8]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    41ba:	68fb      	ldr	r3, [r7, #12]
    41bc:	8aba      	ldrh	r2, [r7, #20]
    41be:	831a      	strh	r2, [r3, #24]
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    41c0:	68fb      	ldr	r3, [r7, #12]
    41c2:	8a7a      	ldrh	r2, [r7, #18]
    41c4:	841a      	strh	r2, [r3, #32]
}
    41c6:	bf00      	nop
    41c8:	371c      	adds	r7, #28
    41ca:	46bd      	mov	sp, r7
    41cc:	bc80      	pop	{r7}
    41ce:	4770      	bx	lr

000041d0 <TIM_ForcedOC1Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    41d0:	b480      	push	{r7}
    41d2:	b085      	sub	sp, #20
    41d4:	af00      	add	r7, sp, #0
    41d6:	6078      	str	r0, [r7, #4]
    41d8:	460b      	mov	r3, r1
    41da:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    41dc:	2300      	movs	r3, #0
    41de:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
    41e0:	687b      	ldr	r3, [r7, #4]
    41e2:	8b1b      	ldrh	r3, [r3, #24]
    41e4:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
    41e6:	89fb      	ldrh	r3, [r7, #14]
    41e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    41ec:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
    41ee:	89fa      	ldrh	r2, [r7, #14]
    41f0:	887b      	ldrh	r3, [r7, #2]
    41f2:	4313      	orrs	r3, r2
    41f4:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    41f6:	687b      	ldr	r3, [r7, #4]
    41f8:	89fa      	ldrh	r2, [r7, #14]
    41fa:	831a      	strh	r2, [r3, #24]
}
    41fc:	bf00      	nop
    41fe:	3714      	adds	r7, #20
    4200:	46bd      	mov	sp, r7
    4202:	bc80      	pop	{r7}
    4204:	4770      	bx	lr

00004206 <TIM_ForcedOC2Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    4206:	b480      	push	{r7}
    4208:	b085      	sub	sp, #20
    420a:	af00      	add	r7, sp, #0
    420c:	6078      	str	r0, [r7, #4]
    420e:	460b      	mov	r3, r1
    4210:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    4212:	2300      	movs	r3, #0
    4214:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
    4216:	687b      	ldr	r3, [r7, #4]
    4218:	8b1b      	ldrh	r3, [r3, #24]
    421a:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
    421c:	89fb      	ldrh	r3, [r7, #14]
    421e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    4222:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
    4224:	887b      	ldrh	r3, [r7, #2]
    4226:	021b      	lsls	r3, r3, #8
    4228:	b29a      	uxth	r2, r3
    422a:	89fb      	ldrh	r3, [r7, #14]
    422c:	4313      	orrs	r3, r2
    422e:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    4230:	687b      	ldr	r3, [r7, #4]
    4232:	89fa      	ldrh	r2, [r7, #14]
    4234:	831a      	strh	r2, [r3, #24]
}
    4236:	bf00      	nop
    4238:	3714      	adds	r7, #20
    423a:	46bd      	mov	sp, r7
    423c:	bc80      	pop	{r7}
    423e:	4770      	bx	lr

00004240 <TIM_ForcedOC3Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    4240:	b480      	push	{r7}
    4242:	b085      	sub	sp, #20
    4244:	af00      	add	r7, sp, #0
    4246:	6078      	str	r0, [r7, #4]
    4248:	460b      	mov	r3, r1
    424a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    424c:	2300      	movs	r3, #0
    424e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
    4250:	687b      	ldr	r3, [r7, #4]
    4252:	8b9b      	ldrh	r3, [r3, #28]
    4254:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
    4256:	89fb      	ldrh	r3, [r7, #14]
    4258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    425c:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
    425e:	89fa      	ldrh	r2, [r7, #14]
    4260:	887b      	ldrh	r3, [r7, #2]
    4262:	4313      	orrs	r3, r2
    4264:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    4266:	687b      	ldr	r3, [r7, #4]
    4268:	89fa      	ldrh	r2, [r7, #14]
    426a:	839a      	strh	r2, [r3, #28]
}
    426c:	bf00      	nop
    426e:	3714      	adds	r7, #20
    4270:	46bd      	mov	sp, r7
    4272:	bc80      	pop	{r7}
    4274:	4770      	bx	lr

00004276 <TIM_ForcedOC4Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    4276:	b480      	push	{r7}
    4278:	b085      	sub	sp, #20
    427a:	af00      	add	r7, sp, #0
    427c:	6078      	str	r0, [r7, #4]
    427e:	460b      	mov	r3, r1
    4280:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    4282:	2300      	movs	r3, #0
    4284:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
    4286:	687b      	ldr	r3, [r7, #4]
    4288:	8b9b      	ldrh	r3, [r3, #28]
    428a:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
    428c:	89fb      	ldrh	r3, [r7, #14]
    428e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    4292:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
    4294:	887b      	ldrh	r3, [r7, #2]
    4296:	021b      	lsls	r3, r3, #8
    4298:	b29a      	uxth	r2, r3
    429a:	89fb      	ldrh	r3, [r7, #14]
    429c:	4313      	orrs	r3, r2
    429e:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    42a0:	687b      	ldr	r3, [r7, #4]
    42a2:	89fa      	ldrh	r2, [r7, #14]
    42a4:	839a      	strh	r2, [r3, #28]
}
    42a6:	bf00      	nop
    42a8:	3714      	adds	r7, #20
    42aa:	46bd      	mov	sp, r7
    42ac:	bc80      	pop	{r7}
    42ae:	4770      	bx	lr

000042b0 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    42b0:	b480      	push	{r7}
    42b2:	b083      	sub	sp, #12
    42b4:	af00      	add	r7, sp, #0
    42b6:	6078      	str	r0, [r7, #4]
    42b8:	460b      	mov	r3, r1
    42ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    42bc:	78fb      	ldrb	r3, [r7, #3]
    42be:	2b00      	cmp	r3, #0
    42c0:	d008      	beq.n	42d4 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
    42c2:	687b      	ldr	r3, [r7, #4]
    42c4:	881b      	ldrh	r3, [r3, #0]
    42c6:	b29b      	uxth	r3, r3
    42c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    42cc:	b29a      	uxth	r2, r3
    42ce:	687b      	ldr	r3, [r7, #4]
    42d0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
  }
}
    42d2:	e007      	b.n	42e4 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
    42d4:	687b      	ldr	r3, [r7, #4]
    42d6:	881b      	ldrh	r3, [r3, #0]
    42d8:	b29b      	uxth	r3, r3
    42da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    42de:	b29a      	uxth	r2, r3
    42e0:	687b      	ldr	r3, [r7, #4]
    42e2:	801a      	strh	r2, [r3, #0]
}
    42e4:	bf00      	nop
    42e6:	370c      	adds	r7, #12
    42e8:	46bd      	mov	sp, r7
    42ea:	bc80      	pop	{r7}
    42ec:	4770      	bx	lr

000042ee <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    42ee:	b480      	push	{r7}
    42f0:	b083      	sub	sp, #12
    42f2:	af00      	add	r7, sp, #0
    42f4:	6078      	str	r0, [r7, #4]
    42f6:	460b      	mov	r3, r1
    42f8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    42fa:	78fb      	ldrb	r3, [r7, #3]
    42fc:	2b00      	cmp	r3, #0
    42fe:	d008      	beq.n	4312 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
    4300:	687b      	ldr	r3, [r7, #4]
    4302:	889b      	ldrh	r3, [r3, #4]
    4304:	b29b      	uxth	r3, r3
    4306:	f043 0304 	orr.w	r3, r3, #4
    430a:	b29a      	uxth	r2, r3
    430c:	687b      	ldr	r3, [r7, #4]
    430e:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
  }
}
    4310:	e007      	b.n	4322 <TIM_SelectCOM+0x34>
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
    4312:	687b      	ldr	r3, [r7, #4]
    4314:	889b      	ldrh	r3, [r3, #4]
    4316:	b29b      	uxth	r3, r3
    4318:	f023 0304 	bic.w	r3, r3, #4
    431c:	b29a      	uxth	r2, r3
    431e:	687b      	ldr	r3, [r7, #4]
    4320:	809a      	strh	r2, [r3, #4]
}
    4322:	bf00      	nop
    4324:	370c      	adds	r7, #12
    4326:	46bd      	mov	sp, r7
    4328:	bc80      	pop	{r7}
    432a:	4770      	bx	lr

0000432c <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    432c:	b480      	push	{r7}
    432e:	b083      	sub	sp, #12
    4330:	af00      	add	r7, sp, #0
    4332:	6078      	str	r0, [r7, #4]
    4334:	460b      	mov	r3, r1
    4336:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4338:	78fb      	ldrb	r3, [r7, #3]
    433a:	2b00      	cmp	r3, #0
    433c:	d008      	beq.n	4350 <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
    433e:	687b      	ldr	r3, [r7, #4]
    4340:	889b      	ldrh	r3, [r3, #4]
    4342:	b29b      	uxth	r3, r3
    4344:	f043 0308 	orr.w	r3, r3, #8
    4348:	b29a      	uxth	r2, r3
    434a:	687b      	ldr	r3, [r7, #4]
    434c:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
  }
}
    434e:	e007      	b.n	4360 <TIM_SelectCCDMA+0x34>
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
    4350:	687b      	ldr	r3, [r7, #4]
    4352:	889b      	ldrh	r3, [r3, #4]
    4354:	b29b      	uxth	r3, r3
    4356:	f023 0308 	bic.w	r3, r3, #8
    435a:	b29a      	uxth	r2, r3
    435c:	687b      	ldr	r3, [r7, #4]
    435e:	809a      	strh	r2, [r3, #4]
}
    4360:	bf00      	nop
    4362:	370c      	adds	r7, #12
    4364:	46bd      	mov	sp, r7
    4366:	bc80      	pop	{r7}
    4368:	4770      	bx	lr

0000436a <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
    436a:	b480      	push	{r7}
    436c:	b083      	sub	sp, #12
    436e:	af00      	add	r7, sp, #0
    4370:	6078      	str	r0, [r7, #4]
    4372:	460b      	mov	r3, r1
    4374:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4376:	78fb      	ldrb	r3, [r7, #3]
    4378:	2b00      	cmp	r3, #0
    437a:	d008      	beq.n	438e <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
    437c:	687b      	ldr	r3, [r7, #4]
    437e:	889b      	ldrh	r3, [r3, #4]
    4380:	b29b      	uxth	r3, r3
    4382:	f043 0301 	orr.w	r3, r3, #1
    4386:	b29a      	uxth	r2, r3
    4388:	687b      	ldr	r3, [r7, #4]
    438a:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
  }
}
    438c:	e007      	b.n	439e <TIM_CCPreloadControl+0x34>
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
    438e:	687b      	ldr	r3, [r7, #4]
    4390:	889b      	ldrh	r3, [r3, #4]
    4392:	b29b      	uxth	r3, r3
    4394:	f023 0301 	bic.w	r3, r3, #1
    4398:	b29a      	uxth	r2, r3
    439a:	687b      	ldr	r3, [r7, #4]
    439c:	809a      	strh	r2, [r3, #4]
}
    439e:	bf00      	nop
    43a0:	370c      	adds	r7, #12
    43a2:	46bd      	mov	sp, r7
    43a4:	bc80      	pop	{r7}
    43a6:	4770      	bx	lr

000043a8 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    43a8:	b480      	push	{r7}
    43aa:	b085      	sub	sp, #20
    43ac:	af00      	add	r7, sp, #0
    43ae:	6078      	str	r0, [r7, #4]
    43b0:	460b      	mov	r3, r1
    43b2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    43b4:	2300      	movs	r3, #0
    43b6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
    43b8:	687b      	ldr	r3, [r7, #4]
    43ba:	8b1b      	ldrh	r3, [r3, #24]
    43bc:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
    43be:	89fb      	ldrh	r3, [r7, #14]
    43c0:	f023 0308 	bic.w	r3, r3, #8
    43c4:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
    43c6:	89fa      	ldrh	r2, [r7, #14]
    43c8:	887b      	ldrh	r3, [r7, #2]
    43ca:	4313      	orrs	r3, r2
    43cc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    43ce:	687b      	ldr	r3, [r7, #4]
    43d0:	89fa      	ldrh	r2, [r7, #14]
    43d2:	831a      	strh	r2, [r3, #24]
}
    43d4:	bf00      	nop
    43d6:	3714      	adds	r7, #20
    43d8:	46bd      	mov	sp, r7
    43da:	bc80      	pop	{r7}
    43dc:	4770      	bx	lr

000043de <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    43de:	b480      	push	{r7}
    43e0:	b085      	sub	sp, #20
    43e2:	af00      	add	r7, sp, #0
    43e4:	6078      	str	r0, [r7, #4]
    43e6:	460b      	mov	r3, r1
    43e8:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    43ea:	2300      	movs	r3, #0
    43ec:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
    43ee:	687b      	ldr	r3, [r7, #4]
    43f0:	8b1b      	ldrh	r3, [r3, #24]
    43f2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
    43f4:	89fb      	ldrh	r3, [r7, #14]
    43f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    43fa:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
    43fc:	887b      	ldrh	r3, [r7, #2]
    43fe:	021b      	lsls	r3, r3, #8
    4400:	b29a      	uxth	r2, r3
    4402:	89fb      	ldrh	r3, [r7, #14]
    4404:	4313      	orrs	r3, r2
    4406:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    4408:	687b      	ldr	r3, [r7, #4]
    440a:	89fa      	ldrh	r2, [r7, #14]
    440c:	831a      	strh	r2, [r3, #24]
}
    440e:	bf00      	nop
    4410:	3714      	adds	r7, #20
    4412:	46bd      	mov	sp, r7
    4414:	bc80      	pop	{r7}
    4416:	4770      	bx	lr

00004418 <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    4418:	b480      	push	{r7}
    441a:	b085      	sub	sp, #20
    441c:	af00      	add	r7, sp, #0
    441e:	6078      	str	r0, [r7, #4]
    4420:	460b      	mov	r3, r1
    4422:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    4424:	2300      	movs	r3, #0
    4426:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
    4428:	687b      	ldr	r3, [r7, #4]
    442a:	8b9b      	ldrh	r3, [r3, #28]
    442c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
    442e:	89fb      	ldrh	r3, [r7, #14]
    4430:	f023 0308 	bic.w	r3, r3, #8
    4434:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
    4436:	89fa      	ldrh	r2, [r7, #14]
    4438:	887b      	ldrh	r3, [r7, #2]
    443a:	4313      	orrs	r3, r2
    443c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    443e:	687b      	ldr	r3, [r7, #4]
    4440:	89fa      	ldrh	r2, [r7, #14]
    4442:	839a      	strh	r2, [r3, #28]
}
    4444:	bf00      	nop
    4446:	3714      	adds	r7, #20
    4448:	46bd      	mov	sp, r7
    444a:	bc80      	pop	{r7}
    444c:	4770      	bx	lr

0000444e <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    444e:	b480      	push	{r7}
    4450:	b085      	sub	sp, #20
    4452:	af00      	add	r7, sp, #0
    4454:	6078      	str	r0, [r7, #4]
    4456:	460b      	mov	r3, r1
    4458:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    445a:	2300      	movs	r3, #0
    445c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
    445e:	687b      	ldr	r3, [r7, #4]
    4460:	8b9b      	ldrh	r3, [r3, #28]
    4462:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
    4464:	89fb      	ldrh	r3, [r7, #14]
    4466:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    446a:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
    446c:	887b      	ldrh	r3, [r7, #2]
    446e:	021b      	lsls	r3, r3, #8
    4470:	b29a      	uxth	r2, r3
    4472:	89fb      	ldrh	r3, [r7, #14]
    4474:	4313      	orrs	r3, r2
    4476:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    4478:	687b      	ldr	r3, [r7, #4]
    447a:	89fa      	ldrh	r2, [r7, #14]
    447c:	839a      	strh	r2, [r3, #28]
}
    447e:	bf00      	nop
    4480:	3714      	adds	r7, #20
    4482:	46bd      	mov	sp, r7
    4484:	bc80      	pop	{r7}
    4486:	4770      	bx	lr

00004488 <TIM_OC1FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    4488:	b480      	push	{r7}
    448a:	b085      	sub	sp, #20
    448c:	af00      	add	r7, sp, #0
    448e:	6078      	str	r0, [r7, #4]
    4490:	460b      	mov	r3, r1
    4492:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    4494:	2300      	movs	r3, #0
    4496:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    4498:	687b      	ldr	r3, [r7, #4]
    449a:	8b1b      	ldrh	r3, [r3, #24]
    449c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
    449e:	89fb      	ldrh	r3, [r7, #14]
    44a0:	f023 0304 	bic.w	r3, r3, #4
    44a4:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
    44a6:	89fa      	ldrh	r2, [r7, #14]
    44a8:	887b      	ldrh	r3, [r7, #2]
    44aa:	4313      	orrs	r3, r2
    44ac:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    44ae:	687b      	ldr	r3, [r7, #4]
    44b0:	89fa      	ldrh	r2, [r7, #14]
    44b2:	831a      	strh	r2, [r3, #24]
}
    44b4:	bf00      	nop
    44b6:	3714      	adds	r7, #20
    44b8:	46bd      	mov	sp, r7
    44ba:	bc80      	pop	{r7}
    44bc:	4770      	bx	lr

000044be <TIM_OC2FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    44be:	b480      	push	{r7}
    44c0:	b085      	sub	sp, #20
    44c2:	af00      	add	r7, sp, #0
    44c4:	6078      	str	r0, [r7, #4]
    44c6:	460b      	mov	r3, r1
    44c8:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    44ca:	2300      	movs	r3, #0
    44cc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    44ce:	687b      	ldr	r3, [r7, #4]
    44d0:	8b1b      	ldrh	r3, [r3, #24]
    44d2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
    44d4:	89fb      	ldrh	r3, [r7, #14]
    44d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    44da:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
    44dc:	887b      	ldrh	r3, [r7, #2]
    44de:	021b      	lsls	r3, r3, #8
    44e0:	b29a      	uxth	r2, r3
    44e2:	89fb      	ldrh	r3, [r7, #14]
    44e4:	4313      	orrs	r3, r2
    44e6:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    44e8:	687b      	ldr	r3, [r7, #4]
    44ea:	89fa      	ldrh	r2, [r7, #14]
    44ec:	831a      	strh	r2, [r3, #24]
}
    44ee:	bf00      	nop
    44f0:	3714      	adds	r7, #20
    44f2:	46bd      	mov	sp, r7
    44f4:	bc80      	pop	{r7}
    44f6:	4770      	bx	lr

000044f8 <TIM_OC3FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    44f8:	b480      	push	{r7}
    44fa:	b085      	sub	sp, #20
    44fc:	af00      	add	r7, sp, #0
    44fe:	6078      	str	r0, [r7, #4]
    4500:	460b      	mov	r3, r1
    4502:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    4504:	2300      	movs	r3, #0
    4506:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
    4508:	687b      	ldr	r3, [r7, #4]
    450a:	8b9b      	ldrh	r3, [r3, #28]
    450c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
    450e:	89fb      	ldrh	r3, [r7, #14]
    4510:	f023 0304 	bic.w	r3, r3, #4
    4514:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
    4516:	89fa      	ldrh	r2, [r7, #14]
    4518:	887b      	ldrh	r3, [r7, #2]
    451a:	4313      	orrs	r3, r2
    451c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
    451e:	687b      	ldr	r3, [r7, #4]
    4520:	89fa      	ldrh	r2, [r7, #14]
    4522:	839a      	strh	r2, [r3, #28]
}
    4524:	bf00      	nop
    4526:	3714      	adds	r7, #20
    4528:	46bd      	mov	sp, r7
    452a:	bc80      	pop	{r7}
    452c:	4770      	bx	lr

0000452e <TIM_OC4FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    452e:	b480      	push	{r7}
    4530:	b085      	sub	sp, #20
    4532:	af00      	add	r7, sp, #0
    4534:	6078      	str	r0, [r7, #4]
    4536:	460b      	mov	r3, r1
    4538:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    453a:	2300      	movs	r3, #0
    453c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
    453e:	687b      	ldr	r3, [r7, #4]
    4540:	8b9b      	ldrh	r3, [r3, #28]
    4542:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
    4544:	89fb      	ldrh	r3, [r7, #14]
    4546:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    454a:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
    454c:	887b      	ldrh	r3, [r7, #2]
    454e:	021b      	lsls	r3, r3, #8
    4550:	b29a      	uxth	r2, r3
    4552:	89fb      	ldrh	r3, [r7, #14]
    4554:	4313      	orrs	r3, r2
    4556:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
    4558:	687b      	ldr	r3, [r7, #4]
    455a:	89fa      	ldrh	r2, [r7, #14]
    455c:	839a      	strh	r2, [r3, #28]
}
    455e:	bf00      	nop
    4560:	3714      	adds	r7, #20
    4562:	46bd      	mov	sp, r7
    4564:	bc80      	pop	{r7}
    4566:	4770      	bx	lr

00004568 <TIM_ClearOC1Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    4568:	b480      	push	{r7}
    456a:	b085      	sub	sp, #20
    456c:	af00      	add	r7, sp, #0
    456e:	6078      	str	r0, [r7, #4]
    4570:	460b      	mov	r3, r1
    4572:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    4574:	2300      	movs	r3, #0
    4576:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
    4578:	687b      	ldr	r3, [r7, #4]
    457a:	8b1b      	ldrh	r3, [r3, #24]
    457c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
    457e:	89fb      	ldrh	r3, [r7, #14]
    4580:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4584:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
    4586:	89fa      	ldrh	r2, [r7, #14]
    4588:	887b      	ldrh	r3, [r7, #2]
    458a:	4313      	orrs	r3, r2
    458c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    458e:	687b      	ldr	r3, [r7, #4]
    4590:	89fa      	ldrh	r2, [r7, #14]
    4592:	831a      	strh	r2, [r3, #24]
}
    4594:	bf00      	nop
    4596:	3714      	adds	r7, #20
    4598:	46bd      	mov	sp, r7
    459a:	bc80      	pop	{r7}
    459c:	4770      	bx	lr

0000459e <TIM_ClearOC2Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    459e:	b480      	push	{r7}
    45a0:	b085      	sub	sp, #20
    45a2:	af00      	add	r7, sp, #0
    45a4:	6078      	str	r0, [r7, #4]
    45a6:	460b      	mov	r3, r1
    45a8:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    45aa:	2300      	movs	r3, #0
    45ac:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
    45ae:	687b      	ldr	r3, [r7, #4]
    45b0:	8b1b      	ldrh	r3, [r3, #24]
    45b2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
    45b4:	89fb      	ldrh	r3, [r7, #14]
    45b6:	f3c3 030e 	ubfx	r3, r3, #0, #15
    45ba:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
    45bc:	887b      	ldrh	r3, [r7, #2]
    45be:	021b      	lsls	r3, r3, #8
    45c0:	b29a      	uxth	r2, r3
    45c2:	89fb      	ldrh	r3, [r7, #14]
    45c4:	4313      	orrs	r3, r2
    45c6:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    45c8:	687b      	ldr	r3, [r7, #4]
    45ca:	89fa      	ldrh	r2, [r7, #14]
    45cc:	831a      	strh	r2, [r3, #24]
}
    45ce:	bf00      	nop
    45d0:	3714      	adds	r7, #20
    45d2:	46bd      	mov	sp, r7
    45d4:	bc80      	pop	{r7}
    45d6:	4770      	bx	lr

000045d8 <TIM_ClearOC3Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    45d8:	b480      	push	{r7}
    45da:	b085      	sub	sp, #20
    45dc:	af00      	add	r7, sp, #0
    45de:	6078      	str	r0, [r7, #4]
    45e0:	460b      	mov	r3, r1
    45e2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    45e4:	2300      	movs	r3, #0
    45e6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
    45e8:	687b      	ldr	r3, [r7, #4]
    45ea:	8b9b      	ldrh	r3, [r3, #28]
    45ec:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
    45ee:	89fb      	ldrh	r3, [r7, #14]
    45f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    45f4:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
    45f6:	89fa      	ldrh	r2, [r7, #14]
    45f8:	887b      	ldrh	r3, [r7, #2]
    45fa:	4313      	orrs	r3, r2
    45fc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    45fe:	687b      	ldr	r3, [r7, #4]
    4600:	89fa      	ldrh	r2, [r7, #14]
    4602:	839a      	strh	r2, [r3, #28]
}
    4604:	bf00      	nop
    4606:	3714      	adds	r7, #20
    4608:	46bd      	mov	sp, r7
    460a:	bc80      	pop	{r7}
    460c:	4770      	bx	lr

0000460e <TIM_ClearOC4Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    460e:	b480      	push	{r7}
    4610:	b085      	sub	sp, #20
    4612:	af00      	add	r7, sp, #0
    4614:	6078      	str	r0, [r7, #4]
    4616:	460b      	mov	r3, r1
    4618:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    461a:	2300      	movs	r3, #0
    461c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
    461e:	687b      	ldr	r3, [r7, #4]
    4620:	8b9b      	ldrh	r3, [r3, #28]
    4622:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
    4624:	89fb      	ldrh	r3, [r7, #14]
    4626:	f3c3 030e 	ubfx	r3, r3, #0, #15
    462a:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
    462c:	887b      	ldrh	r3, [r7, #2]
    462e:	021b      	lsls	r3, r3, #8
    4630:	b29a      	uxth	r2, r3
    4632:	89fb      	ldrh	r3, [r7, #14]
    4634:	4313      	orrs	r3, r2
    4636:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    4638:	687b      	ldr	r3, [r7, #4]
    463a:	89fa      	ldrh	r2, [r7, #14]
    463c:	839a      	strh	r2, [r3, #28]
}
    463e:	bf00      	nop
    4640:	3714      	adds	r7, #20
    4642:	46bd      	mov	sp, r7
    4644:	bc80      	pop	{r7}
    4646:	4770      	bx	lr

00004648 <TIM_OC1PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    4648:	b480      	push	{r7}
    464a:	b085      	sub	sp, #20
    464c:	af00      	add	r7, sp, #0
    464e:	6078      	str	r0, [r7, #4]
    4650:	460b      	mov	r3, r1
    4652:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    4654:	2300      	movs	r3, #0
    4656:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    4658:	687b      	ldr	r3, [r7, #4]
    465a:	8c1b      	ldrh	r3, [r3, #32]
    465c:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
    465e:	89fb      	ldrh	r3, [r7, #14]
    4660:	f023 0302 	bic.w	r3, r3, #2
    4664:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
    4666:	89fa      	ldrh	r2, [r7, #14]
    4668:	887b      	ldrh	r3, [r7, #2]
    466a:	4313      	orrs	r3, r2
    466c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    466e:	687b      	ldr	r3, [r7, #4]
    4670:	89fa      	ldrh	r2, [r7, #14]
    4672:	841a      	strh	r2, [r3, #32]
}
    4674:	bf00      	nop
    4676:	3714      	adds	r7, #20
    4678:	46bd      	mov	sp, r7
    467a:	bc80      	pop	{r7}
    467c:	4770      	bx	lr

0000467e <TIM_OC1NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    467e:	b480      	push	{r7}
    4680:	b085      	sub	sp, #20
    4682:	af00      	add	r7, sp, #0
    4684:	6078      	str	r0, [r7, #4]
    4686:	460b      	mov	r3, r1
    4688:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    468a:	2300      	movs	r3, #0
    468c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
    468e:	687b      	ldr	r3, [r7, #4]
    4690:	8c1b      	ldrh	r3, [r3, #32]
    4692:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
    4694:	89fb      	ldrh	r3, [r7, #14]
    4696:	f023 0308 	bic.w	r3, r3, #8
    469a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
    469c:	89fa      	ldrh	r2, [r7, #14]
    469e:	887b      	ldrh	r3, [r7, #2]
    46a0:	4313      	orrs	r3, r2
    46a2:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    46a4:	687b      	ldr	r3, [r7, #4]
    46a6:	89fa      	ldrh	r2, [r7, #14]
    46a8:	841a      	strh	r2, [r3, #32]
}
    46aa:	bf00      	nop
    46ac:	3714      	adds	r7, #20
    46ae:	46bd      	mov	sp, r7
    46b0:	bc80      	pop	{r7}
    46b2:	4770      	bx	lr

000046b4 <TIM_OC2PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    46b4:	b480      	push	{r7}
    46b6:	b085      	sub	sp, #20
    46b8:	af00      	add	r7, sp, #0
    46ba:	6078      	str	r0, [r7, #4]
    46bc:	460b      	mov	r3, r1
    46be:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    46c0:	2300      	movs	r3, #0
    46c2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    46c4:	687b      	ldr	r3, [r7, #4]
    46c6:	8c1b      	ldrh	r3, [r3, #32]
    46c8:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
    46ca:	89fb      	ldrh	r3, [r7, #14]
    46cc:	f023 0320 	bic.w	r3, r3, #32
    46d0:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
    46d2:	887b      	ldrh	r3, [r7, #2]
    46d4:	011b      	lsls	r3, r3, #4
    46d6:	b29a      	uxth	r2, r3
    46d8:	89fb      	ldrh	r3, [r7, #14]
    46da:	4313      	orrs	r3, r2
    46dc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    46de:	687b      	ldr	r3, [r7, #4]
    46e0:	89fa      	ldrh	r2, [r7, #14]
    46e2:	841a      	strh	r2, [r3, #32]
}
    46e4:	bf00      	nop
    46e6:	3714      	adds	r7, #20
    46e8:	46bd      	mov	sp, r7
    46ea:	bc80      	pop	{r7}
    46ec:	4770      	bx	lr

000046ee <TIM_OC2NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    46ee:	b480      	push	{r7}
    46f0:	b085      	sub	sp, #20
    46f2:	af00      	add	r7, sp, #0
    46f4:	6078      	str	r0, [r7, #4]
    46f6:	460b      	mov	r3, r1
    46f8:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    46fa:	2300      	movs	r3, #0
    46fc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
    46fe:	687b      	ldr	r3, [r7, #4]
    4700:	8c1b      	ldrh	r3, [r3, #32]
    4702:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
    4704:	89fb      	ldrh	r3, [r7, #14]
    4706:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    470a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
    470c:	887b      	ldrh	r3, [r7, #2]
    470e:	011b      	lsls	r3, r3, #4
    4710:	b29a      	uxth	r2, r3
    4712:	89fb      	ldrh	r3, [r7, #14]
    4714:	4313      	orrs	r3, r2
    4716:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    4718:	687b      	ldr	r3, [r7, #4]
    471a:	89fa      	ldrh	r2, [r7, #14]
    471c:	841a      	strh	r2, [r3, #32]
}
    471e:	bf00      	nop
    4720:	3714      	adds	r7, #20
    4722:	46bd      	mov	sp, r7
    4724:	bc80      	pop	{r7}
    4726:	4770      	bx	lr

00004728 <TIM_OC3PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    4728:	b480      	push	{r7}
    472a:	b085      	sub	sp, #20
    472c:	af00      	add	r7, sp, #0
    472e:	6078      	str	r0, [r7, #4]
    4730:	460b      	mov	r3, r1
    4732:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    4734:	2300      	movs	r3, #0
    4736:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    4738:	687b      	ldr	r3, [r7, #4]
    473a:	8c1b      	ldrh	r3, [r3, #32]
    473c:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
    473e:	89fb      	ldrh	r3, [r7, #14]
    4740:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    4744:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
    4746:	887b      	ldrh	r3, [r7, #2]
    4748:	021b      	lsls	r3, r3, #8
    474a:	b29a      	uxth	r2, r3
    474c:	89fb      	ldrh	r3, [r7, #14]
    474e:	4313      	orrs	r3, r2
    4750:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    4752:	687b      	ldr	r3, [r7, #4]
    4754:	89fa      	ldrh	r2, [r7, #14]
    4756:	841a      	strh	r2, [r3, #32]
}
    4758:	bf00      	nop
    475a:	3714      	adds	r7, #20
    475c:	46bd      	mov	sp, r7
    475e:	bc80      	pop	{r7}
    4760:	4770      	bx	lr

00004762 <TIM_OC3NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    4762:	b480      	push	{r7}
    4764:	b085      	sub	sp, #20
    4766:	af00      	add	r7, sp, #0
    4768:	6078      	str	r0, [r7, #4]
    476a:	460b      	mov	r3, r1
    476c:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    476e:	2300      	movs	r3, #0
    4770:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
    4772:	687b      	ldr	r3, [r7, #4]
    4774:	8c1b      	ldrh	r3, [r3, #32]
    4776:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
    4778:	89fb      	ldrh	r3, [r7, #14]
    477a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    477e:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
    4780:	887b      	ldrh	r3, [r7, #2]
    4782:	021b      	lsls	r3, r3, #8
    4784:	b29a      	uxth	r2, r3
    4786:	89fb      	ldrh	r3, [r7, #14]
    4788:	4313      	orrs	r3, r2
    478a:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    478c:	687b      	ldr	r3, [r7, #4]
    478e:	89fa      	ldrh	r2, [r7, #14]
    4790:	841a      	strh	r2, [r3, #32]
}
    4792:	bf00      	nop
    4794:	3714      	adds	r7, #20
    4796:	46bd      	mov	sp, r7
    4798:	bc80      	pop	{r7}
    479a:	4770      	bx	lr

0000479c <TIM_OC4PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    479c:	b480      	push	{r7}
    479e:	b085      	sub	sp, #20
    47a0:	af00      	add	r7, sp, #0
    47a2:	6078      	str	r0, [r7, #4]
    47a4:	460b      	mov	r3, r1
    47a6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    47a8:	2300      	movs	r3, #0
    47aa:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    47ac:	687b      	ldr	r3, [r7, #4]
    47ae:	8c1b      	ldrh	r3, [r3, #32]
    47b0:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
    47b2:	89fb      	ldrh	r3, [r7, #14]
    47b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    47b8:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
    47ba:	887b      	ldrh	r3, [r7, #2]
    47bc:	031b      	lsls	r3, r3, #12
    47be:	b29a      	uxth	r2, r3
    47c0:	89fb      	ldrh	r3, [r7, #14]
    47c2:	4313      	orrs	r3, r2
    47c4:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    47c6:	687b      	ldr	r3, [r7, #4]
    47c8:	89fa      	ldrh	r2, [r7, #14]
    47ca:	841a      	strh	r2, [r3, #32]
}
    47cc:	bf00      	nop
    47ce:	3714      	adds	r7, #20
    47d0:	46bd      	mov	sp, r7
    47d2:	bc80      	pop	{r7}
    47d4:	4770      	bx	lr

000047d6 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
    47d6:	b480      	push	{r7}
    47d8:	b085      	sub	sp, #20
    47da:	af00      	add	r7, sp, #0
    47dc:	6078      	str	r0, [r7, #4]
    47de:	460b      	mov	r3, r1
    47e0:	807b      	strh	r3, [r7, #2]
    47e2:	4613      	mov	r3, r2
    47e4:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
    47e6:	2300      	movs	r3, #0
    47e8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;
    47ea:	887b      	ldrh	r3, [r7, #2]
    47ec:	2201      	movs	r2, #1
    47ee:	fa02 f303 	lsl.w	r3, r2, r3
    47f2:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
    47f4:	687b      	ldr	r3, [r7, #4]
    47f6:	8c1b      	ldrh	r3, [r3, #32]
    47f8:	b29a      	uxth	r2, r3
    47fa:	89fb      	ldrh	r3, [r7, #14]
    47fc:	43db      	mvns	r3, r3
    47fe:	b29b      	uxth	r3, r3
    4800:	4013      	ands	r3, r2
    4802:	b29a      	uxth	r2, r3
    4804:	687b      	ldr	r3, [r7, #4]
    4806:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
    4808:	687b      	ldr	r3, [r7, #4]
    480a:	8c1b      	ldrh	r3, [r3, #32]
    480c:	b29a      	uxth	r2, r3
    480e:	8839      	ldrh	r1, [r7, #0]
    4810:	887b      	ldrh	r3, [r7, #2]
    4812:	fa01 f303 	lsl.w	r3, r1, r3
    4816:	b29b      	uxth	r3, r3
    4818:	4313      	orrs	r3, r2
    481a:	b29a      	uxth	r2, r3
    481c:	687b      	ldr	r3, [r7, #4]
    481e:	841a      	strh	r2, [r3, #32]
}
    4820:	bf00      	nop
    4822:	3714      	adds	r7, #20
    4824:	46bd      	mov	sp, r7
    4826:	bc80      	pop	{r7}
    4828:	4770      	bx	lr

0000482a <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
    482a:	b480      	push	{r7}
    482c:	b085      	sub	sp, #20
    482e:	af00      	add	r7, sp, #0
    4830:	6078      	str	r0, [r7, #4]
    4832:	460b      	mov	r3, r1
    4834:	807b      	strh	r3, [r7, #2]
    4836:	4613      	mov	r3, r2
    4838:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
    483a:	2300      	movs	r3, #0
    483c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;
    483e:	887b      	ldrh	r3, [r7, #2]
    4840:	2204      	movs	r2, #4
    4842:	fa02 f303 	lsl.w	r3, r2, r3
    4846:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
    4848:	687b      	ldr	r3, [r7, #4]
    484a:	8c1b      	ldrh	r3, [r3, #32]
    484c:	b29a      	uxth	r2, r3
    484e:	89fb      	ldrh	r3, [r7, #14]
    4850:	43db      	mvns	r3, r3
    4852:	b29b      	uxth	r3, r3
    4854:	4013      	ands	r3, r2
    4856:	b29a      	uxth	r2, r3
    4858:	687b      	ldr	r3, [r7, #4]
    485a:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
    485c:	687b      	ldr	r3, [r7, #4]
    485e:	8c1b      	ldrh	r3, [r3, #32]
    4860:	b29a      	uxth	r2, r3
    4862:	8839      	ldrh	r1, [r7, #0]
    4864:	887b      	ldrh	r3, [r7, #2]
    4866:	fa01 f303 	lsl.w	r3, r1, r3
    486a:	b29b      	uxth	r3, r3
    486c:	4313      	orrs	r3, r2
    486e:	b29a      	uxth	r2, r3
    4870:	687b      	ldr	r3, [r7, #4]
    4872:	841a      	strh	r2, [r3, #32]
}
    4874:	bf00      	nop
    4876:	3714      	adds	r7, #20
    4878:	46bd      	mov	sp, r7
    487a:	bc80      	pop	{r7}
    487c:	4770      	bx	lr

0000487e <TIM_SelectOCxM>:
  *     @arg TIM_ForcedAction_Active
  *     @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
    487e:	b480      	push	{r7}
    4880:	b085      	sub	sp, #20
    4882:	af00      	add	r7, sp, #0
    4884:	6078      	str	r0, [r7, #4]
    4886:	460b      	mov	r3, r1
    4888:	807b      	strh	r3, [r7, #2]
    488a:	4613      	mov	r3, r2
    488c:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
    488e:	2300      	movs	r3, #0
    4890:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
    4892:	2300      	movs	r3, #0
    4894:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
    4896:	687b      	ldr	r3, [r7, #4]
    4898:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_Offset;
    489a:	68fb      	ldr	r3, [r7, #12]
    489c:	3318      	adds	r3, #24
    489e:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
    48a0:	887b      	ldrh	r3, [r7, #2]
    48a2:	2201      	movs	r2, #1
    48a4:	fa02 f303 	lsl.w	r3, r2, r3
    48a8:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
    48aa:	687b      	ldr	r3, [r7, #4]
    48ac:	8c1b      	ldrh	r3, [r3, #32]
    48ae:	b29a      	uxth	r2, r3
    48b0:	897b      	ldrh	r3, [r7, #10]
    48b2:	43db      	mvns	r3, r3
    48b4:	b29b      	uxth	r3, r3
    48b6:	4013      	ands	r3, r2
    48b8:	b29a      	uxth	r2, r3
    48ba:	687b      	ldr	r3, [r7, #4]
    48bc:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
    48be:	887b      	ldrh	r3, [r7, #2]
    48c0:	2b00      	cmp	r3, #0
    48c2:	d002      	beq.n	48ca <TIM_SelectOCxM+0x4c>
    48c4:	887b      	ldrh	r3, [r7, #2]
    48c6:	2b08      	cmp	r3, #8
    48c8:	d113      	bne.n	48f2 <TIM_SelectOCxM+0x74>
  {
    tmp += (TIM_Channel>>1);
    48ca:	887b      	ldrh	r3, [r7, #2]
    48cc:	085b      	lsrs	r3, r3, #1
    48ce:	b29b      	uxth	r3, r3
    48d0:	461a      	mov	r2, r3
    48d2:	68fb      	ldr	r3, [r7, #12]
    48d4:	4413      	add	r3, r2
    48d6:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
    48d8:	68fb      	ldr	r3, [r7, #12]
    48da:	681a      	ldr	r2, [r3, #0]
    48dc:	68fb      	ldr	r3, [r7, #12]
    48de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    48e2:	601a      	str	r2, [r3, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
    48e4:	68fb      	ldr	r3, [r7, #12]
    48e6:	6819      	ldr	r1, [r3, #0]
    48e8:	883a      	ldrh	r2, [r7, #0]
    48ea:	68fb      	ldr	r3, [r7, #12]
    48ec:	430a      	orrs	r2, r1
    48ee:	601a      	str	r2, [r3, #0]
    48f0:	e018      	b.n	4924 <TIM_SelectOCxM+0xa6>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
    48f2:	887b      	ldrh	r3, [r7, #2]
    48f4:	3b04      	subs	r3, #4
    48f6:	b29b      	uxth	r3, r3
    48f8:	085b      	lsrs	r3, r3, #1
    48fa:	b29b      	uxth	r3, r3
    48fc:	461a      	mov	r2, r3
    48fe:	68fb      	ldr	r3, [r7, #12]
    4900:	4413      	add	r3, r2
    4902:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
    4904:	68fb      	ldr	r3, [r7, #12]
    4906:	681a      	ldr	r2, [r3, #0]
    4908:	68fb      	ldr	r3, [r7, #12]
    490a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
    490e:	601a      	str	r2, [r3, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
    4910:	68fb      	ldr	r3, [r7, #12]
    4912:	681a      	ldr	r2, [r3, #0]
    4914:	883b      	ldrh	r3, [r7, #0]
    4916:	021b      	lsls	r3, r3, #8
    4918:	b29b      	uxth	r3, r3
    491a:	4619      	mov	r1, r3
    491c:	68fb      	ldr	r3, [r7, #12]
    491e:	430a      	orrs	r2, r1
    4920:	601a      	str	r2, [r3, #0]
  }
}
    4922:	bf00      	nop
    4924:	bf00      	nop
    4926:	3714      	adds	r7, #20
    4928:	46bd      	mov	sp, r7
    492a:	bc80      	pop	{r7}
    492c:	4770      	bx	lr

0000492e <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    492e:	b480      	push	{r7}
    4930:	b083      	sub	sp, #12
    4932:	af00      	add	r7, sp, #0
    4934:	6078      	str	r0, [r7, #4]
    4936:	460b      	mov	r3, r1
    4938:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    493a:	78fb      	ldrb	r3, [r7, #3]
    493c:	2b00      	cmp	r3, #0
    493e:	d008      	beq.n	4952 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
    4940:	687b      	ldr	r3, [r7, #4]
    4942:	881b      	ldrh	r3, [r3, #0]
    4944:	b29b      	uxth	r3, r3
    4946:	f043 0302 	orr.w	r3, r3, #2
    494a:	b29a      	uxth	r2, r3
    494c:	687b      	ldr	r3, [r7, #4]
    494e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
  }
}
    4950:	e007      	b.n	4962 <TIM_UpdateDisableConfig+0x34>
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
    4952:	687b      	ldr	r3, [r7, #4]
    4954:	881b      	ldrh	r3, [r3, #0]
    4956:	b29b      	uxth	r3, r3
    4958:	f023 0302 	bic.w	r3, r3, #2
    495c:	b29a      	uxth	r2, r3
    495e:	687b      	ldr	r3, [r7, #4]
    4960:	801a      	strh	r2, [r3, #0]
}
    4962:	bf00      	nop
    4964:	370c      	adds	r7, #12
    4966:	46bd      	mov	sp, r7
    4968:	bc80      	pop	{r7}
    496a:	4770      	bx	lr

0000496c <TIM_UpdateRequestConfig>:
                                       through the slave mode controller.
  *     @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
    496c:	b480      	push	{r7}
    496e:	b083      	sub	sp, #12
    4970:	af00      	add	r7, sp, #0
    4972:	6078      	str	r0, [r7, #4]
    4974:	460b      	mov	r3, r1
    4976:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
    4978:	887b      	ldrh	r3, [r7, #2]
    497a:	2b00      	cmp	r3, #0
    497c:	d008      	beq.n	4990 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
    497e:	687b      	ldr	r3, [r7, #4]
    4980:	881b      	ldrh	r3, [r3, #0]
    4982:	b29b      	uxth	r3, r3
    4984:	f043 0304 	orr.w	r3, r3, #4
    4988:	b29a      	uxth	r2, r3
    498a:	687b      	ldr	r3, [r7, #4]
    498c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
  }
}
    498e:	e007      	b.n	49a0 <TIM_UpdateRequestConfig+0x34>
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
    4990:	687b      	ldr	r3, [r7, #4]
    4992:	881b      	ldrh	r3, [r3, #0]
    4994:	b29b      	uxth	r3, r3
    4996:	f023 0304 	bic.w	r3, r3, #4
    499a:	b29a      	uxth	r2, r3
    499c:	687b      	ldr	r3, [r7, #4]
    499e:	801a      	strh	r2, [r3, #0]
}
    49a0:	bf00      	nop
    49a2:	370c      	adds	r7, #12
    49a4:	46bd      	mov	sp, r7
    49a6:	bc80      	pop	{r7}
    49a8:	4770      	bx	lr

000049aa <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    49aa:	b480      	push	{r7}
    49ac:	b083      	sub	sp, #12
    49ae:	af00      	add	r7, sp, #0
    49b0:	6078      	str	r0, [r7, #4]
    49b2:	460b      	mov	r3, r1
    49b4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    49b6:	78fb      	ldrb	r3, [r7, #3]
    49b8:	2b00      	cmp	r3, #0
    49ba:	d008      	beq.n	49ce <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
    49bc:	687b      	ldr	r3, [r7, #4]
    49be:	889b      	ldrh	r3, [r3, #4]
    49c0:	b29b      	uxth	r3, r3
    49c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    49c6:	b29a      	uxth	r2, r3
    49c8:	687b      	ldr	r3, [r7, #4]
    49ca:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
  }
}
    49cc:	e007      	b.n	49de <TIM_SelectHallSensor+0x34>
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
    49ce:	687b      	ldr	r3, [r7, #4]
    49d0:	889b      	ldrh	r3, [r3, #4]
    49d2:	b29b      	uxth	r3, r3
    49d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    49d8:	b29a      	uxth	r2, r3
    49da:	687b      	ldr	r3, [r7, #4]
    49dc:	809a      	strh	r2, [r3, #4]
}
    49de:	bf00      	nop
    49e0:	370c      	adds	r7, #12
    49e2:	46bd      	mov	sp, r7
    49e4:	bc80      	pop	{r7}
    49e6:	4770      	bx	lr

000049e8 <TIM_SelectOnePulseMode>:
  *     @arg TIM_OPMode_Single
  *     @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
    49e8:	b480      	push	{r7}
    49ea:	b083      	sub	sp, #12
    49ec:	af00      	add	r7, sp, #0
    49ee:	6078      	str	r0, [r7, #4]
    49f0:	460b      	mov	r3, r1
    49f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
    49f4:	687b      	ldr	r3, [r7, #4]
    49f6:	881b      	ldrh	r3, [r3, #0]
    49f8:	b29b      	uxth	r3, r3
    49fa:	f023 0308 	bic.w	r3, r3, #8
    49fe:	b29a      	uxth	r2, r3
    4a00:	687b      	ldr	r3, [r7, #4]
    4a02:	801a      	strh	r2, [r3, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
    4a04:	687b      	ldr	r3, [r7, #4]
    4a06:	881b      	ldrh	r3, [r3, #0]
    4a08:	b29a      	uxth	r2, r3
    4a0a:	887b      	ldrh	r3, [r7, #2]
    4a0c:	4313      	orrs	r3, r2
    4a0e:	b29a      	uxth	r2, r3
    4a10:	687b      	ldr	r3, [r7, #4]
    4a12:	801a      	strh	r2, [r3, #0]
}
    4a14:	bf00      	nop
    4a16:	370c      	adds	r7, #12
    4a18:	46bd      	mov	sp, r7
    4a1a:	bc80      	pop	{r7}
    4a1c:	4770      	bx	lr

00004a1e <TIM_SelectOutputTrigger>:
  *     @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
    4a1e:	b480      	push	{r7}
    4a20:	b083      	sub	sp, #12
    4a22:	af00      	add	r7, sp, #0
    4a24:	6078      	str	r0, [r7, #4]
    4a26:	460b      	mov	r3, r1
    4a28:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST7_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
    4a2a:	687b      	ldr	r3, [r7, #4]
    4a2c:	889b      	ldrh	r3, [r3, #4]
    4a2e:	b29b      	uxth	r3, r3
    4a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    4a34:	b29a      	uxth	r2, r3
    4a36:	687b      	ldr	r3, [r7, #4]
    4a38:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
    4a3a:	687b      	ldr	r3, [r7, #4]
    4a3c:	889b      	ldrh	r3, [r3, #4]
    4a3e:	b29a      	uxth	r2, r3
    4a40:	887b      	ldrh	r3, [r7, #2]
    4a42:	4313      	orrs	r3, r2
    4a44:	b29a      	uxth	r2, r3
    4a46:	687b      	ldr	r3, [r7, #4]
    4a48:	809a      	strh	r2, [r3, #4]
}
    4a4a:	bf00      	nop
    4a4c:	370c      	adds	r7, #12
    4a4e:	46bd      	mov	sp, r7
    4a50:	bc80      	pop	{r7}
    4a52:	4770      	bx	lr

00004a54 <TIM_SelectSlaveMode>:
  *     @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI.
  *     @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
    4a54:	b480      	push	{r7}
    4a56:	b083      	sub	sp, #12
    4a58:	af00      	add	r7, sp, #0
    4a5a:	6078      	str	r0, [r7, #4]
    4a5c:	460b      	mov	r3, r1
    4a5e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
 /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
    4a60:	687b      	ldr	r3, [r7, #4]
    4a62:	891b      	ldrh	r3, [r3, #8]
    4a64:	b29b      	uxth	r3, r3
    4a66:	f023 0307 	bic.w	r3, r3, #7
    4a6a:	b29a      	uxth	r2, r3
    4a6c:	687b      	ldr	r3, [r7, #4]
    4a6e:	811a      	strh	r2, [r3, #8]
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
    4a70:	687b      	ldr	r3, [r7, #4]
    4a72:	891b      	ldrh	r3, [r3, #8]
    4a74:	b29a      	uxth	r2, r3
    4a76:	887b      	ldrh	r3, [r7, #2]
    4a78:	4313      	orrs	r3, r2
    4a7a:	b29a      	uxth	r2, r3
    4a7c:	687b      	ldr	r3, [r7, #4]
    4a7e:	811a      	strh	r2, [r3, #8]
}
    4a80:	bf00      	nop
    4a82:	370c      	adds	r7, #12
    4a84:	46bd      	mov	sp, r7
    4a86:	bc80      	pop	{r7}
    4a88:	4770      	bx	lr

00004a8a <TIM_SelectMasterSlaveMode>:
  *                                      and its slaves (through TRGO).
  *     @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
    4a8a:	b480      	push	{r7}
    4a8c:	b083      	sub	sp, #12
    4a8e:	af00      	add	r7, sp, #0
    4a90:	6078      	str	r0, [r7, #4]
    4a92:	460b      	mov	r3, r1
    4a94:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
    4a96:	687b      	ldr	r3, [r7, #4]
    4a98:	891b      	ldrh	r3, [r3, #8]
    4a9a:	b29b      	uxth	r3, r3
    4a9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4aa0:	b29a      	uxth	r2, r3
    4aa2:	687b      	ldr	r3, [r7, #4]
    4aa4:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
    4aa6:	687b      	ldr	r3, [r7, #4]
    4aa8:	891b      	ldrh	r3, [r3, #8]
    4aaa:	b29a      	uxth	r2, r3
    4aac:	887b      	ldrh	r3, [r7, #2]
    4aae:	4313      	orrs	r3, r2
    4ab0:	b29a      	uxth	r2, r3
    4ab2:	687b      	ldr	r3, [r7, #4]
    4ab4:	811a      	strh	r2, [r3, #8]
}
    4ab6:	bf00      	nop
    4ab8:	370c      	adds	r7, #12
    4aba:	46bd      	mov	sp, r7
    4abc:	bc80      	pop	{r7}
    4abe:	4770      	bx	lr

00004ac0 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
    4ac0:	b480      	push	{r7}
    4ac2:	b083      	sub	sp, #12
    4ac4:	af00      	add	r7, sp, #0
    4ac6:	6078      	str	r0, [r7, #4]
    4ac8:	460b      	mov	r3, r1
    4aca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
    4acc:	687b      	ldr	r3, [r7, #4]
    4ace:	887a      	ldrh	r2, [r7, #2]
    4ad0:	849a      	strh	r2, [r3, #36]	; 0x24
}
    4ad2:	bf00      	nop
    4ad4:	370c      	adds	r7, #12
    4ad6:	46bd      	mov	sp, r7
    4ad8:	bc80      	pop	{r7}
    4ada:	4770      	bx	lr

00004adc <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
{
    4adc:	b480      	push	{r7}
    4ade:	b083      	sub	sp, #12
    4ae0:	af00      	add	r7, sp, #0
    4ae2:	6078      	str	r0, [r7, #4]
    4ae4:	460b      	mov	r3, r1
    4ae6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
    4ae8:	687b      	ldr	r3, [r7, #4]
    4aea:	887a      	ldrh	r2, [r7, #2]
    4aec:	859a      	strh	r2, [r3, #44]	; 0x2c
}
    4aee:	bf00      	nop
    4af0:	370c      	adds	r7, #12
    4af2:	46bd      	mov	sp, r7
    4af4:	bc80      	pop	{r7}
    4af6:	4770      	bx	lr

00004af8 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
    4af8:	b480      	push	{r7}
    4afa:	b083      	sub	sp, #12
    4afc:	af00      	add	r7, sp, #0
    4afe:	6078      	str	r0, [r7, #4]
    4b00:	460b      	mov	r3, r1
    4b02:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
    4b04:	687b      	ldr	r3, [r7, #4]
    4b06:	887a      	ldrh	r2, [r7, #2]
    4b08:	869a      	strh	r2, [r3, #52]	; 0x34
}
    4b0a:	bf00      	nop
    4b0c:	370c      	adds	r7, #12
    4b0e:	46bd      	mov	sp, r7
    4b10:	bc80      	pop	{r7}
    4b12:	4770      	bx	lr

00004b14 <TIM_SetCompare2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
    4b14:	b480      	push	{r7}
    4b16:	b083      	sub	sp, #12
    4b18:	af00      	add	r7, sp, #0
    4b1a:	6078      	str	r0, [r7, #4]
    4b1c:	460b      	mov	r3, r1
    4b1e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
    4b20:	687b      	ldr	r3, [r7, #4]
    4b22:	887a      	ldrh	r2, [r7, #2]
    4b24:	871a      	strh	r2, [r3, #56]	; 0x38
}
    4b26:	bf00      	nop
    4b28:	370c      	adds	r7, #12
    4b2a:	46bd      	mov	sp, r7
    4b2c:	bc80      	pop	{r7}
    4b2e:	4770      	bx	lr

00004b30 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
    4b30:	b480      	push	{r7}
    4b32:	b083      	sub	sp, #12
    4b34:	af00      	add	r7, sp, #0
    4b36:	6078      	str	r0, [r7, #4]
    4b38:	460b      	mov	r3, r1
    4b3a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
    4b3c:	687b      	ldr	r3, [r7, #4]
    4b3e:	887a      	ldrh	r2, [r7, #2]
    4b40:	879a      	strh	r2, [r3, #60]	; 0x3c
}
    4b42:	bf00      	nop
    4b44:	370c      	adds	r7, #12
    4b46:	46bd      	mov	sp, r7
    4b48:	bc80      	pop	{r7}
    4b4a:	4770      	bx	lr

00004b4c <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
    4b4c:	b480      	push	{r7}
    4b4e:	b083      	sub	sp, #12
    4b50:	af00      	add	r7, sp, #0
    4b52:	6078      	str	r0, [r7, #4]
    4b54:	460b      	mov	r3, r1
    4b56:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
    4b58:	687b      	ldr	r3, [r7, #4]
    4b5a:	887a      	ldrh	r2, [r7, #2]
    4b5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
    4b60:	bf00      	nop
    4b62:	370c      	adds	r7, #12
    4b64:	46bd      	mov	sp, r7
    4b66:	bc80      	pop	{r7}
    4b68:	4770      	bx	lr

00004b6a <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    4b6a:	b480      	push	{r7}
    4b6c:	b083      	sub	sp, #12
    4b6e:	af00      	add	r7, sp, #0
    4b70:	6078      	str	r0, [r7, #4]
    4b72:	460b      	mov	r3, r1
    4b74:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
    4b76:	687b      	ldr	r3, [r7, #4]
    4b78:	8b1b      	ldrh	r3, [r3, #24]
    4b7a:	b29b      	uxth	r3, r3
    4b7c:	f023 030c 	bic.w	r3, r3, #12
    4b80:	b29a      	uxth	r2, r3
    4b82:	687b      	ldr	r3, [r7, #4]
    4b84:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
    4b86:	687b      	ldr	r3, [r7, #4]
    4b88:	8b1b      	ldrh	r3, [r3, #24]
    4b8a:	b29a      	uxth	r2, r3
    4b8c:	887b      	ldrh	r3, [r7, #2]
    4b8e:	4313      	orrs	r3, r2
    4b90:	b29a      	uxth	r2, r3
    4b92:	687b      	ldr	r3, [r7, #4]
    4b94:	831a      	strh	r2, [r3, #24]
}
    4b96:	bf00      	nop
    4b98:	370c      	adds	r7, #12
    4b9a:	46bd      	mov	sp, r7
    4b9c:	bc80      	pop	{r7}
    4b9e:	4770      	bx	lr

00004ba0 <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    4ba0:	b480      	push	{r7}
    4ba2:	b083      	sub	sp, #12
    4ba4:	af00      	add	r7, sp, #0
    4ba6:	6078      	str	r0, [r7, #4]
    4ba8:	460b      	mov	r3, r1
    4baa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
    4bac:	687b      	ldr	r3, [r7, #4]
    4bae:	8b1b      	ldrh	r3, [r3, #24]
    4bb0:	b29b      	uxth	r3, r3
    4bb2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
    4bb6:	b29a      	uxth	r2, r3
    4bb8:	687b      	ldr	r3, [r7, #4]
    4bba:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
    4bbc:	687b      	ldr	r3, [r7, #4]
    4bbe:	8b1b      	ldrh	r3, [r3, #24]
    4bc0:	b29a      	uxth	r2, r3
    4bc2:	887b      	ldrh	r3, [r7, #2]
    4bc4:	021b      	lsls	r3, r3, #8
    4bc6:	b29b      	uxth	r3, r3
    4bc8:	4313      	orrs	r3, r2
    4bca:	b29a      	uxth	r2, r3
    4bcc:	687b      	ldr	r3, [r7, #4]
    4bce:	831a      	strh	r2, [r3, #24]
}
    4bd0:	bf00      	nop
    4bd2:	370c      	adds	r7, #12
    4bd4:	46bd      	mov	sp, r7
    4bd6:	bc80      	pop	{r7}
    4bd8:	4770      	bx	lr

00004bda <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    4bda:	b480      	push	{r7}
    4bdc:	b083      	sub	sp, #12
    4bde:	af00      	add	r7, sp, #0
    4be0:	6078      	str	r0, [r7, #4]
    4be2:	460b      	mov	r3, r1
    4be4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
    4be6:	687b      	ldr	r3, [r7, #4]
    4be8:	8b9b      	ldrh	r3, [r3, #28]
    4bea:	b29b      	uxth	r3, r3
    4bec:	f023 030c 	bic.w	r3, r3, #12
    4bf0:	b29a      	uxth	r2, r3
    4bf2:	687b      	ldr	r3, [r7, #4]
    4bf4:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
    4bf6:	687b      	ldr	r3, [r7, #4]
    4bf8:	8b9b      	ldrh	r3, [r3, #28]
    4bfa:	b29a      	uxth	r2, r3
    4bfc:	887b      	ldrh	r3, [r7, #2]
    4bfe:	4313      	orrs	r3, r2
    4c00:	b29a      	uxth	r2, r3
    4c02:	687b      	ldr	r3, [r7, #4]
    4c04:	839a      	strh	r2, [r3, #28]
}
    4c06:	bf00      	nop
    4c08:	370c      	adds	r7, #12
    4c0a:	46bd      	mov	sp, r7
    4c0c:	bc80      	pop	{r7}
    4c0e:	4770      	bx	lr

00004c10 <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
    4c10:	b480      	push	{r7}
    4c12:	b083      	sub	sp, #12
    4c14:	af00      	add	r7, sp, #0
    4c16:	6078      	str	r0, [r7, #4]
    4c18:	460b      	mov	r3, r1
    4c1a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
    4c1c:	687b      	ldr	r3, [r7, #4]
    4c1e:	8b9b      	ldrh	r3, [r3, #28]
    4c20:	b29b      	uxth	r3, r3
    4c22:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
    4c26:	b29a      	uxth	r2, r3
    4c28:	687b      	ldr	r3, [r7, #4]
    4c2a:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
    4c2c:	687b      	ldr	r3, [r7, #4]
    4c2e:	8b9b      	ldrh	r3, [r3, #28]
    4c30:	b29a      	uxth	r2, r3
    4c32:	887b      	ldrh	r3, [r7, #2]
    4c34:	021b      	lsls	r3, r3, #8
    4c36:	b29b      	uxth	r3, r3
    4c38:	4313      	orrs	r3, r2
    4c3a:	b29a      	uxth	r2, r3
    4c3c:	687b      	ldr	r3, [r7, #4]
    4c3e:	839a      	strh	r2, [r3, #28]
}
    4c40:	bf00      	nop
    4c42:	370c      	adds	r7, #12
    4c44:	46bd      	mov	sp, r7
    4c46:	bc80      	pop	{r7}
    4c48:	4770      	bx	lr

00004c4a <TIM_SetClockDivision>:
  *     @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *     @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
    4c4a:	b480      	push	{r7}
    4c4c:	b083      	sub	sp, #12
    4c4e:	af00      	add	r7, sp, #0
    4c50:	6078      	str	r0, [r7, #4]
    4c52:	460b      	mov	r3, r1
    4c54:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
    4c56:	687b      	ldr	r3, [r7, #4]
    4c58:	881b      	ldrh	r3, [r3, #0]
    4c5a:	b29b      	uxth	r3, r3
    4c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    4c60:	b29a      	uxth	r2, r3
    4c62:	687b      	ldr	r3, [r7, #4]
    4c64:	801a      	strh	r2, [r3, #0]
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
    4c66:	687b      	ldr	r3, [r7, #4]
    4c68:	881b      	ldrh	r3, [r3, #0]
    4c6a:	b29a      	uxth	r2, r3
    4c6c:	887b      	ldrh	r3, [r7, #2]
    4c6e:	4313      	orrs	r3, r2
    4c70:	b29a      	uxth	r2, r3
    4c72:	687b      	ldr	r3, [r7, #4]
    4c74:	801a      	strh	r2, [r3, #0]
}
    4c76:	bf00      	nop
    4c78:	370c      	adds	r7, #12
    4c7a:	46bd      	mov	sp, r7
    4c7c:	bc80      	pop	{r7}
    4c7e:	4770      	bx	lr

00004c80 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
    4c80:	b480      	push	{r7}
    4c82:	b083      	sub	sp, #12
    4c84:	af00      	add	r7, sp, #0
    4c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
    4c88:	687b      	ldr	r3, [r7, #4]
    4c8a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    4c8c:	b29b      	uxth	r3, r3
}
    4c8e:	4618      	mov	r0, r3
    4c90:	370c      	adds	r7, #12
    4c92:	46bd      	mov	sp, r7
    4c94:	bc80      	pop	{r7}
    4c96:	4770      	bx	lr

00004c98 <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
    4c98:	b480      	push	{r7}
    4c9a:	b083      	sub	sp, #12
    4c9c:	af00      	add	r7, sp, #0
    4c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
    4ca0:	687b      	ldr	r3, [r7, #4]
    4ca2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    4ca4:	b29b      	uxth	r3, r3
}
    4ca6:	4618      	mov	r0, r3
    4ca8:	370c      	adds	r7, #12
    4caa:	46bd      	mov	sp, r7
    4cac:	bc80      	pop	{r7}
    4cae:	4770      	bx	lr

00004cb0 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
    4cb0:	b480      	push	{r7}
    4cb2:	b083      	sub	sp, #12
    4cb4:	af00      	add	r7, sp, #0
    4cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
    4cb8:	687b      	ldr	r3, [r7, #4]
    4cba:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    4cbc:	b29b      	uxth	r3, r3
}
    4cbe:	4618      	mov	r0, r3
    4cc0:	370c      	adds	r7, #12
    4cc2:	46bd      	mov	sp, r7
    4cc4:	bc80      	pop	{r7}
    4cc6:	4770      	bx	lr

00004cc8 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
    4cc8:	b480      	push	{r7}
    4cca:	b083      	sub	sp, #12
    4ccc:	af00      	add	r7, sp, #0
    4cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
    4cd0:	687b      	ldr	r3, [r7, #4]
    4cd2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
    4cd6:	b29b      	uxth	r3, r3
}
    4cd8:	4618      	mov	r0, r3
    4cda:	370c      	adds	r7, #12
    4cdc:	46bd      	mov	sp, r7
    4cde:	bc80      	pop	{r7}
    4ce0:	4770      	bx	lr

00004ce2 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Counter Register value.
  */
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
    4ce2:	b480      	push	{r7}
    4ce4:	b083      	sub	sp, #12
    4ce6:	af00      	add	r7, sp, #0
    4ce8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Counter Register value */
  return TIMx->CNT;
    4cea:	687b      	ldr	r3, [r7, #4]
    4cec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    4cee:	b29b      	uxth	r3, r3
}
    4cf0:	4618      	mov	r0, r3
    4cf2:	370c      	adds	r7, #12
    4cf4:	46bd      	mov	sp, r7
    4cf6:	bc80      	pop	{r7}
    4cf8:	4770      	bx	lr

00004cfa <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
    4cfa:	b480      	push	{r7}
    4cfc:	b083      	sub	sp, #12
    4cfe:	af00      	add	r7, sp, #0
    4d00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Prescaler Register value */
  return TIMx->PSC;
    4d02:	687b      	ldr	r3, [r7, #4]
    4d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4d06:	b29b      	uxth	r3, r3
}
    4d08:	4618      	mov	r0, r3
    4d0a:	370c      	adds	r7, #12
    4d0c:	46bd      	mov	sp, r7
    4d0e:	bc80      	pop	{r7}
    4d10:	4770      	bx	lr

00004d12 <TIM_GetFlagStatus>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
    4d12:	b480      	push	{r7}
    4d14:	b085      	sub	sp, #20
    4d16:	af00      	add	r7, sp, #0
    4d18:	6078      	str	r0, [r7, #4]
    4d1a:	460b      	mov	r3, r1
    4d1c:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
    4d1e:	2300      	movs	r3, #0
    4d20:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
    4d22:	687b      	ldr	r3, [r7, #4]
    4d24:	8a1b      	ldrh	r3, [r3, #16]
    4d26:	b29a      	uxth	r2, r3
    4d28:	887b      	ldrh	r3, [r7, #2]
    4d2a:	4013      	ands	r3, r2
    4d2c:	b29b      	uxth	r3, r3
    4d2e:	2b00      	cmp	r3, #0
    4d30:	d002      	beq.n	4d38 <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    4d32:	2301      	movs	r3, #1
    4d34:	73fb      	strb	r3, [r7, #15]
    4d36:	e001      	b.n	4d3c <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    4d38:	2300      	movs	r3, #0
    4d3a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    4d3c:	7bfb      	ldrb	r3, [r7, #15]
}
    4d3e:	4618      	mov	r0, r3
    4d40:	3714      	adds	r7, #20
    4d42:	46bd      	mov	sp, r7
    4d44:	bc80      	pop	{r7}
    4d46:	4770      	bx	lr

00004d48 <TIM_ClearFlag>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.   
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
    4d48:	b480      	push	{r7}
    4d4a:	b083      	sub	sp, #12
    4d4c:	af00      	add	r7, sp, #0
    4d4e:	6078      	str	r0, [r7, #4]
    4d50:	460b      	mov	r3, r1
    4d52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
    4d54:	887b      	ldrh	r3, [r7, #2]
    4d56:	43db      	mvns	r3, r3
    4d58:	b29a      	uxth	r2, r3
    4d5a:	687b      	ldr	r3, [r7, #4]
    4d5c:	821a      	strh	r2, [r3, #16]
}
    4d5e:	bf00      	nop
    4d60:	370c      	adds	r7, #12
    4d62:	46bd      	mov	sp, r7
    4d64:	bc80      	pop	{r7}
    4d66:	4770      	bx	lr

00004d68 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
    4d68:	b480      	push	{r7}
    4d6a:	b085      	sub	sp, #20
    4d6c:	af00      	add	r7, sp, #0
    4d6e:	6078      	str	r0, [r7, #4]
    4d70:	460b      	mov	r3, r1
    4d72:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
    4d74:	2300      	movs	r3, #0
    4d76:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
    4d78:	2300      	movs	r3, #0
    4d7a:	81bb      	strh	r3, [r7, #12]
    4d7c:	2300      	movs	r3, #0
    4d7e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
    4d80:	687b      	ldr	r3, [r7, #4]
    4d82:	8a1b      	ldrh	r3, [r3, #16]
    4d84:	b29a      	uxth	r2, r3
    4d86:	887b      	ldrh	r3, [r7, #2]
    4d88:	4013      	ands	r3, r2
    4d8a:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
    4d8c:	687b      	ldr	r3, [r7, #4]
    4d8e:	899b      	ldrh	r3, [r3, #12]
    4d90:	b29a      	uxth	r2, r3
    4d92:	887b      	ldrh	r3, [r7, #2]
    4d94:	4013      	ands	r3, r2
    4d96:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
    4d98:	89bb      	ldrh	r3, [r7, #12]
    4d9a:	2b00      	cmp	r3, #0
    4d9c:	d005      	beq.n	4daa <TIM_GetITStatus+0x42>
    4d9e:	897b      	ldrh	r3, [r7, #10]
    4da0:	2b00      	cmp	r3, #0
    4da2:	d002      	beq.n	4daa <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
    4da4:	2301      	movs	r3, #1
    4da6:	73fb      	strb	r3, [r7, #15]
    4da8:	e001      	b.n	4dae <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
    4daa:	2300      	movs	r3, #0
    4dac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    4dae:	7bfb      	ldrb	r3, [r7, #15]
}
    4db0:	4618      	mov	r0, r3
    4db2:	3714      	adds	r7, #20
    4db4:	46bd      	mov	sp, r7
    4db6:	bc80      	pop	{r7}
    4db8:	4770      	bx	lr

00004dba <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
    4dba:	b480      	push	{r7}
    4dbc:	b083      	sub	sp, #12
    4dbe:	af00      	add	r7, sp, #0
    4dc0:	6078      	str	r0, [r7, #4]
    4dc2:	460b      	mov	r3, r1
    4dc4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
    4dc6:	887b      	ldrh	r3, [r7, #2]
    4dc8:	43db      	mvns	r3, r3
    4dca:	b29a      	uxth	r2, r3
    4dcc:	687b      	ldr	r3, [r7, #4]
    4dce:	821a      	strh	r2, [r3, #16]
}
    4dd0:	bf00      	nop
    4dd2:	370c      	adds	r7, #12
    4dd4:	46bd      	mov	sp, r7
    4dd6:	bc80      	pop	{r7}
    4dd8:	4770      	bx	lr

00004dda <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    4dda:	b480      	push	{r7}
    4ddc:	b087      	sub	sp, #28
    4dde:	af00      	add	r7, sp, #0
    4de0:	60f8      	str	r0, [r7, #12]
    4de2:	4608      	mov	r0, r1
    4de4:	4611      	mov	r1, r2
    4de6:	461a      	mov	r2, r3
    4de8:	4603      	mov	r3, r0
    4dea:	817b      	strh	r3, [r7, #10]
    4dec:	460b      	mov	r3, r1
    4dee:	813b      	strh	r3, [r7, #8]
    4df0:	4613      	mov	r3, r2
    4df2:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
    4df4:	2300      	movs	r3, #0
    4df6:	82bb      	strh	r3, [r7, #20]
    4df8:	2300      	movs	r3, #0
    4dfa:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
    4dfc:	68fb      	ldr	r3, [r7, #12]
    4dfe:	8c1b      	ldrh	r3, [r3, #32]
    4e00:	b29b      	uxth	r3, r3
    4e02:	f023 0301 	bic.w	r3, r3, #1
    4e06:	b29a      	uxth	r2, r3
    4e08:	68fb      	ldr	r3, [r7, #12]
    4e0a:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
    4e0c:	68fb      	ldr	r3, [r7, #12]
    4e0e:	8b1b      	ldrh	r3, [r3, #24]
    4e10:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    4e12:	68fb      	ldr	r3, [r7, #12]
    4e14:	8c1b      	ldrh	r3, [r3, #32]
    4e16:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
    4e18:	8abb      	ldrh	r3, [r7, #20]
    4e1a:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
    4e1e:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    4e20:	88fb      	ldrh	r3, [r7, #6]
    4e22:	011b      	lsls	r3, r3, #4
    4e24:	b29a      	uxth	r2, r3
    4e26:	893b      	ldrh	r3, [r7, #8]
    4e28:	4313      	orrs	r3, r2
    4e2a:	b29a      	uxth	r2, r3
    4e2c:	8abb      	ldrh	r3, [r7, #20]
    4e2e:	4313      	orrs	r3, r2
    4e30:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    4e32:	68fb      	ldr	r3, [r7, #12]
    4e34:	4a1c      	ldr	r2, [pc, #112]	; (4ea8 <TI1_Config+0xce>)
    4e36:	4293      	cmp	r3, r2
    4e38:	d013      	beq.n	4e62 <TI1_Config+0x88>
    4e3a:	68fb      	ldr	r3, [r7, #12]
    4e3c:	4a1b      	ldr	r2, [pc, #108]	; (4eac <TI1_Config+0xd2>)
    4e3e:	4293      	cmp	r3, r2
    4e40:	d00f      	beq.n	4e62 <TI1_Config+0x88>
    4e42:	68fb      	ldr	r3, [r7, #12]
    4e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    4e48:	d00b      	beq.n	4e62 <TI1_Config+0x88>
    4e4a:	68fb      	ldr	r3, [r7, #12]
    4e4c:	4a18      	ldr	r2, [pc, #96]	; (4eb0 <TI1_Config+0xd6>)
    4e4e:	4293      	cmp	r3, r2
    4e50:	d007      	beq.n	4e62 <TI1_Config+0x88>
    4e52:	68fb      	ldr	r3, [r7, #12]
    4e54:	4a17      	ldr	r2, [pc, #92]	; (4eb4 <TI1_Config+0xda>)
    4e56:	4293      	cmp	r3, r2
    4e58:	d003      	beq.n	4e62 <TI1_Config+0x88>
     (TIMx == TIM4) ||(TIMx == TIM5))
    4e5a:	68fb      	ldr	r3, [r7, #12]
    4e5c:	4a16      	ldr	r2, [pc, #88]	; (4eb8 <TI1_Config+0xde>)
    4e5e:	4293      	cmp	r3, r2
    4e60:	d10b      	bne.n	4e7a <TI1_Config+0xa0>
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
    4e62:	8afb      	ldrh	r3, [r7, #22]
    4e64:	f023 0302 	bic.w	r3, r3, #2
    4e68:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
    4e6a:	897a      	ldrh	r2, [r7, #10]
    4e6c:	8afb      	ldrh	r3, [r7, #22]
    4e6e:	4313      	orrs	r3, r2
    4e70:	b29b      	uxth	r3, r3
    4e72:	f043 0301 	orr.w	r3, r3, #1
    4e76:	82fb      	strh	r3, [r7, #22]
    4e78:	e00a      	b.n	4e90 <TI1_Config+0xb6>
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
    4e7a:	8afb      	ldrh	r3, [r7, #22]
    4e7c:	f023 030a 	bic.w	r3, r3, #10
    4e80:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
    4e82:	897a      	ldrh	r2, [r7, #10]
    4e84:	8afb      	ldrh	r3, [r7, #22]
    4e86:	4313      	orrs	r3, r2
    4e88:	b29b      	uxth	r3, r3
    4e8a:	f043 0301 	orr.w	r3, r3, #1
    4e8e:	82fb      	strh	r3, [r7, #22]
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
    4e90:	68fb      	ldr	r3, [r7, #12]
    4e92:	8aba      	ldrh	r2, [r7, #20]
    4e94:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
    4e96:	68fb      	ldr	r3, [r7, #12]
    4e98:	8afa      	ldrh	r2, [r7, #22]
    4e9a:	841a      	strh	r2, [r3, #32]
}
    4e9c:	bf00      	nop
    4e9e:	371c      	adds	r7, #28
    4ea0:	46bd      	mov	sp, r7
    4ea2:	bc80      	pop	{r7}
    4ea4:	4770      	bx	lr
    4ea6:	bf00      	nop
    4ea8:	40012c00 	.word	0x40012c00
    4eac:	40013400 	.word	0x40013400
    4eb0:	40000400 	.word	0x40000400
    4eb4:	40000800 	.word	0x40000800
    4eb8:	40000c00 	.word	0x40000c00

00004ebc <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    4ebc:	b480      	push	{r7}
    4ebe:	b087      	sub	sp, #28
    4ec0:	af00      	add	r7, sp, #0
    4ec2:	60f8      	str	r0, [r7, #12]
    4ec4:	4608      	mov	r0, r1
    4ec6:	4611      	mov	r1, r2
    4ec8:	461a      	mov	r2, r3
    4eca:	4603      	mov	r3, r0
    4ecc:	817b      	strh	r3, [r7, #10]
    4ece:	460b      	mov	r3, r1
    4ed0:	813b      	strh	r3, [r7, #8]
    4ed2:	4613      	mov	r3, r2
    4ed4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
    4ed6:	2300      	movs	r3, #0
    4ed8:	82bb      	strh	r3, [r7, #20]
    4eda:	2300      	movs	r3, #0
    4edc:	82fb      	strh	r3, [r7, #22]
    4ede:	2300      	movs	r3, #0
    4ee0:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
    4ee2:	68fb      	ldr	r3, [r7, #12]
    4ee4:	8c1b      	ldrh	r3, [r3, #32]
    4ee6:	b29b      	uxth	r3, r3
    4ee8:	f023 0310 	bic.w	r3, r3, #16
    4eec:	b29a      	uxth	r2, r3
    4eee:	68fb      	ldr	r3, [r7, #12]
    4ef0:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
    4ef2:	68fb      	ldr	r3, [r7, #12]
    4ef4:	8b1b      	ldrh	r3, [r3, #24]
    4ef6:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    4ef8:	68fb      	ldr	r3, [r7, #12]
    4efa:	8c1b      	ldrh	r3, [r3, #32]
    4efc:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
    4efe:	897b      	ldrh	r3, [r7, #10]
    4f00:	011b      	lsls	r3, r3, #4
    4f02:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
    4f04:	8abb      	ldrh	r3, [r7, #20]
    4f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    4f0a:	051b      	lsls	r3, r3, #20
    4f0c:	0d1b      	lsrs	r3, r3, #20
    4f0e:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
    4f10:	88fb      	ldrh	r3, [r7, #6]
    4f12:	031b      	lsls	r3, r3, #12
    4f14:	b29a      	uxth	r2, r3
    4f16:	8abb      	ldrh	r3, [r7, #20]
    4f18:	4313      	orrs	r3, r2
    4f1a:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
    4f1c:	893b      	ldrh	r3, [r7, #8]
    4f1e:	021b      	lsls	r3, r3, #8
    4f20:	b29a      	uxth	r2, r3
    4f22:	8abb      	ldrh	r3, [r7, #20]
    4f24:	4313      	orrs	r3, r2
    4f26:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    4f28:	68fb      	ldr	r3, [r7, #12]
    4f2a:	4a1c      	ldr	r2, [pc, #112]	; (4f9c <TI2_Config+0xe0>)
    4f2c:	4293      	cmp	r3, r2
    4f2e:	d013      	beq.n	4f58 <TI2_Config+0x9c>
    4f30:	68fb      	ldr	r3, [r7, #12]
    4f32:	4a1b      	ldr	r2, [pc, #108]	; (4fa0 <TI2_Config+0xe4>)
    4f34:	4293      	cmp	r3, r2
    4f36:	d00f      	beq.n	4f58 <TI2_Config+0x9c>
    4f38:	68fb      	ldr	r3, [r7, #12]
    4f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    4f3e:	d00b      	beq.n	4f58 <TI2_Config+0x9c>
    4f40:	68fb      	ldr	r3, [r7, #12]
    4f42:	4a18      	ldr	r2, [pc, #96]	; (4fa4 <TI2_Config+0xe8>)
    4f44:	4293      	cmp	r3, r2
    4f46:	d007      	beq.n	4f58 <TI2_Config+0x9c>
    4f48:	68fb      	ldr	r3, [r7, #12]
    4f4a:	4a17      	ldr	r2, [pc, #92]	; (4fa8 <TI2_Config+0xec>)
    4f4c:	4293      	cmp	r3, r2
    4f4e:	d003      	beq.n	4f58 <TI2_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
    4f50:	68fb      	ldr	r3, [r7, #12]
    4f52:	4a16      	ldr	r2, [pc, #88]	; (4fac <TI2_Config+0xf0>)
    4f54:	4293      	cmp	r3, r2
    4f56:	d10b      	bne.n	4f70 <TI2_Config+0xb4>
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
    4f58:	8afb      	ldrh	r3, [r7, #22]
    4f5a:	f023 0320 	bic.w	r3, r3, #32
    4f5e:	82fb      	strh	r3, [r7, #22]
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
    4f60:	8a7a      	ldrh	r2, [r7, #18]
    4f62:	8afb      	ldrh	r3, [r7, #22]
    4f64:	4313      	orrs	r3, r2
    4f66:	b29b      	uxth	r3, r3
    4f68:	f043 0310 	orr.w	r3, r3, #16
    4f6c:	82fb      	strh	r3, [r7, #22]
    4f6e:	e00a      	b.n	4f86 <TI2_Config+0xca>
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
    4f70:	8afb      	ldrh	r3, [r7, #22]
    4f72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
    4f76:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
    4f78:	897a      	ldrh	r2, [r7, #10]
    4f7a:	8afb      	ldrh	r3, [r7, #22]
    4f7c:	4313      	orrs	r3, r2
    4f7e:	b29b      	uxth	r3, r3
    4f80:	f043 0310 	orr.w	r3, r3, #16
    4f84:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
    4f86:	68fb      	ldr	r3, [r7, #12]
    4f88:	8aba      	ldrh	r2, [r7, #20]
    4f8a:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
    4f8c:	68fb      	ldr	r3, [r7, #12]
    4f8e:	8afa      	ldrh	r2, [r7, #22]
    4f90:	841a      	strh	r2, [r3, #32]
}
    4f92:	bf00      	nop
    4f94:	371c      	adds	r7, #28
    4f96:	46bd      	mov	sp, r7
    4f98:	bc80      	pop	{r7}
    4f9a:	4770      	bx	lr
    4f9c:	40012c00 	.word	0x40012c00
    4fa0:	40013400 	.word	0x40013400
    4fa4:	40000400 	.word	0x40000400
    4fa8:	40000800 	.word	0x40000800
    4fac:	40000c00 	.word	0x40000c00

00004fb0 <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    4fb0:	b480      	push	{r7}
    4fb2:	b087      	sub	sp, #28
    4fb4:	af00      	add	r7, sp, #0
    4fb6:	60f8      	str	r0, [r7, #12]
    4fb8:	4608      	mov	r0, r1
    4fba:	4611      	mov	r1, r2
    4fbc:	461a      	mov	r2, r3
    4fbe:	4603      	mov	r3, r0
    4fc0:	817b      	strh	r3, [r7, #10]
    4fc2:	460b      	mov	r3, r1
    4fc4:	813b      	strh	r3, [r7, #8]
    4fc6:	4613      	mov	r3, r2
    4fc8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
    4fca:	2300      	movs	r3, #0
    4fcc:	82bb      	strh	r3, [r7, #20]
    4fce:	2300      	movs	r3, #0
    4fd0:	82fb      	strh	r3, [r7, #22]
    4fd2:	2300      	movs	r3, #0
    4fd4:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
    4fd6:	68fb      	ldr	r3, [r7, #12]
    4fd8:	8c1b      	ldrh	r3, [r3, #32]
    4fda:	b29b      	uxth	r3, r3
    4fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    4fe0:	b29a      	uxth	r2, r3
    4fe2:	68fb      	ldr	r3, [r7, #12]
    4fe4:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
    4fe6:	68fb      	ldr	r3, [r7, #12]
    4fe8:	8b9b      	ldrh	r3, [r3, #28]
    4fea:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    4fec:	68fb      	ldr	r3, [r7, #12]
    4fee:	8c1b      	ldrh	r3, [r3, #32]
    4ff0:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
    4ff2:	897b      	ldrh	r3, [r7, #10]
    4ff4:	021b      	lsls	r3, r3, #8
    4ff6:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
    4ff8:	8abb      	ldrh	r3, [r7, #20]
    4ffa:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
    4ffe:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    5000:	88fb      	ldrh	r3, [r7, #6]
    5002:	011b      	lsls	r3, r3, #4
    5004:	b29a      	uxth	r2, r3
    5006:	893b      	ldrh	r3, [r7, #8]
    5008:	4313      	orrs	r3, r2
    500a:	b29a      	uxth	r2, r3
    500c:	8abb      	ldrh	r3, [r7, #20]
    500e:	4313      	orrs	r3, r2
    5010:	82bb      	strh	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    5012:	68fb      	ldr	r3, [r7, #12]
    5014:	4a1c      	ldr	r2, [pc, #112]	; (5088 <TI3_Config+0xd8>)
    5016:	4293      	cmp	r3, r2
    5018:	d013      	beq.n	5042 <TI3_Config+0x92>
    501a:	68fb      	ldr	r3, [r7, #12]
    501c:	4a1b      	ldr	r2, [pc, #108]	; (508c <TI3_Config+0xdc>)
    501e:	4293      	cmp	r3, r2
    5020:	d00f      	beq.n	5042 <TI3_Config+0x92>
    5022:	68fb      	ldr	r3, [r7, #12]
    5024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    5028:	d00b      	beq.n	5042 <TI3_Config+0x92>
    502a:	68fb      	ldr	r3, [r7, #12]
    502c:	4a18      	ldr	r2, [pc, #96]	; (5090 <TI3_Config+0xe0>)
    502e:	4293      	cmp	r3, r2
    5030:	d007      	beq.n	5042 <TI3_Config+0x92>
    5032:	68fb      	ldr	r3, [r7, #12]
    5034:	4a17      	ldr	r2, [pc, #92]	; (5094 <TI3_Config+0xe4>)
    5036:	4293      	cmp	r3, r2
    5038:	d003      	beq.n	5042 <TI3_Config+0x92>
     (TIMx == TIM4) ||(TIMx == TIM5))
    503a:	68fb      	ldr	r3, [r7, #12]
    503c:	4a16      	ldr	r2, [pc, #88]	; (5098 <TI3_Config+0xe8>)
    503e:	4293      	cmp	r3, r2
    5040:	d10b      	bne.n	505a <TI3_Config+0xaa>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
    5042:	8afb      	ldrh	r3, [r7, #22]
    5044:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    5048:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
    504a:	8a7a      	ldrh	r2, [r7, #18]
    504c:	8afb      	ldrh	r3, [r7, #22]
    504e:	4313      	orrs	r3, r2
    5050:	b29b      	uxth	r3, r3
    5052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5056:	82fb      	strh	r3, [r7, #22]
    5058:	e00a      	b.n	5070 <TI3_Config+0xc0>
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
    505a:	8afb      	ldrh	r3, [r7, #22]
    505c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
    5060:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
    5062:	897a      	ldrh	r2, [r7, #10]
    5064:	8afb      	ldrh	r3, [r7, #22]
    5066:	4313      	orrs	r3, r2
    5068:	b29b      	uxth	r3, r3
    506a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    506e:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
    5070:	68fb      	ldr	r3, [r7, #12]
    5072:	8aba      	ldrh	r2, [r7, #20]
    5074:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
    5076:	68fb      	ldr	r3, [r7, #12]
    5078:	8afa      	ldrh	r2, [r7, #22]
    507a:	841a      	strh	r2, [r3, #32]
}
    507c:	bf00      	nop
    507e:	371c      	adds	r7, #28
    5080:	46bd      	mov	sp, r7
    5082:	bc80      	pop	{r7}
    5084:	4770      	bx	lr
    5086:	bf00      	nop
    5088:	40012c00 	.word	0x40012c00
    508c:	40013400 	.word	0x40013400
    5090:	40000400 	.word	0x40000400
    5094:	40000800 	.word	0x40000800
    5098:	40000c00 	.word	0x40000c00

0000509c <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    509c:	b480      	push	{r7}
    509e:	b087      	sub	sp, #28
    50a0:	af00      	add	r7, sp, #0
    50a2:	60f8      	str	r0, [r7, #12]
    50a4:	4608      	mov	r0, r1
    50a6:	4611      	mov	r1, r2
    50a8:	461a      	mov	r2, r3
    50aa:	4603      	mov	r3, r0
    50ac:	817b      	strh	r3, [r7, #10]
    50ae:	460b      	mov	r3, r1
    50b0:	813b      	strh	r3, [r7, #8]
    50b2:	4613      	mov	r3, r2
    50b4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
    50b6:	2300      	movs	r3, #0
    50b8:	82bb      	strh	r3, [r7, #20]
    50ba:	2300      	movs	r3, #0
    50bc:	82fb      	strh	r3, [r7, #22]
    50be:	2300      	movs	r3, #0
    50c0:	827b      	strh	r3, [r7, #18]

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
    50c2:	68fb      	ldr	r3, [r7, #12]
    50c4:	8c1b      	ldrh	r3, [r3, #32]
    50c6:	b29b      	uxth	r3, r3
    50c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    50cc:	b29a      	uxth	r2, r3
    50ce:	68fb      	ldr	r3, [r7, #12]
    50d0:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
    50d2:	68fb      	ldr	r3, [r7, #12]
    50d4:	8b9b      	ldrh	r3, [r3, #28]
    50d6:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    50d8:	68fb      	ldr	r3, [r7, #12]
    50da:	8c1b      	ldrh	r3, [r3, #32]
    50dc:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
    50de:	897b      	ldrh	r3, [r7, #10]
    50e0:	031b      	lsls	r3, r3, #12
    50e2:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
    50e4:	8abb      	ldrh	r3, [r7, #20]
    50e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    50ea:	051b      	lsls	r3, r3, #20
    50ec:	0d1b      	lsrs	r3, r3, #20
    50ee:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
    50f0:	893b      	ldrh	r3, [r7, #8]
    50f2:	021b      	lsls	r3, r3, #8
    50f4:	b29a      	uxth	r2, r3
    50f6:	8abb      	ldrh	r3, [r7, #20]
    50f8:	4313      	orrs	r3, r2
    50fa:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
    50fc:	88fb      	ldrh	r3, [r7, #6]
    50fe:	031b      	lsls	r3, r3, #12
    5100:	b29a      	uxth	r2, r3
    5102:	8abb      	ldrh	r3, [r7, #20]
    5104:	4313      	orrs	r3, r2
    5106:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    5108:	68fb      	ldr	r3, [r7, #12]
    510a:	4a1d      	ldr	r2, [pc, #116]	; (5180 <TI4_Config+0xe4>)
    510c:	4293      	cmp	r3, r2
    510e:	d013      	beq.n	5138 <TI4_Config+0x9c>
    5110:	68fb      	ldr	r3, [r7, #12]
    5112:	4a1c      	ldr	r2, [pc, #112]	; (5184 <TI4_Config+0xe8>)
    5114:	4293      	cmp	r3, r2
    5116:	d00f      	beq.n	5138 <TI4_Config+0x9c>
    5118:	68fb      	ldr	r3, [r7, #12]
    511a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    511e:	d00b      	beq.n	5138 <TI4_Config+0x9c>
    5120:	68fb      	ldr	r3, [r7, #12]
    5122:	4a19      	ldr	r2, [pc, #100]	; (5188 <TI4_Config+0xec>)
    5124:	4293      	cmp	r3, r2
    5126:	d007      	beq.n	5138 <TI4_Config+0x9c>
    5128:	68fb      	ldr	r3, [r7, #12]
    512a:	4a18      	ldr	r2, [pc, #96]	; (518c <TI4_Config+0xf0>)
    512c:	4293      	cmp	r3, r2
    512e:	d003      	beq.n	5138 <TI4_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
    5130:	68fb      	ldr	r3, [r7, #12]
    5132:	4a17      	ldr	r2, [pc, #92]	; (5190 <TI4_Config+0xf4>)
    5134:	4293      	cmp	r3, r2
    5136:	d10b      	bne.n	5150 <TI4_Config+0xb4>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
    5138:	8afb      	ldrh	r3, [r7, #22]
    513a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    513e:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
    5140:	8a7a      	ldrh	r2, [r7, #18]
    5142:	8afb      	ldrh	r3, [r7, #22]
    5144:	4313      	orrs	r3, r2
    5146:	b29b      	uxth	r3, r3
    5148:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    514c:	82fb      	strh	r3, [r7, #22]
    514e:	e00c      	b.n	516a <TI4_Config+0xce>
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
    5150:	8afb      	ldrh	r3, [r7, #22]
    5152:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    5156:	045b      	lsls	r3, r3, #17
    5158:	0c5b      	lsrs	r3, r3, #17
    515a:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
    515c:	897a      	ldrh	r2, [r7, #10]
    515e:	8afb      	ldrh	r3, [r7, #22]
    5160:	4313      	orrs	r3, r2
    5162:	b29b      	uxth	r3, r3
    5164:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    5168:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
    516a:	68fb      	ldr	r3, [r7, #12]
    516c:	8aba      	ldrh	r2, [r7, #20]
    516e:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
    5170:	68fb      	ldr	r3, [r7, #12]
    5172:	8afa      	ldrh	r2, [r7, #22]
    5174:	841a      	strh	r2, [r3, #32]
}
    5176:	bf00      	nop
    5178:	371c      	adds	r7, #28
    517a:	46bd      	mov	sp, r7
    517c:	bc80      	pop	{r7}
    517e:	4770      	bx	lr
    5180:	40012c00 	.word	0x40012c00
    5184:	40013400 	.word	0x40013400
    5188:	40000400 	.word	0x40000400
    518c:	40000800 	.word	0x40000800
    5190:	40000c00 	.word	0x40000c00

00005194 <RTC_ITConfig>:
  * @param  NewState: new state of the specified RTC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_ITConfig(uint16_t RTC_IT, FunctionalState NewState)
{
    5194:	b480      	push	{r7}
    5196:	b083      	sub	sp, #12
    5198:	af00      	add	r7, sp, #0
    519a:	4603      	mov	r3, r0
    519c:	460a      	mov	r2, r1
    519e:	80fb      	strh	r3, [r7, #6]
    51a0:	4613      	mov	r3, r2
    51a2:	717b      	strb	r3, [r7, #5]
  /* Check the parameters */
  assert_param(IS_RTC_IT(RTC_IT));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    51a4:	797b      	ldrb	r3, [r7, #5]
    51a6:	2b00      	cmp	r3, #0
    51a8:	d008      	beq.n	51bc <RTC_ITConfig+0x28>
  {
    RTC->CRH |= RTC_IT;
    51aa:	4b0c      	ldr	r3, [pc, #48]	; (51dc <RTC_ITConfig+0x48>)
    51ac:	881b      	ldrh	r3, [r3, #0]
    51ae:	b29a      	uxth	r2, r3
    51b0:	490a      	ldr	r1, [pc, #40]	; (51dc <RTC_ITConfig+0x48>)
    51b2:	88fb      	ldrh	r3, [r7, #6]
    51b4:	4313      	orrs	r3, r2
    51b6:	b29b      	uxth	r3, r3
    51b8:	800b      	strh	r3, [r1, #0]
  }
  else
  {
    RTC->CRH &= (uint16_t)~RTC_IT;
  }
}
    51ba:	e009      	b.n	51d0 <RTC_ITConfig+0x3c>
    RTC->CRH &= (uint16_t)~RTC_IT;
    51bc:	4b07      	ldr	r3, [pc, #28]	; (51dc <RTC_ITConfig+0x48>)
    51be:	881b      	ldrh	r3, [r3, #0]
    51c0:	b29a      	uxth	r2, r3
    51c2:	88fb      	ldrh	r3, [r7, #6]
    51c4:	43db      	mvns	r3, r3
    51c6:	b29b      	uxth	r3, r3
    51c8:	4904      	ldr	r1, [pc, #16]	; (51dc <RTC_ITConfig+0x48>)
    51ca:	4013      	ands	r3, r2
    51cc:	b29b      	uxth	r3, r3
    51ce:	800b      	strh	r3, [r1, #0]
}
    51d0:	bf00      	nop
    51d2:	370c      	adds	r7, #12
    51d4:	46bd      	mov	sp, r7
    51d6:	bc80      	pop	{r7}
    51d8:	4770      	bx	lr
    51da:	bf00      	nop
    51dc:	40002800 	.word	0x40002800

000051e0 <RTC_EnterConfigMode>:
  * @brief  Enters the RTC configuration mode.
  * @param  None
  * @retval None
  */
void RTC_EnterConfigMode(void)
{
    51e0:	b480      	push	{r7}
    51e2:	af00      	add	r7, sp, #0
  /* Set the CNF flag to enter in the Configuration Mode */
  RTC->CRL |= RTC_CRL_CNF;
    51e4:	4b05      	ldr	r3, [pc, #20]	; (51fc <RTC_EnterConfigMode+0x1c>)
    51e6:	889b      	ldrh	r3, [r3, #4]
    51e8:	b29b      	uxth	r3, r3
    51ea:	4a04      	ldr	r2, [pc, #16]	; (51fc <RTC_EnterConfigMode+0x1c>)
    51ec:	f043 0310 	orr.w	r3, r3, #16
    51f0:	b29b      	uxth	r3, r3
    51f2:	8093      	strh	r3, [r2, #4]
}
    51f4:	bf00      	nop
    51f6:	46bd      	mov	sp, r7
    51f8:	bc80      	pop	{r7}
    51fa:	4770      	bx	lr
    51fc:	40002800 	.word	0x40002800

00005200 <RTC_ExitConfigMode>:
  * @brief  Exits from the RTC configuration mode.
  * @param  None
  * @retval None
  */
void RTC_ExitConfigMode(void)
{
    5200:	b480      	push	{r7}
    5202:	af00      	add	r7, sp, #0
  /* Reset the CNF flag to exit from the Configuration Mode */
  RTC->CRL &= (uint16_t)~((uint16_t)RTC_CRL_CNF); 
    5204:	4b05      	ldr	r3, [pc, #20]	; (521c <RTC_ExitConfigMode+0x1c>)
    5206:	889b      	ldrh	r3, [r3, #4]
    5208:	b29b      	uxth	r3, r3
    520a:	4a04      	ldr	r2, [pc, #16]	; (521c <RTC_ExitConfigMode+0x1c>)
    520c:	f023 0310 	bic.w	r3, r3, #16
    5210:	b29b      	uxth	r3, r3
    5212:	8093      	strh	r3, [r2, #4]
}
    5214:	bf00      	nop
    5216:	46bd      	mov	sp, r7
    5218:	bc80      	pop	{r7}
    521a:	4770      	bx	lr
    521c:	40002800 	.word	0x40002800

00005220 <RTC_GetCounter>:
  * @brief  Gets the RTC counter value.
  * @param  None
  * @retval RTC counter value.
  */
uint32_t RTC_GetCounter(void)
{
    5220:	b480      	push	{r7}
    5222:	b083      	sub	sp, #12
    5224:	af00      	add	r7, sp, #0
  uint16_t tmp = 0;
    5226:	2300      	movs	r3, #0
    5228:	80fb      	strh	r3, [r7, #6]
  tmp = RTC->CNTL;
    522a:	4b07      	ldr	r3, [pc, #28]	; (5248 <RTC_GetCounter+0x28>)
    522c:	8b9b      	ldrh	r3, [r3, #28]
    522e:	80fb      	strh	r3, [r7, #6]
  return (((uint32_t)RTC->CNTH << 16 ) | tmp) ;
    5230:	4b05      	ldr	r3, [pc, #20]	; (5248 <RTC_GetCounter+0x28>)
    5232:	8b1b      	ldrh	r3, [r3, #24]
    5234:	b29b      	uxth	r3, r3
    5236:	041a      	lsls	r2, r3, #16
    5238:	88fb      	ldrh	r3, [r7, #6]
    523a:	4313      	orrs	r3, r2
}
    523c:	4618      	mov	r0, r3
    523e:	370c      	adds	r7, #12
    5240:	46bd      	mov	sp, r7
    5242:	bc80      	pop	{r7}
    5244:	4770      	bx	lr
    5246:	bf00      	nop
    5248:	40002800 	.word	0x40002800

0000524c <RTC_SetCounter>:
  * @brief  Sets the RTC counter value.
  * @param  CounterValue: RTC counter new value.
  * @retval None
  */
void RTC_SetCounter(uint32_t CounterValue)
{ 
    524c:	b580      	push	{r7, lr}
    524e:	b082      	sub	sp, #8
    5250:	af00      	add	r7, sp, #0
    5252:	6078      	str	r0, [r7, #4]
  RTC_EnterConfigMode();
    5254:	f7ff ffc4 	bl	51e0 <RTC_EnterConfigMode>
  /* Set RTC COUNTER MSB word */
  RTC->CNTH = CounterValue >> 16;
    5258:	687b      	ldr	r3, [r7, #4]
    525a:	0c1a      	lsrs	r2, r3, #16
    525c:	4b06      	ldr	r3, [pc, #24]	; (5278 <RTC_SetCounter+0x2c>)
    525e:	b292      	uxth	r2, r2
    5260:	831a      	strh	r2, [r3, #24]
  /* Set RTC COUNTER LSB word */
  RTC->CNTL = (CounterValue & RTC_LSB_MASK);
    5262:	4b05      	ldr	r3, [pc, #20]	; (5278 <RTC_SetCounter+0x2c>)
    5264:	687a      	ldr	r2, [r7, #4]
    5266:	b292      	uxth	r2, r2
    5268:	839a      	strh	r2, [r3, #28]
  RTC_ExitConfigMode();
    526a:	f7ff ffc9 	bl	5200 <RTC_ExitConfigMode>
}
    526e:	bf00      	nop
    5270:	3708      	adds	r7, #8
    5272:	46bd      	mov	sp, r7
    5274:	bd80      	pop	{r7, pc}
    5276:	bf00      	nop
    5278:	40002800 	.word	0x40002800

0000527c <RTC_SetPrescaler>:
  * @brief  Sets the RTC prescaler value.
  * @param  PrescalerValue: RTC prescaler new value.
  * @retval None
  */
void RTC_SetPrescaler(uint32_t PrescalerValue)
{
    527c:	b580      	push	{r7, lr}
    527e:	b082      	sub	sp, #8
    5280:	af00      	add	r7, sp, #0
    5282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_PRESCALER(PrescalerValue));
  
  RTC_EnterConfigMode();
    5284:	f7ff ffac 	bl	51e0 <RTC_EnterConfigMode>
  /* Set RTC PRESCALER MSB word */
  RTC->PRLH = (PrescalerValue & PRLH_MSB_MASK) >> 16;
    5288:	687b      	ldr	r3, [r7, #4]
    528a:	0c1b      	lsrs	r3, r3, #16
    528c:	b29b      	uxth	r3, r3
    528e:	4a07      	ldr	r2, [pc, #28]	; (52ac <RTC_SetPrescaler+0x30>)
    5290:	f003 030f 	and.w	r3, r3, #15
    5294:	b29b      	uxth	r3, r3
    5296:	8113      	strh	r3, [r2, #8]
  /* Set RTC PRESCALER LSB word */
  RTC->PRLL = (PrescalerValue & RTC_LSB_MASK);
    5298:	4b04      	ldr	r3, [pc, #16]	; (52ac <RTC_SetPrescaler+0x30>)
    529a:	687a      	ldr	r2, [r7, #4]
    529c:	b292      	uxth	r2, r2
    529e:	819a      	strh	r2, [r3, #12]
  RTC_ExitConfigMode();
    52a0:	f7ff ffae 	bl	5200 <RTC_ExitConfigMode>
}
    52a4:	bf00      	nop
    52a6:	3708      	adds	r7, #8
    52a8:	46bd      	mov	sp, r7
    52aa:	bd80      	pop	{r7, pc}
    52ac:	40002800 	.word	0x40002800

000052b0 <RTC_SetAlarm>:
  * @brief  Sets the RTC alarm value.
  * @param  AlarmValue: RTC alarm new value.
  * @retval None
  */
void RTC_SetAlarm(uint32_t AlarmValue)
{  
    52b0:	b580      	push	{r7, lr}
    52b2:	b082      	sub	sp, #8
    52b4:	af00      	add	r7, sp, #0
    52b6:	6078      	str	r0, [r7, #4]
  RTC_EnterConfigMode();
    52b8:	f7ff ff92 	bl	51e0 <RTC_EnterConfigMode>
  /* Set the ALARM MSB word */
  RTC->ALRH = AlarmValue >> 16;
    52bc:	687b      	ldr	r3, [r7, #4]
    52be:	0c1a      	lsrs	r2, r3, #16
    52c0:	4b06      	ldr	r3, [pc, #24]	; (52dc <RTC_SetAlarm+0x2c>)
    52c2:	b292      	uxth	r2, r2
    52c4:	841a      	strh	r2, [r3, #32]
  /* Set the ALARM LSB word */
  RTC->ALRL = (AlarmValue & RTC_LSB_MASK);
    52c6:	4b05      	ldr	r3, [pc, #20]	; (52dc <RTC_SetAlarm+0x2c>)
    52c8:	687a      	ldr	r2, [r7, #4]
    52ca:	b292      	uxth	r2, r2
    52cc:	849a      	strh	r2, [r3, #36]	; 0x24
  RTC_ExitConfigMode();
    52ce:	f7ff ff97 	bl	5200 <RTC_ExitConfigMode>
}
    52d2:	bf00      	nop
    52d4:	3708      	adds	r7, #8
    52d6:	46bd      	mov	sp, r7
    52d8:	bd80      	pop	{r7, pc}
    52da:	bf00      	nop
    52dc:	40002800 	.word	0x40002800

000052e0 <RTC_GetDivider>:
  * @brief  Gets the RTC divider value.
  * @param  None
  * @retval RTC Divider value.
  */
uint32_t RTC_GetDivider(void)
{
    52e0:	b480      	push	{r7}
    52e2:	b083      	sub	sp, #12
    52e4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0x00;
    52e6:	2300      	movs	r3, #0
    52e8:	607b      	str	r3, [r7, #4]
  tmp = ((uint32_t)RTC->DIVH & (uint32_t)0x000F) << 16;
    52ea:	4b0a      	ldr	r3, [pc, #40]	; (5314 <RTC_GetDivider+0x34>)
    52ec:	8a1b      	ldrh	r3, [r3, #16]
    52ee:	b29b      	uxth	r3, r3
    52f0:	041b      	lsls	r3, r3, #16
    52f2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    52f6:	607b      	str	r3, [r7, #4]
  tmp |= RTC->DIVL;
    52f8:	4b06      	ldr	r3, [pc, #24]	; (5314 <RTC_GetDivider+0x34>)
    52fa:	8a9b      	ldrh	r3, [r3, #20]
    52fc:	b29b      	uxth	r3, r3
    52fe:	461a      	mov	r2, r3
    5300:	687b      	ldr	r3, [r7, #4]
    5302:	4313      	orrs	r3, r2
    5304:	607b      	str	r3, [r7, #4]
  return tmp;
    5306:	687b      	ldr	r3, [r7, #4]
}
    5308:	4618      	mov	r0, r3
    530a:	370c      	adds	r7, #12
    530c:	46bd      	mov	sp, r7
    530e:	bc80      	pop	{r7}
    5310:	4770      	bx	lr
    5312:	bf00      	nop
    5314:	40002800 	.word	0x40002800

00005318 <RTC_WaitForLastTask>:
  * @note   This function must be called before any write to RTC registers.
  * @param  None
  * @retval None
  */
void RTC_WaitForLastTask(void)
{
    5318:	b480      	push	{r7}
    531a:	af00      	add	r7, sp, #0
  /* Loop until RTOFF flag is set */
  while ((RTC->CRL & RTC_FLAG_RTOFF) == (uint16_t)RESET)
    531c:	bf00      	nop
    531e:	4b06      	ldr	r3, [pc, #24]	; (5338 <RTC_WaitForLastTask+0x20>)
    5320:	889b      	ldrh	r3, [r3, #4]
    5322:	b29b      	uxth	r3, r3
    5324:	f003 0320 	and.w	r3, r3, #32
    5328:	2b00      	cmp	r3, #0
    532a:	d0f8      	beq.n	531e <RTC_WaitForLastTask+0x6>
  {
  }
}
    532c:	bf00      	nop
    532e:	bf00      	nop
    5330:	46bd      	mov	sp, r7
    5332:	bc80      	pop	{r7}
    5334:	4770      	bx	lr
    5336:	bf00      	nop
    5338:	40002800 	.word	0x40002800

0000533c <RTC_WaitForSynchro>:
  *   or an APB clock stop.
  * @param  None
  * @retval None
  */
void RTC_WaitForSynchro(void)
{
    533c:	b480      	push	{r7}
    533e:	af00      	add	r7, sp, #0
  /* Clear RSF flag */
  RTC->CRL &= (uint16_t)~RTC_FLAG_RSF;
    5340:	4b0a      	ldr	r3, [pc, #40]	; (536c <RTC_WaitForSynchro+0x30>)
    5342:	889b      	ldrh	r3, [r3, #4]
    5344:	b29b      	uxth	r3, r3
    5346:	4a09      	ldr	r2, [pc, #36]	; (536c <RTC_WaitForSynchro+0x30>)
    5348:	f023 0308 	bic.w	r3, r3, #8
    534c:	b29b      	uxth	r3, r3
    534e:	8093      	strh	r3, [r2, #4]
  /* Loop until RSF flag is set */
  while ((RTC->CRL & RTC_FLAG_RSF) == (uint16_t)RESET)
    5350:	bf00      	nop
    5352:	4b06      	ldr	r3, [pc, #24]	; (536c <RTC_WaitForSynchro+0x30>)
    5354:	889b      	ldrh	r3, [r3, #4]
    5356:	b29b      	uxth	r3, r3
    5358:	f003 0308 	and.w	r3, r3, #8
    535c:	2b00      	cmp	r3, #0
    535e:	d0f8      	beq.n	5352 <RTC_WaitForSynchro+0x16>
  {
  }
}
    5360:	bf00      	nop
    5362:	bf00      	nop
    5364:	46bd      	mov	sp, r7
    5366:	bc80      	pop	{r7}
    5368:	4770      	bx	lr
    536a:	bf00      	nop
    536c:	40002800 	.word	0x40002800

00005370 <RTC_GetFlagStatus>:
  *     @arg RTC_FLAG_ALR: Alarm flag
  *     @arg RTC_FLAG_SEC: Second flag
  * @retval The new state of RTC_FLAG (SET or RESET).
  */
FlagStatus RTC_GetFlagStatus(uint16_t RTC_FLAG)
{
    5370:	b480      	push	{r7}
    5372:	b085      	sub	sp, #20
    5374:	af00      	add	r7, sp, #0
    5376:	4603      	mov	r3, r0
    5378:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
    537a:	2300      	movs	r3, #0
    537c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG)); 
  
  if ((RTC->CRL & RTC_FLAG) != (uint16_t)RESET)
    537e:	4b09      	ldr	r3, [pc, #36]	; (53a4 <RTC_GetFlagStatus+0x34>)
    5380:	889b      	ldrh	r3, [r3, #4]
    5382:	b29a      	uxth	r2, r3
    5384:	88fb      	ldrh	r3, [r7, #6]
    5386:	4013      	ands	r3, r2
    5388:	b29b      	uxth	r3, r3
    538a:	2b00      	cmp	r3, #0
    538c:	d002      	beq.n	5394 <RTC_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    538e:	2301      	movs	r3, #1
    5390:	73fb      	strb	r3, [r7, #15]
    5392:	e001      	b.n	5398 <RTC_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    5394:	2300      	movs	r3, #0
    5396:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    5398:	7bfb      	ldrb	r3, [r7, #15]
}
    539a:	4618      	mov	r0, r3
    539c:	3714      	adds	r7, #20
    539e:	46bd      	mov	sp, r7
    53a0:	bc80      	pop	{r7}
    53a2:	4770      	bx	lr
    53a4:	40002800 	.word	0x40002800

000053a8 <RTC_ClearFlag>:
  *     @arg RTC_FLAG_ALR: Alarm flag
  *     @arg RTC_FLAG_SEC: Second flag
  * @retval None
  */
void RTC_ClearFlag(uint16_t RTC_FLAG)
{
    53a8:	b480      	push	{r7}
    53aa:	b083      	sub	sp, #12
    53ac:	af00      	add	r7, sp, #0
    53ae:	4603      	mov	r3, r0
    53b0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG)); 
    
  /* Clear the corresponding RTC flag */
  RTC->CRL &= (uint16_t)~RTC_FLAG;
    53b2:	4b07      	ldr	r3, [pc, #28]	; (53d0 <RTC_ClearFlag+0x28>)
    53b4:	889b      	ldrh	r3, [r3, #4]
    53b6:	b29a      	uxth	r2, r3
    53b8:	88fb      	ldrh	r3, [r7, #6]
    53ba:	43db      	mvns	r3, r3
    53bc:	b29b      	uxth	r3, r3
    53be:	4904      	ldr	r1, [pc, #16]	; (53d0 <RTC_ClearFlag+0x28>)
    53c0:	4013      	ands	r3, r2
    53c2:	b29b      	uxth	r3, r3
    53c4:	808b      	strh	r3, [r1, #4]
}
    53c6:	bf00      	nop
    53c8:	370c      	adds	r7, #12
    53ca:	46bd      	mov	sp, r7
    53cc:	bc80      	pop	{r7}
    53ce:	4770      	bx	lr
    53d0:	40002800 	.word	0x40002800

000053d4 <RTC_GetITStatus>:
  *     @arg RTC_IT_ALR: Alarm interrupt
  *     @arg RTC_IT_SEC: Second interrupt
  * @retval The new state of the RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint16_t RTC_IT)
{
    53d4:	b480      	push	{r7}
    53d6:	b085      	sub	sp, #20
    53d8:	af00      	add	r7, sp, #0
    53da:	4603      	mov	r3, r0
    53dc:	80fb      	strh	r3, [r7, #6]
  ITStatus bitstatus = RESET;
    53de:	2300      	movs	r3, #0
    53e0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT)); 
  
  bitstatus = (ITStatus)(RTC->CRL & RTC_IT);
    53e2:	4b0f      	ldr	r3, [pc, #60]	; (5420 <RTC_GetITStatus+0x4c>)
    53e4:	889b      	ldrh	r3, [r3, #4]
    53e6:	b29b      	uxth	r3, r3
    53e8:	b2da      	uxtb	r2, r3
    53ea:	88fb      	ldrh	r3, [r7, #6]
    53ec:	b2db      	uxtb	r3, r3
    53ee:	4013      	ands	r3, r2
    53f0:	73fb      	strb	r3, [r7, #15]
  if (((RTC->CRH & RTC_IT) != (uint16_t)RESET) && (bitstatus != (uint16_t)RESET))
    53f2:	4b0b      	ldr	r3, [pc, #44]	; (5420 <RTC_GetITStatus+0x4c>)
    53f4:	881b      	ldrh	r3, [r3, #0]
    53f6:	b29a      	uxth	r2, r3
    53f8:	88fb      	ldrh	r3, [r7, #6]
    53fa:	4013      	ands	r3, r2
    53fc:	b29b      	uxth	r3, r3
    53fe:	2b00      	cmp	r3, #0
    5400:	d005      	beq.n	540e <RTC_GetITStatus+0x3a>
    5402:	7bfb      	ldrb	r3, [r7, #15]
    5404:	2b00      	cmp	r3, #0
    5406:	d002      	beq.n	540e <RTC_GetITStatus+0x3a>
  {
    bitstatus = SET;
    5408:	2301      	movs	r3, #1
    540a:	73fb      	strb	r3, [r7, #15]
    540c:	e001      	b.n	5412 <RTC_GetITStatus+0x3e>
  }
  else
  {
    bitstatus = RESET;
    540e:	2300      	movs	r3, #0
    5410:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    5412:	7bfb      	ldrb	r3, [r7, #15]
}
    5414:	4618      	mov	r0, r3
    5416:	3714      	adds	r7, #20
    5418:	46bd      	mov	sp, r7
    541a:	bc80      	pop	{r7}
    541c:	4770      	bx	lr
    541e:	bf00      	nop
    5420:	40002800 	.word	0x40002800

00005424 <RTC_ClearITPendingBit>:
  *     @arg RTC_IT_ALR: Alarm interrupt
  *     @arg RTC_IT_SEC: Second interrupt
  * @retval None
  */
void RTC_ClearITPendingBit(uint16_t RTC_IT)
{
    5424:	b480      	push	{r7}
    5426:	b083      	sub	sp, #12
    5428:	af00      	add	r7, sp, #0
    542a:	4603      	mov	r3, r0
    542c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RTC_IT(RTC_IT));  
  
  /* Clear the corresponding RTC pending bit */
  RTC->CRL &= (uint16_t)~RTC_IT;
    542e:	4b07      	ldr	r3, [pc, #28]	; (544c <RTC_ClearITPendingBit+0x28>)
    5430:	889b      	ldrh	r3, [r3, #4]
    5432:	b29a      	uxth	r2, r3
    5434:	88fb      	ldrh	r3, [r7, #6]
    5436:	43db      	mvns	r3, r3
    5438:	b29b      	uxth	r3, r3
    543a:	4904      	ldr	r1, [pc, #16]	; (544c <RTC_ClearITPendingBit+0x28>)
    543c:	4013      	ands	r3, r2
    543e:	b29b      	uxth	r3, r3
    5440:	808b      	strh	r3, [r1, #4]
}
    5442:	bf00      	nop
    5444:	370c      	adds	r7, #12
    5446:	46bd      	mov	sp, r7
    5448:	bc80      	pop	{r7}
    544a:	4770      	bx	lr
    544c:	40002800 	.word	0x40002800

00005450 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
    5450:	b580      	push	{r7, lr}
    5452:	af00      	add	r7, sp, #0
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
    5454:	2101      	movs	r1, #1
    5456:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    545a:	f7fc f9ab 	bl	17b4 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
    545e:	2100      	movs	r1, #0
    5460:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    5464:	f7fc f9a6 	bl	17b4 <RCC_APB1PeriphResetCmd>
}
    5468:	bf00      	nop
    546a:	bd80      	pop	{r7, pc}

0000546c <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that
  *        contains the configuration information for the specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
    546c:	b480      	push	{r7}
    546e:	b085      	sub	sp, #20
    5470:	af00      	add	r7, sp, #0
    5472:	6078      	str	r0, [r7, #4]
    5474:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
    5476:	2300      	movs	r3, #0
    5478:	60fb      	str	r3, [r7, #12]
    547a:	2300      	movs	r3, #0
    547c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_GENERATE_WAVE(DAC_InitStruct->DAC_WaveGeneration));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));
/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
    547e:	4b13      	ldr	r3, [pc, #76]	; (54cc <DAC_Init+0x60>)
    5480:	681b      	ldr	r3, [r3, #0]
    5482:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
    5484:	f640 72fe 	movw	r2, #4094	; 0xffe
    5488:	687b      	ldr	r3, [r7, #4]
    548a:	fa02 f303 	lsl.w	r3, r2, r3
    548e:	43db      	mvns	r3, r3
    5490:	68fa      	ldr	r2, [r7, #12]
    5492:	4013      	ands	r3, r2
    5494:	60fb      	str	r3, [r7, #12]
     mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
    5496:	683b      	ldr	r3, [r7, #0]
    5498:	681a      	ldr	r2, [r3, #0]
    549a:	683b      	ldr	r3, [r7, #0]
    549c:	685b      	ldr	r3, [r3, #4]
    549e:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_OutputBuffer);
    54a0:	683b      	ldr	r3, [r7, #0]
    54a2:	689b      	ldr	r3, [r3, #8]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
    54a4:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_OutputBuffer);
    54a6:	683b      	ldr	r3, [r7, #0]
    54a8:	68db      	ldr	r3, [r3, #12]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
    54aa:	4313      	orrs	r3, r2
    54ac:	60bb      	str	r3, [r7, #8]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
    54ae:	68ba      	ldr	r2, [r7, #8]
    54b0:	687b      	ldr	r3, [r7, #4]
    54b2:	fa02 f303 	lsl.w	r3, r2, r3
    54b6:	68fa      	ldr	r2, [r7, #12]
    54b8:	4313      	orrs	r3, r2
    54ba:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
    54bc:	4a03      	ldr	r2, [pc, #12]	; (54cc <DAC_Init+0x60>)
    54be:	68fb      	ldr	r3, [r7, #12]
    54c0:	6013      	str	r3, [r2, #0]
}
    54c2:	bf00      	nop
    54c4:	3714      	adds	r7, #20
    54c6:	46bd      	mov	sp, r7
    54c8:	bc80      	pop	{r7}
    54ca:	4770      	bx	lr
    54cc:	40007400 	.word	0x40007400

000054d0 <DAC_StructInit>:
  * @param  DAC_InitStruct : pointer to a DAC_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
    54d0:	b480      	push	{r7}
    54d2:	b083      	sub	sp, #12
    54d4:	af00      	add	r7, sp, #0
    54d6:	6078      	str	r0, [r7, #4]
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
    54d8:	687b      	ldr	r3, [r7, #4]
    54da:	2200      	movs	r2, #0
    54dc:	601a      	str	r2, [r3, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
    54de:	687b      	ldr	r3, [r7, #4]
    54e0:	2200      	movs	r2, #0
    54e2:	605a      	str	r2, [r3, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
    54e4:	687b      	ldr	r3, [r7, #4]
    54e6:	2200      	movs	r2, #0
    54e8:	609a      	str	r2, [r3, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
    54ea:	687b      	ldr	r3, [r7, #4]
    54ec:	2200      	movs	r2, #0
    54ee:	60da      	str	r2, [r3, #12]
}
    54f0:	bf00      	nop
    54f2:	370c      	adds	r7, #12
    54f4:	46bd      	mov	sp, r7
    54f6:	bc80      	pop	{r7}
    54f8:	4770      	bx	lr

000054fa <DAC_Cmd>:
  * @param  NewState: new state of the DAC channel. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
    54fa:	b480      	push	{r7}
    54fc:	b083      	sub	sp, #12
    54fe:	af00      	add	r7, sp, #0
    5500:	6078      	str	r0, [r7, #4]
    5502:	460b      	mov	r3, r1
    5504:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    5506:	78fb      	ldrb	r3, [r7, #3]
    5508:	2b00      	cmp	r3, #0
    550a:	d009      	beq.n	5520 <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
    550c:	4b0c      	ldr	r3, [pc, #48]	; (5540 <DAC_Cmd+0x46>)
    550e:	681a      	ldr	r2, [r3, #0]
    5510:	2101      	movs	r1, #1
    5512:	687b      	ldr	r3, [r7, #4]
    5514:	fa01 f303 	lsl.w	r3, r1, r3
    5518:	4909      	ldr	r1, [pc, #36]	; (5540 <DAC_Cmd+0x46>)
    551a:	4313      	orrs	r3, r2
    551c:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= ~(DAC_CR_EN1 << DAC_Channel);
  }
}
    551e:	e009      	b.n	5534 <DAC_Cmd+0x3a>
    DAC->CR &= ~(DAC_CR_EN1 << DAC_Channel);
    5520:	4b07      	ldr	r3, [pc, #28]	; (5540 <DAC_Cmd+0x46>)
    5522:	681a      	ldr	r2, [r3, #0]
    5524:	2101      	movs	r1, #1
    5526:	687b      	ldr	r3, [r7, #4]
    5528:	fa01 f303 	lsl.w	r3, r1, r3
    552c:	43db      	mvns	r3, r3
    552e:	4904      	ldr	r1, [pc, #16]	; (5540 <DAC_Cmd+0x46>)
    5530:	4013      	ands	r3, r2
    5532:	600b      	str	r3, [r1, #0]
}
    5534:	bf00      	nop
    5536:	370c      	adds	r7, #12
    5538:	46bd      	mov	sp, r7
    553a:	bc80      	pop	{r7}
    553c:	4770      	bx	lr
    553e:	bf00      	nop
    5540:	40007400 	.word	0x40007400

00005544 <DAC_DMACmd>:
  * @param  NewState: new state of the selected DAC channel DMA request.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
    5544:	b480      	push	{r7}
    5546:	b083      	sub	sp, #12
    5548:	af00      	add	r7, sp, #0
    554a:	6078      	str	r0, [r7, #4]
    554c:	460b      	mov	r3, r1
    554e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    5550:	78fb      	ldrb	r3, [r7, #3]
    5552:	2b00      	cmp	r3, #0
    5554:	d00a      	beq.n	556c <DAC_DMACmd+0x28>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
    5556:	4b0d      	ldr	r3, [pc, #52]	; (558c <DAC_DMACmd+0x48>)
    5558:	681a      	ldr	r2, [r3, #0]
    555a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    555e:	687b      	ldr	r3, [r7, #4]
    5560:	fa01 f303 	lsl.w	r3, r1, r3
    5564:	4909      	ldr	r1, [pc, #36]	; (558c <DAC_DMACmd+0x48>)
    5566:	4313      	orrs	r3, r2
    5568:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= ~(DAC_CR_DMAEN1 << DAC_Channel);
  }
}
    556a:	e00a      	b.n	5582 <DAC_DMACmd+0x3e>
    DAC->CR &= ~(DAC_CR_DMAEN1 << DAC_Channel);
    556c:	4b07      	ldr	r3, [pc, #28]	; (558c <DAC_DMACmd+0x48>)
    556e:	681a      	ldr	r2, [r3, #0]
    5570:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    5574:	687b      	ldr	r3, [r7, #4]
    5576:	fa01 f303 	lsl.w	r3, r1, r3
    557a:	43db      	mvns	r3, r3
    557c:	4903      	ldr	r1, [pc, #12]	; (558c <DAC_DMACmd+0x48>)
    557e:	4013      	ands	r3, r2
    5580:	600b      	str	r3, [r1, #0]
}
    5582:	bf00      	nop
    5584:	370c      	adds	r7, #12
    5586:	46bd      	mov	sp, r7
    5588:	bc80      	pop	{r7}
    558a:	4770      	bx	lr
    558c:	40007400 	.word	0x40007400

00005590 <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
    5590:	b480      	push	{r7}
    5592:	b083      	sub	sp, #12
    5594:	af00      	add	r7, sp, #0
    5596:	6078      	str	r0, [r7, #4]
    5598:	460b      	mov	r3, r1
    559a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    559c:	78fb      	ldrb	r3, [r7, #3]
    559e:	2b00      	cmp	r3, #0
    55a0:	d00a      	beq.n	55b8 <DAC_SoftwareTriggerCmd+0x28>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
    55a2:	4b0d      	ldr	r3, [pc, #52]	; (55d8 <DAC_SoftwareTriggerCmd+0x48>)
    55a4:	685a      	ldr	r2, [r3, #4]
    55a6:	687b      	ldr	r3, [r7, #4]
    55a8:	091b      	lsrs	r3, r3, #4
    55aa:	2101      	movs	r1, #1
    55ac:	fa01 f303 	lsl.w	r3, r1, r3
    55b0:	4909      	ldr	r1, [pc, #36]	; (55d8 <DAC_SoftwareTriggerCmd+0x48>)
    55b2:	4313      	orrs	r3, r2
    55b4:	604b      	str	r3, [r1, #4]
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
  }
}
    55b6:	e00a      	b.n	55ce <DAC_SoftwareTriggerCmd+0x3e>
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
    55b8:	4b07      	ldr	r3, [pc, #28]	; (55d8 <DAC_SoftwareTriggerCmd+0x48>)
    55ba:	685a      	ldr	r2, [r3, #4]
    55bc:	687b      	ldr	r3, [r7, #4]
    55be:	091b      	lsrs	r3, r3, #4
    55c0:	2101      	movs	r1, #1
    55c2:	fa01 f303 	lsl.w	r3, r1, r3
    55c6:	43db      	mvns	r3, r3
    55c8:	4903      	ldr	r1, [pc, #12]	; (55d8 <DAC_SoftwareTriggerCmd+0x48>)
    55ca:	4013      	ands	r3, r2
    55cc:	604b      	str	r3, [r1, #4]
}
    55ce:	bf00      	nop
    55d0:	370c      	adds	r7, #12
    55d2:	46bd      	mov	sp, r7
    55d4:	bc80      	pop	{r7}
    55d6:	4770      	bx	lr
    55d8:	40007400 	.word	0x40007400

000055dc <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
    55dc:	b480      	push	{r7}
    55de:	b083      	sub	sp, #12
    55e0:	af00      	add	r7, sp, #0
    55e2:	4603      	mov	r3, r0
    55e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    55e6:	79fb      	ldrb	r3, [r7, #7]
    55e8:	2b00      	cmp	r3, #0
    55ea:	d006      	beq.n	55fa <DAC_DualSoftwareTriggerCmd+0x1e>
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET ;
    55ec:	4b08      	ldr	r3, [pc, #32]	; (5610 <DAC_DualSoftwareTriggerCmd+0x34>)
    55ee:	685b      	ldr	r3, [r3, #4]
    55f0:	4a07      	ldr	r2, [pc, #28]	; (5610 <DAC_DualSoftwareTriggerCmd+0x34>)
    55f2:	f043 0303 	orr.w	r3, r3, #3
    55f6:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
  }
}
    55f8:	e005      	b.n	5606 <DAC_DualSoftwareTriggerCmd+0x2a>
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
    55fa:	4b05      	ldr	r3, [pc, #20]	; (5610 <DAC_DualSoftwareTriggerCmd+0x34>)
    55fc:	685b      	ldr	r3, [r3, #4]
    55fe:	4a04      	ldr	r2, [pc, #16]	; (5610 <DAC_DualSoftwareTriggerCmd+0x34>)
    5600:	f023 0303 	bic.w	r3, r3, #3
    5604:	6053      	str	r3, [r2, #4]
}
    5606:	bf00      	nop
    5608:	370c      	adds	r7, #12
    560a:	46bd      	mov	sp, r7
    560c:	bc80      	pop	{r7}
    560e:	4770      	bx	lr
    5610:	40007400 	.word	0x40007400

00005614 <DAC_WaveGenerationCmd>:
  * @param  NewState: new state of the selected DAC channel wave generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
    5614:	b480      	push	{r7}
    5616:	b085      	sub	sp, #20
    5618:	af00      	add	r7, sp, #0
    561a:	60f8      	str	r0, [r7, #12]
    561c:	60b9      	str	r1, [r7, #8]
    561e:	4613      	mov	r3, r2
    5620:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    5622:	79fb      	ldrb	r3, [r7, #7]
    5624:	2b00      	cmp	r3, #0
    5626:	d009      	beq.n	563c <DAC_WaveGenerationCmd+0x28>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
    5628:	4b0c      	ldr	r3, [pc, #48]	; (565c <DAC_WaveGenerationCmd+0x48>)
    562a:	681a      	ldr	r2, [r3, #0]
    562c:	68b9      	ldr	r1, [r7, #8]
    562e:	68fb      	ldr	r3, [r7, #12]
    5630:	fa01 f303 	lsl.w	r3, r1, r3
    5634:	4909      	ldr	r1, [pc, #36]	; (565c <DAC_WaveGenerationCmd+0x48>)
    5636:	4313      	orrs	r3, r2
    5638:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
  }
}
    563a:	e009      	b.n	5650 <DAC_WaveGenerationCmd+0x3c>
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
    563c:	4b07      	ldr	r3, [pc, #28]	; (565c <DAC_WaveGenerationCmd+0x48>)
    563e:	681a      	ldr	r2, [r3, #0]
    5640:	68b9      	ldr	r1, [r7, #8]
    5642:	68fb      	ldr	r3, [r7, #12]
    5644:	fa01 f303 	lsl.w	r3, r1, r3
    5648:	43db      	mvns	r3, r3
    564a:	4904      	ldr	r1, [pc, #16]	; (565c <DAC_WaveGenerationCmd+0x48>)
    564c:	4013      	ands	r3, r2
    564e:	600b      	str	r3, [r1, #0]
}
    5650:	bf00      	nop
    5652:	3714      	adds	r7, #20
    5654:	46bd      	mov	sp, r7
    5656:	bc80      	pop	{r7}
    5658:	4770      	bx	lr
    565a:	bf00      	nop
    565c:	40007400 	.word	0x40007400

00005660 <DAC_SetChannel1Data>:
  *     @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data : Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
    5660:	b480      	push	{r7}
    5662:	b085      	sub	sp, #20
    5664:	af00      	add	r7, sp, #0
    5666:	6078      	str	r0, [r7, #4]
    5668:	460b      	mov	r3, r1
    566a:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
    566c:	2300      	movs	r3, #0
    566e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
    5670:	4b07      	ldr	r3, [pc, #28]	; (5690 <DAC_SetChannel1Data+0x30>)
    5672:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
    5674:	68fa      	ldr	r2, [r7, #12]
    5676:	687b      	ldr	r3, [r7, #4]
    5678:	4413      	add	r3, r2
    567a:	3308      	adds	r3, #8
    567c:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
    567e:	68fb      	ldr	r3, [r7, #12]
    5680:	461a      	mov	r2, r3
    5682:	887b      	ldrh	r3, [r7, #2]
    5684:	6013      	str	r3, [r2, #0]
}
    5686:	bf00      	nop
    5688:	3714      	adds	r7, #20
    568a:	46bd      	mov	sp, r7
    568c:	bc80      	pop	{r7}
    568e:	4770      	bx	lr
    5690:	40007400 	.word	0x40007400

00005694 <DAC_SetChannel2Data>:
  *     @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data : Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
    5694:	b480      	push	{r7}
    5696:	b085      	sub	sp, #20
    5698:	af00      	add	r7, sp, #0
    569a:	6078      	str	r0, [r7, #4]
    569c:	460b      	mov	r3, r1
    569e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
    56a0:	2300      	movs	r3, #0
    56a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
    56a4:	4b07      	ldr	r3, [pc, #28]	; (56c4 <DAC_SetChannel2Data+0x30>)
    56a6:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
    56a8:	68fa      	ldr	r2, [r7, #12]
    56aa:	687b      	ldr	r3, [r7, #4]
    56ac:	4413      	add	r3, r2
    56ae:	3314      	adds	r3, #20
    56b0:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
    56b2:	68fb      	ldr	r3, [r7, #12]
    56b4:	461a      	mov	r2, r3
    56b6:	887b      	ldrh	r3, [r7, #2]
    56b8:	6013      	str	r3, [r2, #0]
}
    56ba:	bf00      	nop
    56bc:	3714      	adds	r7, #20
    56be:	46bd      	mov	sp, r7
    56c0:	bc80      	pop	{r7}
    56c2:	4770      	bx	lr
    56c4:	40007400 	.word	0x40007400

000056c8 <DAC_SetDualChannelData>:
  * @param  Data1: Data for DAC Channel1 to be loaded in the selected data 
  *   holding register.
  * @retval None
  */
void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
{
    56c8:	b480      	push	{r7}
    56ca:	b085      	sub	sp, #20
    56cc:	af00      	add	r7, sp, #0
    56ce:	6078      	str	r0, [r7, #4]
    56d0:	460b      	mov	r3, r1
    56d2:	807b      	strh	r3, [r7, #2]
    56d4:	4613      	mov	r3, r2
    56d6:	803b      	strh	r3, [r7, #0]
  uint32_t data = 0, tmp = 0;
    56d8:	2300      	movs	r3, #0
    56da:	60fb      	str	r3, [r7, #12]
    56dc:	2300      	movs	r3, #0
    56de:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
    56e0:	687b      	ldr	r3, [r7, #4]
    56e2:	2b08      	cmp	r3, #8
    56e4:	d105      	bne.n	56f2 <DAC_SetDualChannelData+0x2a>
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
    56e6:	887b      	ldrh	r3, [r7, #2]
    56e8:	021a      	lsls	r2, r3, #8
    56ea:	883b      	ldrh	r3, [r7, #0]
    56ec:	4313      	orrs	r3, r2
    56ee:	60fb      	str	r3, [r7, #12]
    56f0:	e004      	b.n	56fc <DAC_SetDualChannelData+0x34>
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
    56f2:	887b      	ldrh	r3, [r7, #2]
    56f4:	041a      	lsls	r2, r3, #16
    56f6:	883b      	ldrh	r3, [r7, #0]
    56f8:	4313      	orrs	r3, r2
    56fa:	60fb      	str	r3, [r7, #12]
  }
  
  tmp = (uint32_t)DAC_BASE;
    56fc:	4b07      	ldr	r3, [pc, #28]	; (571c <DAC_SetDualChannelData+0x54>)
    56fe:	60bb      	str	r3, [r7, #8]
  tmp += DHR12RD_OFFSET + DAC_Align;
    5700:	687a      	ldr	r2, [r7, #4]
    5702:	68bb      	ldr	r3, [r7, #8]
    5704:	4413      	add	r3, r2
    5706:	3320      	adds	r3, #32
    5708:	60bb      	str	r3, [r7, #8]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
    570a:	68bb      	ldr	r3, [r7, #8]
    570c:	68fa      	ldr	r2, [r7, #12]
    570e:	601a      	str	r2, [r3, #0]
}
    5710:	bf00      	nop
    5712:	3714      	adds	r7, #20
    5714:	46bd      	mov	sp, r7
    5716:	bc80      	pop	{r7}
    5718:	4770      	bx	lr
    571a:	bf00      	nop
    571c:	40007400 	.word	0x40007400

00005720 <DAC_GetDataOutputValue>:
  *     @arg DAC_Channel_1: DAC Channel1 selected
  *     @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
    5720:	b480      	push	{r7}
    5722:	b085      	sub	sp, #20
    5724:	af00      	add	r7, sp, #0
    5726:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
    5728:	2300      	movs	r3, #0
    572a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
    572c:	4b07      	ldr	r3, [pc, #28]	; (574c <DAC_GetDataOutputValue+0x2c>)
    572e:	60fb      	str	r3, [r7, #12]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
    5730:	687b      	ldr	r3, [r7, #4]
    5732:	089a      	lsrs	r2, r3, #2
    5734:	68fb      	ldr	r3, [r7, #12]
    5736:	4413      	add	r3, r2
    5738:	332c      	adds	r3, #44	; 0x2c
    573a:	60fb      	str	r3, [r7, #12]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
    573c:	68fb      	ldr	r3, [r7, #12]
    573e:	681b      	ldr	r3, [r3, #0]
    5740:	b29b      	uxth	r3, r3
}
    5742:	4618      	mov	r0, r3
    5744:	3714      	adds	r7, #20
    5746:	46bd      	mov	sp, r7
    5748:	bc80      	pop	{r7}
    574a:	4770      	bx	lr
    574c:	40007400 	.word	0x40007400

00005750 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    5750:	b480      	push	{r7}
    5752:	b083      	sub	sp, #12
    5754:	af00      	add	r7, sp, #0
    5756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    5758:	4a05      	ldr	r2, [pc, #20]	; (5770 <NVIC_PriorityGroupConfig+0x20>)
    575a:	687b      	ldr	r3, [r7, #4]
    575c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    5760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    5764:	60d3      	str	r3, [r2, #12]
}
    5766:	bf00      	nop
    5768:	370c      	adds	r7, #12
    576a:	46bd      	mov	sp, r7
    576c:	bc80      	pop	{r7}
    576e:	4770      	bx	lr
    5770:	e000ed00 	.word	0xe000ed00

00005774 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    5774:	b480      	push	{r7}
    5776:	b087      	sub	sp, #28
    5778:	af00      	add	r7, sp, #0
    577a:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    577c:	2300      	movs	r3, #0
    577e:	617b      	str	r3, [r7, #20]
    5780:	2300      	movs	r3, #0
    5782:	613b      	str	r3, [r7, #16]
    5784:	230f      	movs	r3, #15
    5786:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    5788:	687b      	ldr	r3, [r7, #4]
    578a:	78db      	ldrb	r3, [r3, #3]
    578c:	2b00      	cmp	r3, #0
    578e:	d03a      	beq.n	5806 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    5790:	4b27      	ldr	r3, [pc, #156]	; (5830 <NVIC_Init+0xbc>)
    5792:	68db      	ldr	r3, [r3, #12]
    5794:	43db      	mvns	r3, r3
    5796:	0a1b      	lsrs	r3, r3, #8
    5798:	f003 0307 	and.w	r3, r3, #7
    579c:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    579e:	697b      	ldr	r3, [r7, #20]
    57a0:	f1c3 0304 	rsb	r3, r3, #4
    57a4:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    57a6:	68fa      	ldr	r2, [r7, #12]
    57a8:	697b      	ldr	r3, [r7, #20]
    57aa:	fa22 f303 	lsr.w	r3, r2, r3
    57ae:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    57b0:	687b      	ldr	r3, [r7, #4]
    57b2:	785b      	ldrb	r3, [r3, #1]
    57b4:	461a      	mov	r2, r3
    57b6:	693b      	ldr	r3, [r7, #16]
    57b8:	fa02 f303 	lsl.w	r3, r2, r3
    57bc:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    57be:	687b      	ldr	r3, [r7, #4]
    57c0:	789b      	ldrb	r3, [r3, #2]
    57c2:	461a      	mov	r2, r3
    57c4:	68fb      	ldr	r3, [r7, #12]
    57c6:	4013      	ands	r3, r2
    57c8:	697a      	ldr	r2, [r7, #20]
    57ca:	4313      	orrs	r3, r2
    57cc:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    57ce:	697b      	ldr	r3, [r7, #20]
    57d0:	011b      	lsls	r3, r3, #4
    57d2:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    57d4:	4a17      	ldr	r2, [pc, #92]	; (5834 <NVIC_Init+0xc0>)
    57d6:	687b      	ldr	r3, [r7, #4]
    57d8:	781b      	ldrb	r3, [r3, #0]
    57da:	6979      	ldr	r1, [r7, #20]
    57dc:	b2c9      	uxtb	r1, r1
    57de:	4413      	add	r3, r2
    57e0:	460a      	mov	r2, r1
    57e2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    57e6:	687b      	ldr	r3, [r7, #4]
    57e8:	781b      	ldrb	r3, [r3, #0]
    57ea:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    57ee:	4911      	ldr	r1, [pc, #68]	; (5834 <NVIC_Init+0xc0>)
    57f0:	687a      	ldr	r2, [r7, #4]
    57f2:	7812      	ldrb	r2, [r2, #0]
    57f4:	0952      	lsrs	r2, r2, #5
    57f6:	b2d2      	uxtb	r2, r2
    57f8:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    57fa:	2201      	movs	r2, #1
    57fc:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    5800:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    5804:	e00f      	b.n	5826 <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    5806:	687b      	ldr	r3, [r7, #4]
    5808:	781b      	ldrb	r3, [r3, #0]
    580a:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    580e:	4909      	ldr	r1, [pc, #36]	; (5834 <NVIC_Init+0xc0>)
    5810:	687a      	ldr	r2, [r7, #4]
    5812:	7812      	ldrb	r2, [r2, #0]
    5814:	0952      	lsrs	r2, r2, #5
    5816:	b2d2      	uxtb	r2, r2
    5818:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    581a:	2201      	movs	r2, #1
    581c:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    581e:	f100 0320 	add.w	r3, r0, #32
    5822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5826:	bf00      	nop
    5828:	371c      	adds	r7, #28
    582a:	46bd      	mov	sp, r7
    582c:	bc80      	pop	{r7}
    582e:	4770      	bx	lr
    5830:	e000ed00 	.word	0xe000ed00
    5834:	e000e100 	.word	0xe000e100

00005838 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple 
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
    5838:	b480      	push	{r7}
    583a:	b083      	sub	sp, #12
    583c:	af00      	add	r7, sp, #0
    583e:	6078      	str	r0, [r7, #4]
    5840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    5842:	683b      	ldr	r3, [r7, #0]
    5844:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    5848:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    584c:	4904      	ldr	r1, [pc, #16]	; (5860 <NVIC_SetVectorTable+0x28>)
    584e:	687a      	ldr	r2, [r7, #4]
    5850:	4313      	orrs	r3, r2
    5852:	608b      	str	r3, [r1, #8]
}
    5854:	bf00      	nop
    5856:	370c      	adds	r7, #12
    5858:	46bd      	mov	sp, r7
    585a:	bc80      	pop	{r7}
    585c:	4770      	bx	lr
    585e:	bf00      	nop
    5860:	e000ed00 	.word	0xe000ed00

00005864 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    5864:	b480      	push	{r7}
    5866:	b083      	sub	sp, #12
    5868:	af00      	add	r7, sp, #0
    586a:	4603      	mov	r3, r0
    586c:	460a      	mov	r2, r1
    586e:	71fb      	strb	r3, [r7, #7]
    5870:	4613      	mov	r3, r2
    5872:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
    5874:	79bb      	ldrb	r3, [r7, #6]
    5876:	2b00      	cmp	r3, #0
    5878:	d006      	beq.n	5888 <NVIC_SystemLPConfig+0x24>
  {
    SCB->SCR |= LowPowerMode;
    587a:	4b09      	ldr	r3, [pc, #36]	; (58a0 <NVIC_SystemLPConfig+0x3c>)
    587c:	691a      	ldr	r2, [r3, #16]
    587e:	79fb      	ldrb	r3, [r7, #7]
    5880:	4907      	ldr	r1, [pc, #28]	; (58a0 <NVIC_SystemLPConfig+0x3c>)
    5882:	4313      	orrs	r3, r2
    5884:	610b      	str	r3, [r1, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
    5886:	e006      	b.n	5896 <NVIC_SystemLPConfig+0x32>
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    5888:	4b05      	ldr	r3, [pc, #20]	; (58a0 <NVIC_SystemLPConfig+0x3c>)
    588a:	691a      	ldr	r2, [r3, #16]
    588c:	79fb      	ldrb	r3, [r7, #7]
    588e:	43db      	mvns	r3, r3
    5890:	4903      	ldr	r1, [pc, #12]	; (58a0 <NVIC_SystemLPConfig+0x3c>)
    5892:	4013      	ands	r3, r2
    5894:	610b      	str	r3, [r1, #16]
}
    5896:	bf00      	nop
    5898:	370c      	adds	r7, #12
    589a:	46bd      	mov	sp, r7
    589c:	bc80      	pop	{r7}
    589e:	4770      	bx	lr
    58a0:	e000ed00 	.word	0xe000ed00

000058a4 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    58a4:	b480      	push	{r7}
    58a6:	b083      	sub	sp, #12
    58a8:	af00      	add	r7, sp, #0
    58aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    58ac:	687b      	ldr	r3, [r7, #4]
    58ae:	2b04      	cmp	r3, #4
    58b0:	d106      	bne.n	58c0 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    58b2:	4b09      	ldr	r3, [pc, #36]	; (58d8 <SysTick_CLKSourceConfig+0x34>)
    58b4:	681b      	ldr	r3, [r3, #0]
    58b6:	4a08      	ldr	r2, [pc, #32]	; (58d8 <SysTick_CLKSourceConfig+0x34>)
    58b8:	f043 0304 	orr.w	r3, r3, #4
    58bc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
    58be:	e005      	b.n	58cc <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    58c0:	4b05      	ldr	r3, [pc, #20]	; (58d8 <SysTick_CLKSourceConfig+0x34>)
    58c2:	681b      	ldr	r3, [r3, #0]
    58c4:	4a04      	ldr	r2, [pc, #16]	; (58d8 <SysTick_CLKSourceConfig+0x34>)
    58c6:	f023 0304 	bic.w	r3, r3, #4
    58ca:	6013      	str	r3, [r2, #0]
}
    58cc:	bf00      	nop
    58ce:	370c      	adds	r7, #12
    58d0:	46bd      	mov	sp, r7
    58d2:	bc80      	pop	{r7}
    58d4:	4770      	bx	lr
    58d6:	bf00      	nop
    58d8:	e000e010 	.word	0xe000e010

000058dc <busyLoop>:
#define USE_STDPERIPH_DRIVER
#include "stm32_p103.h"
#include "stm32_p103.h"

void busyLoop(uint32_t delay )
{
    58dc:	b480      	push	{r7}
    58de:	b083      	sub	sp, #12
    58e0:	af00      	add	r7, sp, #0
    58e2:	6078      	str	r0, [r7, #4]
  while(delay) delay--;
    58e4:	e002      	b.n	58ec <busyLoop+0x10>
    58e6:	687b      	ldr	r3, [r7, #4]
    58e8:	3b01      	subs	r3, #1
    58ea:	607b      	str	r3, [r7, #4]
    58ec:	687b      	ldr	r3, [r7, #4]
    58ee:	2b00      	cmp	r3, #0
    58f0:	d1f9      	bne.n	58e6 <busyLoop+0xa>
}
    58f2:	bf00      	nop
    58f4:	bf00      	nop
    58f6:	370c      	adds	r7, #12
    58f8:	46bd      	mov	sp, r7
    58fa:	bc80      	pop	{r7}
    58fc:	4770      	bx	lr

000058fe <main>:

int main(void)
{
    58fe:	b580      	push	{r7, lr}
    5900:	af00      	add	r7, sp, #0
    init_led();
    5902:	f7fa fe61 	bl	5c8 <init_led>

    while(1) {
       GPIOC->BRR = 0x00001000;
    5906:	4b07      	ldr	r3, [pc, #28]	; (5924 <main+0x26>)
    5908:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    590c:	615a      	str	r2, [r3, #20]
       busyLoop(500000);
    590e:	4806      	ldr	r0, [pc, #24]	; (5928 <main+0x2a>)
    5910:	f7ff ffe4 	bl	58dc <busyLoop>
       GPIOC->BSRR = 0x00001000;
    5914:	4b03      	ldr	r3, [pc, #12]	; (5924 <main+0x26>)
    5916:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    591a:	611a      	str	r2, [r3, #16]
       busyLoop(500000);
    591c:	4802      	ldr	r0, [pc, #8]	; (5928 <main+0x2a>)
    591e:	f7ff ffdd 	bl	58dc <busyLoop>
       GPIOC->BRR = 0x00001000;
    5922:	e7f0      	b.n	5906 <main+0x8>
    5924:	40011000 	.word	0x40011000
    5928:	0007a120 	.word	0x0007a120

0000592c <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
    592c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
    592e:	e003      	b.n	5938 <LoopCopyDataInit>

00005930 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
    5930:	4b0a      	ldr	r3, [pc, #40]	; (595c <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
    5932:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
    5934:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
    5936:	3104      	adds	r1, #4

00005938 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    5938:	4809      	ldr	r0, [pc, #36]	; (5960 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
    593a:	4b0a      	ldr	r3, [pc, #40]	; (5964 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
    593c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
    593e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
    5940:	d3f6      	bcc.n	5930 <CopyDataInit>
	ldr	r2, =_sbss
    5942:	4a09      	ldr	r2, [pc, #36]	; (5968 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
    5944:	e002      	b.n	594c <LoopFillZerobss>

00005946 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
    5946:	2300      	movs	r3, #0
	str	r3, [r2], #4
    5948:	f842 3b04 	str.w	r3, [r2], #4

0000594c <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
    594c:	4b07      	ldr	r3, [pc, #28]	; (596c <LoopFillZerobss+0x20>)
	cmp	r2, r3
    594e:	429a      	cmp	r2, r3
	bcc	FillZerobss
    5950:	d3f9      	bcc.n	5946 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
    5952:	f7fa fd03 	bl	35c <SystemInit>
/* Call the application's entry point.*/
	bl	main
    5956:	f7ff ffd2 	bl	58fe <main>
	bx	lr    
    595a:	4770      	bx	lr
	ldr	r3, =_sidata
    595c:	00005b71 	.word	0x00005b71
	ldr	r0, =_sdata
    5960:	20000000 	.word	0x20000000
	ldr	r3, =_edata
    5964:	20000028 	.word	0x20000028
	ldr	r2, =_sbss
    5968:	20000028 	.word	0x20000028
	ldr	r3, = _ebss
    596c:	20000028 	.word	0x20000028

00005970 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
    5970:	e7fe      	b.n	5970 <ADC1_2_IRQHandler>
	...

00005974 <memset>:
    5974:	0783      	lsls	r3, r0, #30
    5976:	b530      	push	{r4, r5, lr}
    5978:	d048      	beq.n	5a0c <memset+0x98>
    597a:	1e54      	subs	r4, r2, #1
    597c:	2a00      	cmp	r2, #0
    597e:	d03f      	beq.n	5a00 <memset+0x8c>
    5980:	4603      	mov	r3, r0
    5982:	b2ca      	uxtb	r2, r1
    5984:	e001      	b.n	598a <memset+0x16>
    5986:	3c01      	subs	r4, #1
    5988:	d33a      	bcc.n	5a00 <memset+0x8c>
    598a:	f803 2b01 	strb.w	r2, [r3], #1
    598e:	079d      	lsls	r5, r3, #30
    5990:	d1f9      	bne.n	5986 <memset+0x12>
    5992:	2c03      	cmp	r4, #3
    5994:	d92d      	bls.n	59f2 <memset+0x7e>
    5996:	b2cd      	uxtb	r5, r1
    5998:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    599c:	2c0f      	cmp	r4, #15
    599e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    59a2:	d936      	bls.n	5a12 <memset+0x9e>
    59a4:	f1a4 0210 	sub.w	r2, r4, #16
    59a8:	f022 0c0f 	bic.w	ip, r2, #15
    59ac:	f103 0e20 	add.w	lr, r3, #32
    59b0:	44e6      	add	lr, ip
    59b2:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    59b6:	f103 0210 	add.w	r2, r3, #16
    59ba:	e942 5504 	strd	r5, r5, [r2, #-16]
    59be:	e942 5502 	strd	r5, r5, [r2, #-8]
    59c2:	3210      	adds	r2, #16
    59c4:	4572      	cmp	r2, lr
    59c6:	d1f8      	bne.n	59ba <memset+0x46>
    59c8:	f10c 0201 	add.w	r2, ip, #1
    59cc:	f014 0f0c 	tst.w	r4, #12
    59d0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    59d4:	f004 0c0f 	and.w	ip, r4, #15
    59d8:	d013      	beq.n	5a02 <memset+0x8e>
    59da:	f1ac 0304 	sub.w	r3, ip, #4
    59de:	f023 0303 	bic.w	r3, r3, #3
    59e2:	3304      	adds	r3, #4
    59e4:	4413      	add	r3, r2
    59e6:	f842 5b04 	str.w	r5, [r2], #4
    59ea:	4293      	cmp	r3, r2
    59ec:	d1fb      	bne.n	59e6 <memset+0x72>
    59ee:	f00c 0403 	and.w	r4, ip, #3
    59f2:	b12c      	cbz	r4, 5a00 <memset+0x8c>
    59f4:	b2ca      	uxtb	r2, r1
    59f6:	441c      	add	r4, r3
    59f8:	f803 2b01 	strb.w	r2, [r3], #1
    59fc:	429c      	cmp	r4, r3
    59fe:	d1fb      	bne.n	59f8 <memset+0x84>
    5a00:	bd30      	pop	{r4, r5, pc}
    5a02:	4664      	mov	r4, ip
    5a04:	4613      	mov	r3, r2
    5a06:	2c00      	cmp	r4, #0
    5a08:	d1f4      	bne.n	59f4 <memset+0x80>
    5a0a:	e7f9      	b.n	5a00 <memset+0x8c>
    5a0c:	4603      	mov	r3, r0
    5a0e:	4614      	mov	r4, r2
    5a10:	e7bf      	b.n	5992 <memset+0x1e>
    5a12:	461a      	mov	r2, r3
    5a14:	46a4      	mov	ip, r4
    5a16:	e7e0      	b.n	59da <memset+0x66>
    5a18:	33323130 	.word	0x33323130
    5a1c:	37363534 	.word	0x37363534
    5a20:	62613938 	.word	0x62613938
    5a24:	66656463 	.word	0x66656463
    5a28:	6a696867 	.word	0x6a696867
    5a2c:	6e6d6c6b 	.word	0x6e6d6c6b
    5a30:	7271706f 	.word	0x7271706f
    5a34:	76757473 	.word	0x76757473
    5a38:	7a797877 	.word	0x7a797877
    5a3c:	00000000 	.word	0x00000000
    5a40:	33323130 	.word	0x33323130
    5a44:	37363534 	.word	0x37363534
    5a48:	42413938 	.word	0x42413938
    5a4c:	46454443 	.word	0x46454443
    5a50:	4a494847 	.word	0x4a494847
    5a54:	4e4d4c4b 	.word	0x4e4d4c4b
    5a58:	5251504f 	.word	0x5251504f
    5a5c:	56555453 	.word	0x56555453
    5a60:	5a595857 	.word	0x5a595857
    5a64:	00000000 	.word	0x00000000
    5a68:	4c554e3c 	.word	0x4c554e3c
    5a6c:	00003e4c 	.word	0x00003e4c

00005a70 <_ctype_>:
    5a70:	20202000 20202020 28282020 20282828     .         ((((( 
    5a80:	20202020 20202020 20202020 20202020                     
    5a90:	10108820 10101010 10101010 10101010      ...............
    5aa0:	04040410 04040404 10040404 10101010     ................
    5ab0:	41411010 41414141 01010101 01010101     ..AAAAAA........
    5ac0:	01010101 01010101 01010101 10101010     ................
    5ad0:	42421010 42424242 02020202 02020202     ..BBBBBB........
    5ae0:	02020202 02020202 02020202 10101010     ................
    5af0:	00000020 00000000 00000000 00000000      ...............
	...
